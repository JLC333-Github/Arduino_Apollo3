
bin/artemis_svl.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 01 ce 00 00 69 ce 00 00 f1 cc 00 00     ........i.......
    c010:	f1 cc 00 00 f1 cc 00 00 f1 cc 00 00 00 00 00 00     ................
	...
    c02c:	6f ce 00 00 6f ce 00 00 00 00 00 00 6f ce 00 00     o...o.......o...
    c03c:	6f ce 00 00 6f ce 00 00 6f ce 00 00 6f ce 00 00     o...o...o...o...
    c04c:	6f ce 00 00 6f ce 00 00 6f ce 00 00 6f ce 00 00     o...o...o...o...
    c05c:	6f ce 00 00 6f ce 00 00 6f ce 00 00 6f ce 00 00     o...o...o...o...
    c06c:	6f ce 00 00 6f ce 00 00 11 cc 00 00 6f ce 00 00     o...o.......o...
    c07c:	91 cb 00 00 01 cc 00 00 6f ce 00 00 6f ce 00 00     ........o...o...
    c08c:	6f ce 00 00 6f ce 00 00 6f ce 00 00 59 cc 00 00     o...o...o...Y...
    c09c:	6f ce 00 00 6f ce 00 00 6f ce 00 00 6f ce 00 00     o...o...o...o...
    c0ac:	6f ce 00 00 6f ce 00 00 6f ce 00 00 6f ce 00 00     o...o...o...o...
    c0bc:	6f ce 00 00                                         o...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_uldivmod>:
    c100:	b953      	cbnz	r3, c118 <__aeabi_uldivmod+0x18>
    c102:	b94a      	cbnz	r2, c118 <__aeabi_uldivmod+0x18>
    c104:	2900      	cmp	r1, #0
    c106:	bf08      	it	eq
    c108:	2800      	cmpeq	r0, #0
    c10a:	bf1c      	itt	ne
    c10c:	f04f 31ff 	movne.w	r1, #4294967295
    c110:	f04f 30ff 	movne.w	r0, #4294967295
    c114:	f000 b974 	b.w	c400 <__aeabi_idiv0>
    c118:	f1ad 0c08 	sub.w	ip, sp, #8
    c11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c120:	f000 f806 	bl	c130 <__udivmoddi4>
    c124:	f8dd e004 	ldr.w	lr, [sp, #4]
    c128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c12c:	b004      	add	sp, #16
    c12e:	4770      	bx	lr

0000c130 <__udivmoddi4>:
    c130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c134:	9e08      	ldr	r6, [sp, #32]
    c136:	4604      	mov	r4, r0
    c138:	4688      	mov	r8, r1
    c13a:	2b00      	cmp	r3, #0
    c13c:	f040 8085 	bne.w	c24a <__udivmoddi4+0x11a>
    c140:	428a      	cmp	r2, r1
    c142:	4615      	mov	r5, r2
    c144:	d948      	bls.n	c1d8 <__udivmoddi4+0xa8>
    c146:	fab2 f282 	clz	r2, r2
    c14a:	b14a      	cbz	r2, c160 <__udivmoddi4+0x30>
    c14c:	f1c2 0720 	rsb	r7, r2, #32
    c150:	fa01 f302 	lsl.w	r3, r1, r2
    c154:	fa20 f707 	lsr.w	r7, r0, r7
    c158:	4095      	lsls	r5, r2
    c15a:	ea47 0803 	orr.w	r8, r7, r3
    c15e:	4094      	lsls	r4, r2
    c160:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c164:	0c23      	lsrs	r3, r4, #16
    c166:	fbb8 f7fe 	udiv	r7, r8, lr
    c16a:	fa1f fc85 	uxth.w	ip, r5
    c16e:	fb0e 8817 	mls	r8, lr, r7, r8
    c172:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    c176:	fb07 f10c 	mul.w	r1, r7, ip
    c17a:	4299      	cmp	r1, r3
    c17c:	d909      	bls.n	c192 <__udivmoddi4+0x62>
    c17e:	18eb      	adds	r3, r5, r3
    c180:	f107 30ff 	add.w	r0, r7, #4294967295
    c184:	f080 80e3 	bcs.w	c34e <__udivmoddi4+0x21e>
    c188:	4299      	cmp	r1, r3
    c18a:	f240 80e0 	bls.w	c34e <__udivmoddi4+0x21e>
    c18e:	3f02      	subs	r7, #2
    c190:	442b      	add	r3, r5
    c192:	1a5b      	subs	r3, r3, r1
    c194:	b2a4      	uxth	r4, r4
    c196:	fbb3 f0fe 	udiv	r0, r3, lr
    c19a:	fb0e 3310 	mls	r3, lr, r0, r3
    c19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c1a2:	fb00 fc0c 	mul.w	ip, r0, ip
    c1a6:	45a4      	cmp	ip, r4
    c1a8:	d909      	bls.n	c1be <__udivmoddi4+0x8e>
    c1aa:	192c      	adds	r4, r5, r4
    c1ac:	f100 33ff 	add.w	r3, r0, #4294967295
    c1b0:	f080 80cb 	bcs.w	c34a <__udivmoddi4+0x21a>
    c1b4:	45a4      	cmp	ip, r4
    c1b6:	f240 80c8 	bls.w	c34a <__udivmoddi4+0x21a>
    c1ba:	3802      	subs	r0, #2
    c1bc:	442c      	add	r4, r5
    c1be:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    c1c2:	eba4 040c 	sub.w	r4, r4, ip
    c1c6:	2700      	movs	r7, #0
    c1c8:	b11e      	cbz	r6, c1d2 <__udivmoddi4+0xa2>
    c1ca:	40d4      	lsrs	r4, r2
    c1cc:	2300      	movs	r3, #0
    c1ce:	e9c6 4300 	strd	r4, r3, [r6]
    c1d2:	4639      	mov	r1, r7
    c1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c1d8:	2a00      	cmp	r2, #0
    c1da:	d053      	beq.n	c284 <__udivmoddi4+0x154>
    c1dc:	fab2 f282 	clz	r2, r2
    c1e0:	2a00      	cmp	r2, #0
    c1e2:	f040 80b6 	bne.w	c352 <__udivmoddi4+0x222>
    c1e6:	1b49      	subs	r1, r1, r5
    c1e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c1ec:	fa1f f885 	uxth.w	r8, r5
    c1f0:	2701      	movs	r7, #1
    c1f2:	fbb1 fcfe 	udiv	ip, r1, lr
    c1f6:	0c23      	lsrs	r3, r4, #16
    c1f8:	fb0e 111c 	mls	r1, lr, ip, r1
    c1fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c200:	fb08 f10c 	mul.w	r1, r8, ip
    c204:	4299      	cmp	r1, r3
    c206:	d907      	bls.n	c218 <__udivmoddi4+0xe8>
    c208:	18eb      	adds	r3, r5, r3
    c20a:	f10c 30ff 	add.w	r0, ip, #4294967295
    c20e:	d202      	bcs.n	c216 <__udivmoddi4+0xe6>
    c210:	4299      	cmp	r1, r3
    c212:	f200 80ec 	bhi.w	c3ee <__udivmoddi4+0x2be>
    c216:	4684      	mov	ip, r0
    c218:	1a59      	subs	r1, r3, r1
    c21a:	b2a3      	uxth	r3, r4
    c21c:	fbb1 f0fe 	udiv	r0, r1, lr
    c220:	fb0e 1410 	mls	r4, lr, r0, r1
    c224:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    c228:	fb08 f800 	mul.w	r8, r8, r0
    c22c:	45a0      	cmp	r8, r4
    c22e:	d907      	bls.n	c240 <__udivmoddi4+0x110>
    c230:	192c      	adds	r4, r5, r4
    c232:	f100 33ff 	add.w	r3, r0, #4294967295
    c236:	d202      	bcs.n	c23e <__udivmoddi4+0x10e>
    c238:	45a0      	cmp	r8, r4
    c23a:	f200 80dc 	bhi.w	c3f6 <__udivmoddi4+0x2c6>
    c23e:	4618      	mov	r0, r3
    c240:	eba4 0408 	sub.w	r4, r4, r8
    c244:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c248:	e7be      	b.n	c1c8 <__udivmoddi4+0x98>
    c24a:	428b      	cmp	r3, r1
    c24c:	d908      	bls.n	c260 <__udivmoddi4+0x130>
    c24e:	2e00      	cmp	r6, #0
    c250:	d078      	beq.n	c344 <__udivmoddi4+0x214>
    c252:	2700      	movs	r7, #0
    c254:	e9c6 0100 	strd	r0, r1, [r6]
    c258:	4638      	mov	r0, r7
    c25a:	4639      	mov	r1, r7
    c25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c260:	fab3 f783 	clz	r7, r3
    c264:	b97f      	cbnz	r7, c286 <__udivmoddi4+0x156>
    c266:	428b      	cmp	r3, r1
    c268:	d302      	bcc.n	c270 <__udivmoddi4+0x140>
    c26a:	4282      	cmp	r2, r0
    c26c:	f200 80bd 	bhi.w	c3ea <__udivmoddi4+0x2ba>
    c270:	1a84      	subs	r4, r0, r2
    c272:	eb61 0303 	sbc.w	r3, r1, r3
    c276:	2001      	movs	r0, #1
    c278:	4698      	mov	r8, r3
    c27a:	2e00      	cmp	r6, #0
    c27c:	d0a9      	beq.n	c1d2 <__udivmoddi4+0xa2>
    c27e:	e9c6 4800 	strd	r4, r8, [r6]
    c282:	e7a6      	b.n	c1d2 <__udivmoddi4+0xa2>
    c284:	deff      	udf	#255	; 0xff
    c286:	f1c7 0520 	rsb	r5, r7, #32
    c28a:	40bb      	lsls	r3, r7
    c28c:	fa22 fc05 	lsr.w	ip, r2, r5
    c290:	ea4c 0c03 	orr.w	ip, ip, r3
    c294:	fa01 f407 	lsl.w	r4, r1, r7
    c298:	fa20 f805 	lsr.w	r8, r0, r5
    c29c:	fa21 f305 	lsr.w	r3, r1, r5
    c2a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    c2a4:	ea48 0404 	orr.w	r4, r8, r4
    c2a8:	fbb3 f9fe 	udiv	r9, r3, lr
    c2ac:	0c21      	lsrs	r1, r4, #16
    c2ae:	fb0e 3319 	mls	r3, lr, r9, r3
    c2b2:	fa1f f88c 	uxth.w	r8, ip
    c2b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    c2ba:	fb09 fa08 	mul.w	sl, r9, r8
    c2be:	459a      	cmp	sl, r3
    c2c0:	fa02 f207 	lsl.w	r2, r2, r7
    c2c4:	fa00 f107 	lsl.w	r1, r0, r7
    c2c8:	d90b      	bls.n	c2e2 <__udivmoddi4+0x1b2>
    c2ca:	eb1c 0303 	adds.w	r3, ip, r3
    c2ce:	f109 30ff 	add.w	r0, r9, #4294967295
    c2d2:	f080 8088 	bcs.w	c3e6 <__udivmoddi4+0x2b6>
    c2d6:	459a      	cmp	sl, r3
    c2d8:	f240 8085 	bls.w	c3e6 <__udivmoddi4+0x2b6>
    c2dc:	f1a9 0902 	sub.w	r9, r9, #2
    c2e0:	4463      	add	r3, ip
    c2e2:	eba3 030a 	sub.w	r3, r3, sl
    c2e6:	b2a4      	uxth	r4, r4
    c2e8:	fbb3 f0fe 	udiv	r0, r3, lr
    c2ec:	fb0e 3310 	mls	r3, lr, r0, r3
    c2f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c2f4:	fb00 f808 	mul.w	r8, r0, r8
    c2f8:	45a0      	cmp	r8, r4
    c2fa:	d908      	bls.n	c30e <__udivmoddi4+0x1de>
    c2fc:	eb1c 0404 	adds.w	r4, ip, r4
    c300:	f100 33ff 	add.w	r3, r0, #4294967295
    c304:	d26b      	bcs.n	c3de <__udivmoddi4+0x2ae>
    c306:	45a0      	cmp	r8, r4
    c308:	d969      	bls.n	c3de <__udivmoddi4+0x2ae>
    c30a:	3802      	subs	r0, #2
    c30c:	4464      	add	r4, ip
    c30e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    c312:	eba4 0408 	sub.w	r4, r4, r8
    c316:	fba0 8902 	umull	r8, r9, r0, r2
    c31a:	454c      	cmp	r4, r9
    c31c:	46c6      	mov	lr, r8
    c31e:	464b      	mov	r3, r9
    c320:	d354      	bcc.n	c3cc <__udivmoddi4+0x29c>
    c322:	d051      	beq.n	c3c8 <__udivmoddi4+0x298>
    c324:	2e00      	cmp	r6, #0
    c326:	d069      	beq.n	c3fc <__udivmoddi4+0x2cc>
    c328:	ebb1 020e 	subs.w	r2, r1, lr
    c32c:	eb64 0403 	sbc.w	r4, r4, r3
    c330:	fa04 f505 	lsl.w	r5, r4, r5
    c334:	fa22 f307 	lsr.w	r3, r2, r7
    c338:	40fc      	lsrs	r4, r7
    c33a:	431d      	orrs	r5, r3
    c33c:	e9c6 5400 	strd	r5, r4, [r6]
    c340:	2700      	movs	r7, #0
    c342:	e746      	b.n	c1d2 <__udivmoddi4+0xa2>
    c344:	4637      	mov	r7, r6
    c346:	4630      	mov	r0, r6
    c348:	e743      	b.n	c1d2 <__udivmoddi4+0xa2>
    c34a:	4618      	mov	r0, r3
    c34c:	e737      	b.n	c1be <__udivmoddi4+0x8e>
    c34e:	4607      	mov	r7, r0
    c350:	e71f      	b.n	c192 <__udivmoddi4+0x62>
    c352:	f1c2 0320 	rsb	r3, r2, #32
    c356:	fa20 f703 	lsr.w	r7, r0, r3
    c35a:	4095      	lsls	r5, r2
    c35c:	fa01 f002 	lsl.w	r0, r1, r2
    c360:	fa21 f303 	lsr.w	r3, r1, r3
    c364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c368:	4338      	orrs	r0, r7
    c36a:	0c01      	lsrs	r1, r0, #16
    c36c:	fbb3 f7fe 	udiv	r7, r3, lr
    c370:	fa1f f885 	uxth.w	r8, r5
    c374:	fb0e 3317 	mls	r3, lr, r7, r3
    c378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c37c:	fb07 f308 	mul.w	r3, r7, r8
    c380:	428b      	cmp	r3, r1
    c382:	fa04 f402 	lsl.w	r4, r4, r2
    c386:	d907      	bls.n	c398 <__udivmoddi4+0x268>
    c388:	1869      	adds	r1, r5, r1
    c38a:	f107 3cff 	add.w	ip, r7, #4294967295
    c38e:	d228      	bcs.n	c3e2 <__udivmoddi4+0x2b2>
    c390:	428b      	cmp	r3, r1
    c392:	d926      	bls.n	c3e2 <__udivmoddi4+0x2b2>
    c394:	3f02      	subs	r7, #2
    c396:	4429      	add	r1, r5
    c398:	1acb      	subs	r3, r1, r3
    c39a:	b281      	uxth	r1, r0
    c39c:	fbb3 f0fe 	udiv	r0, r3, lr
    c3a0:	fb0e 3310 	mls	r3, lr, r0, r3
    c3a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c3a8:	fb00 f308 	mul.w	r3, r0, r8
    c3ac:	428b      	cmp	r3, r1
    c3ae:	d907      	bls.n	c3c0 <__udivmoddi4+0x290>
    c3b0:	1869      	adds	r1, r5, r1
    c3b2:	f100 3cff 	add.w	ip, r0, #4294967295
    c3b6:	d210      	bcs.n	c3da <__udivmoddi4+0x2aa>
    c3b8:	428b      	cmp	r3, r1
    c3ba:	d90e      	bls.n	c3da <__udivmoddi4+0x2aa>
    c3bc:	3802      	subs	r0, #2
    c3be:	4429      	add	r1, r5
    c3c0:	1ac9      	subs	r1, r1, r3
    c3c2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    c3c6:	e714      	b.n	c1f2 <__udivmoddi4+0xc2>
    c3c8:	4541      	cmp	r1, r8
    c3ca:	d2ab      	bcs.n	c324 <__udivmoddi4+0x1f4>
    c3cc:	ebb8 0e02 	subs.w	lr, r8, r2
    c3d0:	eb69 020c 	sbc.w	r2, r9, ip
    c3d4:	3801      	subs	r0, #1
    c3d6:	4613      	mov	r3, r2
    c3d8:	e7a4      	b.n	c324 <__udivmoddi4+0x1f4>
    c3da:	4660      	mov	r0, ip
    c3dc:	e7f0      	b.n	c3c0 <__udivmoddi4+0x290>
    c3de:	4618      	mov	r0, r3
    c3e0:	e795      	b.n	c30e <__udivmoddi4+0x1de>
    c3e2:	4667      	mov	r7, ip
    c3e4:	e7d8      	b.n	c398 <__udivmoddi4+0x268>
    c3e6:	4681      	mov	r9, r0
    c3e8:	e77b      	b.n	c2e2 <__udivmoddi4+0x1b2>
    c3ea:	4638      	mov	r0, r7
    c3ec:	e745      	b.n	c27a <__udivmoddi4+0x14a>
    c3ee:	f1ac 0c02 	sub.w	ip, ip, #2
    c3f2:	442b      	add	r3, r5
    c3f4:	e710      	b.n	c218 <__udivmoddi4+0xe8>
    c3f6:	3802      	subs	r0, #2
    c3f8:	442c      	add	r4, r5
    c3fa:	e721      	b.n	c240 <__udivmoddi4+0x110>
    c3fc:	4637      	mov	r7, r6
    c3fe:	e6e8      	b.n	c1d2 <__udivmoddi4+0xa2>

0000c400 <__aeabi_idiv0>:
    c400:	4770      	bx	lr
    c402:	bf00      	nop

0000c404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c404:	b480      	push	{r7}
    c406:	b083      	sub	sp, #12
    c408:	af00      	add	r7, sp, #0
    c40a:	4603      	mov	r3, r0
    c40c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c40e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c412:	2b00      	cmp	r3, #0
    c414:	db0b      	blt.n	c42e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c416:	79fb      	ldrb	r3, [r7, #7]
    c418:	f003 021f 	and.w	r2, r3, #31
    c41c:	4907      	ldr	r1, [pc, #28]	; (c43c <__NVIC_EnableIRQ+0x38>)
    c41e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c422:	095b      	lsrs	r3, r3, #5
    c424:	2001      	movs	r0, #1
    c426:	fa00 f202 	lsl.w	r2, r0, r2
    c42a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c42e:	bf00      	nop
    c430:	370c      	adds	r7, #12
    c432:	46bd      	mov	sp, r7
    c434:	f85d 7b04 	ldr.w	r7, [sp], #4
    c438:	4770      	bx	lr
    c43a:	bf00      	nop
    c43c:	e000e100 	.word	0xe000e100

0000c440 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    c440:	b480      	push	{r7}
    c442:	b083      	sub	sp, #12
    c444:	af00      	add	r7, sp, #0
    c446:	4603      	mov	r3, r0
    c448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c44a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c44e:	2b00      	cmp	r3, #0
    c450:	db10      	blt.n	c474 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c452:	79fb      	ldrb	r3, [r7, #7]
    c454:	f003 021f 	and.w	r2, r3, #31
    c458:	4909      	ldr	r1, [pc, #36]	; (c480 <__NVIC_DisableIRQ+0x40>)
    c45a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c45e:	095b      	lsrs	r3, r3, #5
    c460:	2001      	movs	r0, #1
    c462:	fa00 f202 	lsl.w	r2, r0, r2
    c466:	3320      	adds	r3, #32
    c468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c46c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c470:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    c474:	bf00      	nop
    c476:	370c      	adds	r7, #12
    c478:	46bd      	mov	sp, r7
    c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c47e:	4770      	bx	lr
    c480:	e000e100 	.word	0xe000e100

0000c484 <main>:
//*****************************************************************************
//
// Main
//
//*****************************************************************************
int main(void){
    c484:	b580      	push	{r7, lr}
    c486:	f6ad 2d28 	subw	sp, sp, #2600	; 0xa28
    c48a:	af00      	add	r7, sp, #0

    bool        baud_valid = false;
    c48c:	2300      	movs	r3, #0
    c48e:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
    uint32_t    bl_baud = 0x00;
    c492:	2300      	movs	r3, #0
    c494:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
    uint8_t     bl_buffer[BL_UART_BUF_LEN] = {0};
    c498:	f107 0320 	add.w	r3, r7, #32
    c49c:	4618      	mov	r0, r3
    c49e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    c4a2:	461a      	mov	r2, r3
    c4a4:	2100      	movs	r1, #0
    c4a6:	f001 f943 	bl	d730 <memset>

    #define         PLLEN_VER 1
    uint8_t         packet_ver_buf[PLLEN_VER] = {SVL_VERSION_NUMBER};
    c4aa:	f107 031c 	add.w	r3, r7, #28
    c4ae:	2203      	movs	r2, #3
    c4b0:	701a      	strb	r2, [r3, #0]
    svl_packet_t    svl_packet_version = { CMD_VERSION, packet_ver_buf, PLLEN_VER, PLLEN_VER };
    c4b2:	f107 0310 	add.w	r3, r7, #16
    c4b6:	2201      	movs	r2, #1
    c4b8:	701a      	strb	r2, [r3, #0]
    c4ba:	f107 0310 	add.w	r3, r7, #16
    c4be:	f107 021c 	add.w	r2, r7, #28
    c4c2:	605a      	str	r2, [r3, #4]
    c4c4:	f107 0310 	add.w	r3, r7, #16
    c4c8:	2201      	movs	r2, #1
    c4ca:	811a      	strh	r2, [r3, #8]
    c4cc:	f107 0310 	add.w	r3, r7, #16
    c4d0:	2201      	movs	r2, #1
    c4d2:	815a      	strh	r2, [r3, #10]
    svl_packet_t    svl_packet_blmode = { CMD_BLMODE, NULL, 0, 0 };
    c4d4:	1d3b      	adds	r3, r7, #4
    c4d6:	2202      	movs	r2, #2
    c4d8:	701a      	strb	r2, [r3, #0]
    c4da:	1d3b      	adds	r3, r7, #4
    c4dc:	2200      	movs	r2, #0
    c4de:	605a      	str	r2, [r3, #4]
    c4e0:	1d3b      	adds	r3, r7, #4
    c4e2:	2200      	movs	r2, #0
    c4e4:	811a      	strh	r2, [r3, #8]
    c4e6:	1d3b      	adds	r3, r7, #4
    c4e8:	2200      	movs	r2, #0
    c4ea:	815a      	strh	r2, [r3, #10]

    art_svl_ringbuf_init( &bl_rx_ringbuf, bl_buffer, BL_UART_BUF_LEN );
    c4ec:	f107 0320 	add.w	r3, r7, #32
    c4f0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    c4f4:	4619      	mov	r1, r3
    c4f6:	4827      	ldr	r0, [pc, #156]	; (c594 <main+0x110>)
    c4f8:	f000 fcbc 	bl	ce74 <art_svl_ringbuf_init>
    setup();
    c4fc:	f000 f85a 	bl	c5b4 <setup>

    debug_printf("\n\nArtemis SVL Bootloader - DEBUG\n\n");
    c500:	4825      	ldr	r0, [pc, #148]	; (c598 <main+0x114>)
    c502:	f000 fb3b 	bl	cb7c <debug_printf>

    baud_valid = detect_baud_rate( &bl_baud );                                      // Detects the baud rate. Returns true if a valid baud rate was found
    c506:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
    c50a:	4618      	mov	r0, r3
    c50c:	f000 f864 	bl	c5d8 <detect_baud_rate>
    c510:	4603      	mov	r3, r0
    c512:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
    if( baud_valid == false ){        
    c516:	f897 3a27 	ldrb.w	r3, [r7, #2599]	; 0xa27
    c51a:	f083 0301 	eor.w	r3, r3, #1
    c51e:	b2db      	uxtb	r3, r3
    c520:	2b00      	cmp	r3, #0
    c522:	d001      	beq.n	c528 <main+0xa4>
        app_start();                                                                // w/o valid baud rate jump t the app
    c524:	f000 fb0e 	bl	cb44 <app_start>
    }

    start_uart_bl( bl_baud );                                                       // This will create a 23 us wide low 'blip' on the TX line (until possibly fixed)
    c528:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
    c52c:	4618      	mov	r0, r3
    c52e:	f000 f993 	bl	c858 <start_uart_bl>
    am_util_delay_us(200);                                                          // At the minimum baud rate of 115200 one byte (10 bits with start/stop) takes 10/115200 or 87 us. 87+23 = 100, double to be safe
    c532:	20c8      	movs	r0, #200	; 0xc8
    c534:	f000 fbbe 	bl	ccb4 <am_util_delay_us>

    debug_printf("phase:\tconfirm bootloading entry\n");
    c538:	4818      	ldr	r0, [pc, #96]	; (c59c <main+0x118>)
    c53a:	f000 fb1f 	bl	cb7c <debug_printf>
    debug_printf("\tsending Artemis SVL version packet\n");
    c53e:	4818      	ldr	r0, [pc, #96]	; (c5a0 <main+0x11c>)
    c540:	f000 fb1c 	bl	cb7c <debug_printf>
    svl_packet_send( &svl_packet_version );                                         // when baud rate is determined send the version packet
    c544:	f107 0310 	add.w	r3, r7, #16
    c548:	4618      	mov	r0, r3
    c54a:	f000 fdbb 	bl	d0c4 <svl_packet_send>

    debug_printf("\twaiting for bootloader confirmation\n");
    c54e:	4815      	ldr	r0, [pc, #84]	; (c5a4 <main+0x120>)
    c550:	f000 fb14 	bl	cb7c <debug_printf>
    if(svl_packet_wait( &svl_packet_blmode ) != 0){                                 // wait for the bootloader to confirm bootloader mode entry
    c554:	1d3b      	adds	r3, r7, #4
    c556:	4618      	mov	r0, r3
    c558:	f000 fe52 	bl	d200 <svl_packet_wait>
    c55c:	4603      	mov	r3, r0
    c55e:	2b00      	cmp	r3, #0
    c560:	d004      	beq.n	c56c <main+0xe8>
        debug_printf("\tno confirmation received\n");
    c562:	4811      	ldr	r0, [pc, #68]	; (c5a8 <main+0x124>)
    c564:	f000 fb0a 	bl	cb7c <debug_printf>
        app_start();  // break to app
    c568:	f000 faec 	bl	cb44 <app_start>
    }
    debug_printf("\tentering bootloader\n\n");
    c56c:	480f      	ldr	r0, [pc, #60]	; (c5ac <main+0x128>)
    c56e:	f000 fb05 	bl	cb7c <debug_printf>

    enter_bootload();       // Now we are locked in
    c572:	f000 f9db 	bl	c92c <enter_bootload>
    am_util_delay_ms(10);
    c576:	200a      	movs	r0, #10
    c578:	f000 fb7e 	bl	cc78 <am_util_delay_ms>

    am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOI, 0); //Cause a system Power On Init to release as much of the stack as possible
    c57c:	2100      	movs	r1, #0
    c57e:	2001      	movs	r0, #1
    c580:	f001 fd26 	bl	dfd0 <am_hal_reset_control>

    debug_printf("ERROR - runoff");
    c584:	480a      	ldr	r0, [pc, #40]	; (c5b0 <main+0x12c>)
    c586:	f000 faf9 	bl	cb7c <debug_printf>
    while (1){                                              // Loop forever while sleeping.
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);    // Go to Deep Sleep.
    c58a:	2001      	movs	r0, #1
    c58c:	f001 fd4c 	bl	e028 <am_hal_sysctrl_sleep>
    c590:	e7fb      	b.n	c58a <main+0x106>
    c592:	bf00      	nop
    c594:	10001010 	.word	0x10001010
    c598:	0000ebcc 	.word	0x0000ebcc
    c59c:	0000ebf0 	.word	0x0000ebf0
    c5a0:	0000ec14 	.word	0x0000ec14
    c5a4:	0000ec3c 	.word	0x0000ec3c
    c5a8:	0000ec64 	.word	0x0000ec64
    c5ac:	0000ec80 	.word	0x0000ec80
    c5b0:	0000ec98 	.word	0x0000ec98

0000c5b4 <setup>:
//*****************************************************************************
//
// Setup
//
//*****************************************************************************
void setup( void ){
    c5b4:	b580      	push	{r7, lr}
    c5b6:	af00      	add	r7, sp, #0
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c5b8:	2100      	movs	r1, #0
    c5ba:	2000      	movs	r0, #0
    c5bc:	f001 f996 	bl	d8ec <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c5c0:	4804      	ldr	r0, [pc, #16]	; (c5d4 <setup+0x20>)
    c5c2:	f001 f963 	bl	d88c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c5c6:	f001 f987 	bl	d8d8 <am_hal_cachectrl_enable>
    NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + DEBUG_UART_INST));
    am_hal_uart_interrupt_enable(hUART_debug, (AM_HAL_UART_INT_RX));
#endif

    // Enable interrupts.
    am_hal_interrupt_master_enable();
    c5ca:	f001 fc5f 	bl	de8c <am_hal_interrupt_master_enable>
}
    c5ce:	bf00      	nop
    c5d0:	bd80      	pop	{r7, pc}
    c5d2:	bf00      	nop
    c5d4:	0000eee4 	.word	0x0000eee4

0000c5d8 <detect_baud_rate>:
// ****************************************
// 
// Baud Rate Detect Phase
// 
// ****************************************
bool detect_baud_rate( uint32_t* baud ){
    c5d8:	b580      	push	{r7, lr}
    c5da:	b088      	sub	sp, #32
    c5dc:	af00      	add	r7, sp, #0
    c5de:	6078      	str	r0, [r7, #4]
    uint32_t  bl_entry_timeout_ms = 200;
    c5e0:	23c8      	movs	r3, #200	; 0xc8
    c5e2:	613b      	str	r3, [r7, #16]
    uint32_t  bl_entry_timeout_start = millis();
    c5e4:	f000 fffc 	bl	d5e0 <millis>
    c5e8:	60f8      	str	r0, [r7, #12]
    bool baud_is_valid = false;
    c5ea:	2300      	movs	r3, #0
    c5ec:	77fb      	strb	r3, [r7, #31]
    bool timed_out = true;
    c5ee:	2301      	movs	r3, #1
    c5f0:	77bb      	strb	r3, [r7, #30]

    debug_printf("phase:\tdetect baud rate\n");
    c5f2:	488f      	ldr	r0, [pc, #572]	; (c830 <detect_baud_rate+0x258>)
    c5f4:	f000 fac2 	bl	cb7c <debug_printf>

    enable_burst_mode();
    c5f8:	f001 f806 	bl	d608 <enable_burst_mode>

    am_hal_gpio_pinconfig(BL_RX_PAD, g_AM_HAL_GPIO_INPUT_PULLUP);
    c5fc:	4b8d      	ldr	r3, [pc, #564]	; (c834 <detect_baud_rate+0x25c>)
    c5fe:	6819      	ldr	r1, [r3, #0]
    c600:	2031      	movs	r0, #49	; 0x31
    c602:	f001 fa9f 	bl	db44 <am_hal_gpio_pinconfig>

    ap3_gpio_enable_interrupts(BL_RX_PAD, AM_HAL_GPIO_PIN_INTDIR_LO2HI);
    c606:	2100      	movs	r1, #0
    c608:	2031      	movs	r0, #49	; 0x31
    c60a:	f001 f82d 	bl	d668 <ap3_gpio_enable_interrupts>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c60e:	f04f 0000 	mov.w	r0, #0
    c612:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c616:	f001 fc1b 	bl	de50 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c61a:	f04f 0000 	mov.w	r0, #0
    c61e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c622:	f001 fbcb 	bl	ddbc <am_hal_gpio_interrupt_enable>
    NVIC_EnableIRQ(GPIO_IRQn);
    c626:	200d      	movs	r0, #13
    c628:	f7ff feec 	bl	c404 <__NVIC_EnableIRQ>

    while( (millis() - bl_entry_timeout_start) < bl_entry_timeout_ms ){
    c62c:	e0c9      	b.n	c7c2 <detect_baud_rate+0x1ea>
        // try to detect baud rate

        // debug_printf("\ttime (ms):\t%d\n", millis());

        if( bl_baud_ticks_index == BL_BAUD_SAMPLES ){
    c62e:	4b82      	ldr	r3, [pc, #520]	; (c838 <detect_baud_rate+0x260>)
    c630:	781b      	ldrb	r3, [r3, #0]
    c632:	b2db      	uxtb	r3, r3
    c634:	2b05      	cmp	r3, #5
    c636:	f040 80c4 	bne.w	c7c2 <detect_baud_rate+0x1ea>

            // compute differences between samples
            for(uint8_t indi = 0; indi < (BL_BAUD_SAMPLES-1); indi++){
    c63a:	2300      	movs	r3, #0
    c63c:	777b      	strb	r3, [r7, #29]
    c63e:	e010      	b.n	c662 <detect_baud_rate+0x8a>
                bl_baud_ticks[indi] = bl_baud_ticks[indi+1]-bl_baud_ticks[indi];
    c640:	7f7b      	ldrb	r3, [r7, #29]
    c642:	3301      	adds	r3, #1
    c644:	4a7d      	ldr	r2, [pc, #500]	; (c83c <detect_baud_rate+0x264>)
    c646:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c64a:	7f7b      	ldrb	r3, [r7, #29]
    c64c:	4a7b      	ldr	r2, [pc, #492]	; (c83c <detect_baud_rate+0x264>)
    c64e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c652:	7f7b      	ldrb	r3, [r7, #29]
    c654:	1a8a      	subs	r2, r1, r2
    c656:	4979      	ldr	r1, [pc, #484]	; (c83c <detect_baud_rate+0x264>)
    c658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for(uint8_t indi = 0; indi < (BL_BAUD_SAMPLES-1); indi++){
    c65c:	7f7b      	ldrb	r3, [r7, #29]
    c65e:	3301      	adds	r3, #1
    c660:	777b      	strb	r3, [r7, #29]
    c662:	7f7b      	ldrb	r3, [r7, #29]
    c664:	2b03      	cmp	r3, #3
    c666:	d9eb      	bls.n	c640 <detect_baud_rate+0x68>
            }

            float mean = 0.0;
    c668:	f04f 0300 	mov.w	r3, #0
    c66c:	61bb      	str	r3, [r7, #24]
            for(uint8_t indi = 0; indi < (BL_BAUD_SAMPLES-1); indi++){
    c66e:	2300      	movs	r3, #0
    c670:	75fb      	strb	r3, [r7, #23]
    c672:	e010      	b.n	c696 <detect_baud_rate+0xbe>
                mean += bl_baud_ticks[indi];
    c674:	7dfb      	ldrb	r3, [r7, #23]
    c676:	4a71      	ldr	r2, [pc, #452]	; (c83c <detect_baud_rate+0x264>)
    c678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c67c:	ee07 3a90 	vmov	s15, r3
    c680:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c684:	ed97 7a06 	vldr	s14, [r7, #24]
    c688:	ee77 7a27 	vadd.f32	s15, s14, s15
    c68c:	edc7 7a06 	vstr	s15, [r7, #24]
            for(uint8_t indi = 0; indi < (BL_BAUD_SAMPLES-1); indi++){
    c690:	7dfb      	ldrb	r3, [r7, #23]
    c692:	3301      	adds	r3, #1
    c694:	75fb      	strb	r3, [r7, #23]
    c696:	7dfb      	ldrb	r3, [r7, #23]
    c698:	2b03      	cmp	r3, #3
    c69a:	d9eb      	bls.n	c674 <detect_baud_rate+0x9c>
            }
            mean /= (BL_BAUD_SAMPLES-1);
    c69c:	ed97 7a06 	vldr	s14, [r7, #24]
    c6a0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    c6a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
    c6a8:	edc7 7a06 	vstr	s15, [r7, #24]


            if( mean < 3 ){
    c6ac:	edd7 7a06 	vldr	s15, [r7, #24]
    c6b0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    c6b4:	eef4 7ac7 	vcmpe.f32	s15, s14
    c6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c6bc:	d47b      	bmi.n	c7b6 <detect_baud_rate+0x1de>
            // invalid
            }else if( ( mean >= 4) && ( mean <= 8) ){
    c6be:	edd7 7a06 	vldr	s15, [r7, #24]
    c6c2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
    c6c6:	eef4 7ac7 	vcmpe.f32	s15, s14
    c6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c6ce:	db0f      	blt.n	c6f0 <detect_baud_rate+0x118>
    c6d0:	edd7 7a06 	vldr	s15, [r7, #24]
    c6d4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    c6d8:	eef4 7ac7 	vcmpe.f32	s15, s14
    c6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c6e0:	d806      	bhi.n	c6f0 <detect_baud_rate+0x118>
                *baud = 921600;
    c6e2:	687b      	ldr	r3, [r7, #4]
    c6e4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
    c6e8:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c6ea:	2301      	movs	r3, #1
    c6ec:	77fb      	strb	r3, [r7, #31]
    c6ee:	e062      	b.n	c7b6 <detect_baud_rate+0x1de>
            }else if( ( mean >= 10) && ( mean <= 14) ){
    c6f0:	edd7 7a06 	vldr	s15, [r7, #24]
    c6f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    c6f8:	eef4 7ac7 	vcmpe.f32	s15, s14
    c6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c700:	db0f      	blt.n	c722 <detect_baud_rate+0x14a>
    c702:	edd7 7a06 	vldr	s15, [r7, #24]
    c706:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
    c70a:	eef4 7ac7 	vcmpe.f32	s15, s14
    c70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c712:	d806      	bhi.n	c722 <detect_baud_rate+0x14a>
                *baud = 460800;
    c714:	687b      	ldr	r3, [r7, #4]
    c716:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
    c71a:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c71c:	2301      	movs	r3, #1
    c71e:	77fb      	strb	r3, [r7, #31]
    c720:	e049      	b.n	c7b6 <detect_baud_rate+0x1de>
            }else if( ( mean >= 25) && ( mean <= 30) ){
    c722:	edd7 7a06 	vldr	s15, [r7, #24]
    c726:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
    c72a:	eef4 7ac7 	vcmpe.f32	s15, s14
    c72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c732:	db0f      	blt.n	c754 <detect_baud_rate+0x17c>
    c734:	edd7 7a06 	vldr	s15, [r7, #24]
    c738:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
    c73c:	eef4 7ac7 	vcmpe.f32	s15, s14
    c740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c744:	d806      	bhi.n	c754 <detect_baud_rate+0x17c>
                *baud = 230400;
    c746:	687b      	ldr	r3, [r7, #4]
    c748:	f44f 3261 	mov.w	r2, #230400	; 0x38400
    c74c:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c74e:	2301      	movs	r3, #1
    c750:	77fb      	strb	r3, [r7, #31]
    c752:	e030      	b.n	c7b6 <detect_baud_rate+0x1de>
            }else if( ( mean >= 45) && ( mean <= 55) ){
    c754:	edd7 7a06 	vldr	s15, [r7, #24]
    c758:	ed9f 7a39 	vldr	s14, [pc, #228]	; c840 <detect_baud_rate+0x268>
    c75c:	eef4 7ac7 	vcmpe.f32	s15, s14
    c760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c764:	db0f      	blt.n	c786 <detect_baud_rate+0x1ae>
    c766:	edd7 7a06 	vldr	s15, [r7, #24]
    c76a:	ed9f 7a36 	vldr	s14, [pc, #216]	; c844 <detect_baud_rate+0x26c>
    c76e:	eef4 7ac7 	vcmpe.f32	s15, s14
    c772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c776:	d806      	bhi.n	c786 <detect_baud_rate+0x1ae>
                *baud = 115200;
    c778:	687b      	ldr	r3, [r7, #4]
    c77a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    c77e:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c780:	2301      	movs	r3, #1
    c782:	77fb      	strb	r3, [r7, #31]
    c784:	e017      	b.n	c7b6 <detect_baud_rate+0x1de>
            }else if( ( mean >= 91) && ( mean <= 111) ){
    c786:	edd7 7a06 	vldr	s15, [r7, #24]
    c78a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; c848 <detect_baud_rate+0x270>
    c78e:	eef4 7ac7 	vcmpe.f32	s15, s14
    c792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c796:	db0e      	blt.n	c7b6 <detect_baud_rate+0x1de>
    c798:	edd7 7a06 	vldr	s15, [r7, #24]
    c79c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; c84c <detect_baud_rate+0x274>
    c7a0:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7a8:	d805      	bhi.n	c7b6 <detect_baud_rate+0x1de>
                *baud = 57600;
    c7aa:	687b      	ldr	r3, [r7, #4]
    c7ac:	f44f 4261 	mov.w	r2, #57600	; 0xe100
    c7b0:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c7b2:	2301      	movs	r3, #1
    c7b4:	77fb      	strb	r3, [r7, #31]
            }else{
                // invalid
            }

            if(baud_is_valid){
    c7b6:	7ffb      	ldrb	r3, [r7, #31]
    c7b8:	2b00      	cmp	r3, #0
    c7ba:	d00c      	beq.n	c7d6 <detect_baud_rate+0x1fe>
                timed_out = false;
    c7bc:	2300      	movs	r3, #0
    c7be:	77bb      	strb	r3, [r7, #30]
            }
            
            break;            // exit the timeout loop
    c7c0:	e009      	b.n	c7d6 <detect_baud_rate+0x1fe>
    while( (millis() - bl_entry_timeout_start) < bl_entry_timeout_ms ){
    c7c2:	f000 ff0d 	bl	d5e0 <millis>
    c7c6:	4602      	mov	r2, r0
    c7c8:	68fb      	ldr	r3, [r7, #12]
    c7ca:	1ad3      	subs	r3, r2, r3
    c7cc:	693a      	ldr	r2, [r7, #16]
    c7ce:	429a      	cmp	r2, r3
    c7d0:	f63f af2d 	bhi.w	c62e <detect_baud_rate+0x56>
    c7d4:	e000      	b.n	c7d8 <detect_baud_rate+0x200>
            break;            // exit the timeout loop
    c7d6:	bf00      	nop
        }
    }

    am_hal_gpio_interrupt_disable(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c7d8:	f04f 0000 	mov.w	r0, #0
    c7dc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c7e0:	f001 fb10 	bl	de04 <am_hal_gpio_interrupt_disable>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c7e4:	f04f 0000 	mov.w	r0, #0
    c7e8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c7ec:	f001 fb30 	bl	de50 <am_hal_gpio_interrupt_clear>
    NVIC_DisableIRQ(GPIO_IRQn);
    c7f0:	200d      	movs	r0, #13
    c7f2:	f7ff fe25 	bl	c440 <__NVIC_DisableIRQ>

    disable_burst_mode();
    c7f6:	f000 ff21 	bl	d63c <disable_burst_mode>
        }
    }
    debug_printf("}\n");
#endif // DEBUG

    if(!baud_is_valid){
    c7fa:	7ffb      	ldrb	r3, [r7, #31]
    c7fc:	f083 0301 	eor.w	r3, r3, #1
    c800:	b2db      	uxtb	r3, r3
    c802:	2b00      	cmp	r3, #0
    c804:	d009      	beq.n	c81a <detect_baud_rate+0x242>
        debug_printf("\tbaud rate not detected.\n\t\trising edges:\t%d\n\t\ttimed out:\t%d\n\n", bl_baud_ticks_index, timed_out);
    c806:	4b0c      	ldr	r3, [pc, #48]	; (c838 <detect_baud_rate+0x260>)
    c808:	781b      	ldrb	r3, [r3, #0]
    c80a:	b2db      	uxtb	r3, r3
    c80c:	4619      	mov	r1, r3
    c80e:	7fbb      	ldrb	r3, [r7, #30]
    c810:	461a      	mov	r2, r3
    c812:	480f      	ldr	r0, [pc, #60]	; (c850 <detect_baud_rate+0x278>)
    c814:	f000 f9b2 	bl	cb7c <debug_printf>
    c818:	e005      	b.n	c826 <detect_baud_rate+0x24e>
    }else{
        debug_printf("\tdetected valid baud rate:\t%d\n\n", *baud);
    c81a:	687b      	ldr	r3, [r7, #4]
    c81c:	681b      	ldr	r3, [r3, #0]
    c81e:	4619      	mov	r1, r3
    c820:	480c      	ldr	r0, [pc, #48]	; (c854 <detect_baud_rate+0x27c>)
    c822:	f000 f9ab 	bl	cb7c <debug_printf>
    }

    return baud_is_valid;
    c826:	7ffb      	ldrb	r3, [r7, #31]
}
    c828:	4618      	mov	r0, r3
    c82a:	3720      	adds	r7, #32
    c82c:	46bd      	mov	sp, r7
    c82e:	bd80      	pop	{r7, pc}
    c830:	0000eca8 	.word	0x0000eca8
    c834:	0000eee8 	.word	0x0000eee8
    c838:	10001024 	.word	0x10001024
    c83c:	10001028 	.word	0x10001028
    c840:	42340000 	.word	0x42340000
    c844:	425c0000 	.word	0x425c0000
    c848:	42b60000 	.word	0x42b60000
    c84c:	42de0000 	.word	0x42de0000
    c850:	0000ecc4 	.word	0x0000ecc4
    c854:	0000ed04 	.word	0x0000ed04

0000c858 <start_uart_bl>:
//*****************************************************************************
//
// Start BL UART at desired baud
//
//*****************************************************************************
void start_uart_bl( uint32_t baud ){
    c858:	b580      	push	{r7, lr}
    c85a:	b08e      	sub	sp, #56	; 0x38
    c85c:	af00      	add	r7, sp, #0
    c85e:	6078      	str	r0, [r7, #4]
    const am_hal_gpio_pincfg_t bl_uart_tx_pinconfig = UART_GPIO_PINCONFIG( BL_UART_INST, TX, BL_TX_PAD );
    c860:	2300      	movs	r3, #0
    c862:	637b      	str	r3, [r7, #52]	; 0x34
    const am_hal_gpio_pincfg_t bl_uart_rx_pinconfig = UART_GPIO_PINCONFIG( BL_UART_INST, RX, BL_RX_PAD );
    c864:	2300      	movs	r3, #0
    c866:	633b      	str	r3, [r7, #48]	; 0x30
    am_hal_uart_config_t bl_uart_config =
    c868:	687b      	ldr	r3, [r7, #4]
    c86a:	60bb      	str	r3, [r7, #8]
    c86c:	2360      	movs	r3, #96	; 0x60
    c86e:	60fb      	str	r3, [r7, #12]
    c870:	2300      	movs	r3, #0
    c872:	613b      	str	r3, [r7, #16]
    c874:	2300      	movs	r3, #0
    c876:	617b      	str	r3, [r7, #20]
    c878:	2300      	movs	r3, #0
    c87a:	61bb      	str	r3, [r7, #24]
    c87c:	2312      	movs	r3, #18
    c87e:	61fb      	str	r3, [r7, #28]
    c880:	2300      	movs	r3, #0
    c882:	623b      	str	r3, [r7, #32]
    c884:	2300      	movs	r3, #0
    c886:	627b      	str	r3, [r7, #36]	; 0x24
    c888:	2300      	movs	r3, #0
    c88a:	62bb      	str	r3, [r7, #40]	; 0x28
    c88c:	2300      	movs	r3, #0
    c88e:	62fb      	str	r3, [r7, #44]	; 0x2c
        .pui8RxBuffer = NULL,
        .ui32RxBufferSize = 0,
    };

    // Initialize the printf interface for UART output.
    am_hal_uart_initialize(BL_UART_INST, &hUART_bl);
    c890:	491f      	ldr	r1, [pc, #124]	; (c910 <start_uart_bl+0xb8>)
    c892:	2000      	movs	r0, #0
    c894:	f001 fc00 	bl	e098 <am_hal_uart_initialize>
    am_hal_uart_power_control(hUART_bl, AM_HAL_SYSCTRL_WAKE, false);
    c898:	4b1d      	ldr	r3, [pc, #116]	; (c910 <start_uart_bl+0xb8>)
    c89a:	681b      	ldr	r3, [r3, #0]
    c89c:	2200      	movs	r2, #0
    c89e:	2100      	movs	r1, #0
    c8a0:	4618      	mov	r0, r3
    c8a2:	f001 fc21 	bl	e0e8 <am_hal_uart_power_control>
    am_hal_uart_configure(hUART_bl, &bl_uart_config);
    c8a6:	4b1a      	ldr	r3, [pc, #104]	; (c910 <start_uart_bl+0xb8>)
    c8a8:	681b      	ldr	r3, [r3, #0]
    c8aa:	f107 0208 	add.w	r2, r7, #8
    c8ae:	4611      	mov	r1, r2
    c8b0:	4618      	mov	r0, r3
    c8b2:	f001 fc8b 	bl	e1cc <am_hal_uart_configure>

    // Disable that pesky FIFO
    UARTn(BL_UART_INST)->LCRH_b.FEN = 0; 
    c8b6:	4a17      	ldr	r2, [pc, #92]	; (c914 <start_uart_bl+0xbc>)
    c8b8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
    c8bc:	f36f 1304 	bfc	r3, #4, #1
    c8c0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

    // Enable the UART pins.
    am_hal_gpio_pinconfig(BL_TX_PAD, bl_uart_tx_pinconfig);
    c8c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    c8c6:	2030      	movs	r0, #48	; 0x30
    c8c8:	f001 f93c 	bl	db44 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(BL_RX_PAD, bl_uart_rx_pinconfig);
    c8cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c8ce:	2031      	movs	r0, #49	; 0x31
    c8d0:	f001 f938 	bl	db44 <am_hal_gpio_pinconfig>

    // Enable interrupts.
    NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + BL_UART_INST));
    c8d4:	200f      	movs	r0, #15
    c8d6:	f7ff fd95 	bl	c404 <__NVIC_EnableIRQ>
    am_hal_uart_interrupt_enable(hUART_bl, (AM_HAL_UART_INT_RX));
    c8da:	4b0d      	ldr	r3, [pc, #52]	; (c910 <start_uart_bl+0xb8>)
    c8dc:	681b      	ldr	r3, [r3, #0]
    c8de:	2110      	movs	r1, #16
    c8e0:	4618      	mov	r0, r3
    c8e2:	f002 f85f 	bl	e9a4 <am_hal_uart_interrupt_enable>

    // Provide SVL Packet interfaces
    svl_packet_link_read_fn			( art_svl_ringbuf_read,	        &bl_rx_ringbuf );
    c8e6:	490c      	ldr	r1, [pc, #48]	; (c918 <start_uart_bl+0xc0>)
    c8e8:	480c      	ldr	r0, [pc, #48]	; (c91c <start_uart_bl+0xc4>)
    c8ea:	f000 fb99 	bl	d020 <svl_packet_link_read_fn>
    svl_packet_link_avail_fn		( art_svl_ringbuf_available,	&bl_rx_ringbuf );	
    c8ee:	490a      	ldr	r1, [pc, #40]	; (c918 <start_uart_bl+0xc0>)
    c8f0:	480b      	ldr	r0, [pc, #44]	; (c920 <start_uart_bl+0xc8>)
    c8f2:	f000 fbc1 	bl	d078 <svl_packet_link_avail_fn>
    svl_packet_link_millis_fn		( millis );
    c8f6:	480b      	ldr	r0, [pc, #44]	; (c924 <start_uart_bl+0xcc>)
    c8f8:	f000 fbd4 	bl	d0a4 <svl_packet_link_millis_fn>
    svl_packet_link_write_fn		( svl_uart_write_byte, 	        hUART_bl );
    c8fc:	4b04      	ldr	r3, [pc, #16]	; (c910 <start_uart_bl+0xb8>)
    c8fe:	681b      	ldr	r3, [r3, #0]
    c900:	4619      	mov	r1, r3
    c902:	4809      	ldr	r0, [pc, #36]	; (c928 <start_uart_bl+0xd0>)
    c904:	f000 fba2 	bl	d04c <svl_packet_link_write_fn>
}
    c908:	bf00      	nop
    c90a:	3738      	adds	r7, #56	; 0x38
    c90c:	46bd      	mov	sp, r7
    c90e:	bd80      	pop	{r7, pc}
    c910:	10001020 	.word	0x10001020
    c914:	4001c000 	.word	0x4001c000
    c918:	10001010 	.word	0x10001010
    c91c:	0000cfc1 	.word	0x0000cfc1
    c920:	0000ceb7 	.word	0x0000ceb7
    c924:	0000d5e1 	.word	0x0000d5e1
    c928:	0000d567 	.word	0x0000d567

0000c92c <enter_bootload>:
// ****************************************
// 
// Bootload phase
// 
// ****************************************
void enter_bootload( void ){
    c92c:	b580      	push	{r7, lr}
    c92e:	b08c      	sub	sp, #48	; 0x30
    c930:	af00      	add	r7, sp, #0
  
    bool              done = false;
    c932:	2300      	movs	r3, #0
    c934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t          frame_address = 0;
    c938:	2300      	movs	r3, #0
    c93a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t          last_page_erased = 0;
    c93c:	2300      	movs	r3, #0
    c93e:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t           retransmit = 0;
    c940:	2300      	movs	r3, #0
    c942:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    static uint32_t   frame_buffer[FRAME_BUFFER_SIZE];

    svl_packet_t      svl_packet_incoming_frame = { CMD_FRAME, (uint8_t*)frame_buffer, sizeof(frame_buffer)/sizeof(uint8_t), sizeof(frame_buffer)/sizeof(uint8_t) };
    c946:	4a3c      	ldr	r2, [pc, #240]	; (ca38 <enter_bootload+0x10c>)
    c948:	f107 0318 	add.w	r3, r7, #24
    c94c:	ca07      	ldmia	r2, {r0, r1, r2}
    c94e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    svl_packet_t      svl_packet_retry = { CMD_RETRY, NULL, 0, 0 };
    c952:	2305      	movs	r3, #5
    c954:	733b      	strb	r3, [r7, #12]
    c956:	2300      	movs	r3, #0
    c958:	613b      	str	r3, [r7, #16]
    c95a:	2300      	movs	r3, #0
    c95c:	82bb      	strh	r3, [r7, #20]
    c95e:	2300      	movs	r3, #0
    c960:	82fb      	strh	r3, [r7, #22]
    svl_packet_t      svl_packet_next = { CMD_NEXT, NULL, 0, 0 };
    c962:	2303      	movs	r3, #3
    c964:	703b      	strb	r3, [r7, #0]
    c966:	2300      	movs	r3, #0
    c968:	607b      	str	r3, [r7, #4]
    c96a:	2300      	movs	r3, #0
    c96c:	813b      	strh	r3, [r7, #8]
    c96e:	2300      	movs	r3, #0
    c970:	817b      	strh	r3, [r7, #10]

    debug_printf("phase:\tbootload\n");
    c972:	4832      	ldr	r0, [pc, #200]	; (ca3c <enter_bootload+0x110>)
    c974:	f000 f902 	bl	cb7c <debug_printf>

    while(!done){
    c978:	e053      	b.n	ca22 <enter_bootload+0xf6>

        if(retransmit != 0){
    c97a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    c97e:	2b00      	cmp	r3, #0
    c980:	d008      	beq.n	c994 <enter_bootload+0x68>
            debug_printf("\trequesting retransmission\n");
    c982:	482f      	ldr	r0, [pc, #188]	; (ca40 <enter_bootload+0x114>)
    c984:	f000 f8fa 	bl	cb7c <debug_printf>
            svl_packet_send( (svl_packet_t*)&svl_packet_retry );                        // Ask to retransmit
    c988:	f107 030c 	add.w	r3, r7, #12
    c98c:	4618      	mov	r0, r3
    c98e:	f000 fb99 	bl	d0c4 <svl_packet_send>
    c992:	e006      	b.n	c9a2 <enter_bootload+0x76>
        }else{
            debug_printf("\trequesting next app frame\n");
    c994:	482b      	ldr	r0, [pc, #172]	; (ca44 <enter_bootload+0x118>)
    c996:	f000 f8f1 	bl	cb7c <debug_printf>
            svl_packet_send( (svl_packet_t*)&svl_packet_next );                         // Ask for the next frame packet
    c99a:	463b      	mov	r3, r7
    c99c:	4618      	mov	r0, r3
    c99e:	f000 fb91 	bl	d0c4 <svl_packet_send>
        }
        retransmit = 0;
    c9a2:	2300      	movs	r3, #0
    c9a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        uint8_t stat = svl_packet_wait( &svl_packet_incoming_frame );
    c9a8:	f107 0318 	add.w	r3, r7, #24
    c9ac:	4618      	mov	r0, r3
    c9ae:	f000 fc27 	bl	d200 <svl_packet_wait>
    c9b2:	4603      	mov	r3, r0
    c9b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if( stat != 0 ){                                                                // wait for either a frame or the done command
    c9b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d009      	beq.n	c9d4 <enter_bootload+0xa8>
            debug_printf("\t\terror receiving packet (%d)\n", stat);
    c9c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c9c4:	4619      	mov	r1, r3
    c9c6:	4820      	ldr	r0, [pc, #128]	; (ca48 <enter_bootload+0x11c>)
    c9c8:	f000 f8d8 	bl	cb7c <debug_printf>
            retransmit = 1;
    c9cc:	2301      	movs	r3, #1
    c9ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            continue;
    c9d2:	e026      	b.n	ca22 <enter_bootload+0xf6>
        }

        // debug_printf("Successfully received incoming frame packet (todo: add extra details in debug)\n", stat);

        if( svl_packet_incoming_frame.cmd == CMD_FRAME ){
    c9d4:	7e3b      	ldrb	r3, [r7, #24]
    c9d6:	2b04      	cmp	r3, #4
    c9d8:	d112      	bne.n	ca00 <enter_bootload+0xd4>
            debug_printf("\t\treceived an app frame\n");
    c9da:	481c      	ldr	r0, [pc, #112]	; (ca4c <enter_bootload+0x120>)
    c9dc:	f000 f8ce 	bl	cb7c <debug_printf>
            if( handle_frame_packet( &svl_packet_incoming_frame, &frame_address, &last_page_erased ) != 0 ){
    c9e0:	f107 0226 	add.w	r2, r7, #38	; 0x26
    c9e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
    c9e8:	f107 0318 	add.w	r3, r7, #24
    c9ec:	4618      	mov	r0, r3
    c9ee:	f000 f833 	bl	ca58 <handle_frame_packet>
    c9f2:	4603      	mov	r3, r0
    c9f4:	2b00      	cmp	r3, #0
    c9f6:	d014      	beq.n	ca22 <enter_bootload+0xf6>
                // debug_printf("\t\t\tbootload error - packet could not be handled\n");
                retransmit = 1;
    c9f8:	2301      	movs	r3, #1
    c9fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                continue;
    c9fe:	e010      	b.n	ca22 <enter_bootload+0xf6>
            }
        }else if( svl_packet_incoming_frame.cmd == CMD_DONE ){
    ca00:	7e3b      	ldrb	r3, [r7, #24]
    ca02:	2b06      	cmp	r3, #6
    ca04:	d106      	bne.n	ca14 <enter_bootload+0xe8>
            debug_printf("\t\treceived done signal!\n\n");
    ca06:	4812      	ldr	r0, [pc, #72]	; (ca50 <enter_bootload+0x124>)
    ca08:	f000 f8b8 	bl	cb7c <debug_printf>
            done = true;
    ca0c:	2301      	movs	r3, #1
    ca0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    ca12:	e006      	b.n	ca22 <enter_bootload+0xf6>
        }else{
            debug_printf("bootload error - unknown command\n");
    ca14:	480f      	ldr	r0, [pc, #60]	; (ca54 <enter_bootload+0x128>)
    ca16:	f000 f8b1 	bl	cb7c <debug_printf>
            retransmit = 1;
    ca1a:	2301      	movs	r3, #1
    ca1c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            continue;
    ca20:	bf00      	nop
    while(!done){
    ca22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ca26:	f083 0301 	eor.w	r3, r3, #1
    ca2a:	b2db      	uxtb	r3, r3
    ca2c:	2b00      	cmp	r3, #0
    ca2e:	d1a4      	bne.n	c97a <enter_bootload+0x4e>
        }
    }

    // finish bootloading
}
    ca30:	bf00      	nop
    ca32:	3730      	adds	r7, #48	; 0x30
    ca34:	46bd      	mov	sp, r7
    ca36:	bd80      	pop	{r7, pc}
    ca38:	0000edec 	.word	0x0000edec
    ca3c:	0000ed24 	.word	0x0000ed24
    ca40:	0000ed38 	.word	0x0000ed38
    ca44:	0000ed54 	.word	0x0000ed54
    ca48:	0000ed70 	.word	0x0000ed70
    ca4c:	0000ed90 	.word	0x0000ed90
    ca50:	0000edac 	.word	0x0000edac
    ca54:	0000edc8 	.word	0x0000edc8

0000ca58 <handle_frame_packet>:
// ****************************************
// 
// Handle a frame packet
// 
// ****************************************
uint8_t handle_frame_packet(svl_packet_t* packet, uint32_t* p_frame_address, uint16_t* p_last_page_erased ){
    ca58:	b580      	push	{r7, lr}
    ca5a:	b088      	sub	sp, #32
    ca5c:	af00      	add	r7, sp, #0
    ca5e:	60f8      	str	r0, [r7, #12]
    ca60:	60b9      	str	r1, [r7, #8]
    ca62:	607a      	str	r2, [r7, #4]

    // debug_printf("\t\thandling frame\n");

    uint32_t num_words = (packet->pl_len / 4);
    ca64:	68fb      	ldr	r3, [r7, #12]
    ca66:	891b      	ldrh	r3, [r3, #8]
    ca68:	089b      	lsrs	r3, r3, #2
    ca6a:	b29b      	uxth	r3, r3
    ca6c:	61fb      	str	r3, [r7, #28]
    int32_t i32ReturnCode = 0;
    ca6e:	2300      	movs	r3, #0
    ca70:	61bb      	str	r3, [r7, #24]

    debug_printf("\t\tframe_address = 0x%08X, num_words = %d\n", *(p_frame_address), num_words);
    ca72:	68bb      	ldr	r3, [r7, #8]
    ca74:	681b      	ldr	r3, [r3, #0]
    ca76:	69fa      	ldr	r2, [r7, #28]
    ca78:	4619      	mov	r1, r3
    ca7a:	482d      	ldr	r0, [pc, #180]	; (cb30 <handle_frame_packet+0xd8>)
    ca7c:	f000 f87e 	bl	cb7c <debug_printf>

    // Check payload length is multiple of words
    if( (packet->pl_len % 4) ){
    ca80:	68fb      	ldr	r3, [r7, #12]
    ca82:	891b      	ldrh	r3, [r3, #8]
    ca84:	f003 0303 	and.w	r3, r3, #3
    ca88:	b29b      	uxth	r3, r3
    ca8a:	2b00      	cmp	r3, #0
    ca8c:	d004      	beq.n	ca98 <handle_frame_packet+0x40>
        debug_printf("Error: frame packet not integer multiple of words (4 bytes per word)\n");
    ca8e:	4829      	ldr	r0, [pc, #164]	; (cb34 <handle_frame_packet+0xdc>)
    ca90:	f000 f874 	bl	cb7c <debug_printf>
        return 1;
    ca94:	2301      	movs	r3, #1
    ca96:	e046      	b.n	cb26 <handle_frame_packet+0xce>
    }

    uint32_t offset_address = (*(p_frame_address) + USERCODE_OFFSET); 
    ca98:	68bb      	ldr	r3, [r7, #8]
    ca9a:	681b      	ldr	r3, [r3, #0]
    ca9c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    caa0:	617b      	str	r3, [r7, #20]
    if ( (*p_last_page_erased) < AM_HAL_FLASH_ADDR2PAGE( offset_address ) ) {     // Prevent erasing partially-filled pages
    caa2:	687b      	ldr	r3, [r7, #4]
    caa4:	881b      	ldrh	r3, [r3, #0]
    caa6:	461a      	mov	r2, r3
    caa8:	697b      	ldr	r3, [r7, #20]
    caaa:	0b5b      	lsrs	r3, r3, #13
    caac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cab0:	429a      	cmp	r2, r3
    cab2:	d21b      	bcs.n	caec <handle_frame_packet+0x94>
        // debug_printf("Erasing instance %d, page %d\n\r", AM_HAL_FLASH_ADDR2INST( offset_address ), AM_HAL_FLASH_ADDR2PAGE(offset_address) );

        //Erase the 8k page for this address
        i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, AM_HAL_FLASH_ADDR2INST( offset_address ), AM_HAL_FLASH_ADDR2PAGE( offset_address ) );
    cab4:	697b      	ldr	r3, [r7, #20]
    cab6:	0cdb      	lsrs	r3, r3, #19
    cab8:	f003 0101 	and.w	r1, r3, #1
    cabc:	697b      	ldr	r3, [r7, #20]
    cabe:	0b5b      	lsrs	r3, r3, #13
    cac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cac4:	461a      	mov	r2, r3
    cac6:	481c      	ldr	r0, [pc, #112]	; (cb38 <handle_frame_packet+0xe0>)
    cac8:	f000 ffba 	bl	da40 <am_hal_flash_page_erase>
    cacc:	61b8      	str	r0, [r7, #24]
        *(p_last_page_erased) = AM_HAL_FLASH_ADDR2PAGE( offset_address );
    cace:	697b      	ldr	r3, [r7, #20]
    cad0:	0b5b      	lsrs	r3, r3, #13
    cad2:	b29b      	uxth	r3, r3
    cad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cad8:	b29a      	uxth	r2, r3
    cada:	687b      	ldr	r3, [r7, #4]
    cadc:	801a      	strh	r2, [r3, #0]

        if (i32ReturnCode)
    cade:	69bb      	ldr	r3, [r7, #24]
    cae0:	2b00      	cmp	r3, #0
    cae2:	d003      	beq.n	caec <handle_frame_packet+0x94>
        {
            debug_printf("FLASH_MASS_ERASE i32ReturnCode = 0x%x.\n\r", i32ReturnCode);
    cae4:	69b9      	ldr	r1, [r7, #24]
    cae6:	4815      	ldr	r0, [pc, #84]	; (cb3c <handle_frame_packet+0xe4>)
    cae8:	f000 f848 	bl	cb7c <debug_printf>
        }
    }

    // //Record the array
    // debug_printf("Recording %d words (%d bytes) to memory\n", num_words, 4*num_words);
    i32ReturnCode = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, (uint32_t*)packet->pl, (uint32_t*)(*(p_frame_address) + USERCODE_OFFSET), num_words);
    caec:	68fb      	ldr	r3, [r7, #12]
    caee:	6859      	ldr	r1, [r3, #4]
    caf0:	68bb      	ldr	r3, [r7, #8]
    caf2:	681b      	ldr	r3, [r3, #0]
    caf4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    caf8:	461a      	mov	r2, r3
    cafa:	69fb      	ldr	r3, [r7, #28]
    cafc:	480e      	ldr	r0, [pc, #56]	; (cb38 <handle_frame_packet+0xe0>)
    cafe:	f000 ffa3 	bl	da48 <am_hal_flash_program_main>
    cb02:	61b8      	str	r0, [r7, #24]
    if (i32ReturnCode){
    cb04:	69bb      	ldr	r3, [r7, #24]
    cb06:	2b00      	cmp	r3, #0
    cb08:	d005      	beq.n	cb16 <handle_frame_packet+0xbe>
        debug_printf("FLASH_WRITE error = 0x%x.\n\r", i32ReturnCode);
    cb0a:	69b9      	ldr	r1, [r7, #24]
    cb0c:	480c      	ldr	r0, [pc, #48]	; (cb40 <handle_frame_packet+0xe8>)
    cb0e:	f000 f835 	bl	cb7c <debug_printf>
        return 1;
    cb12:	2301      	movs	r3, #1
    cb14:	e007      	b.n	cb26 <handle_frame_packet+0xce>
    }

    // debug_printf("Array recorded to flash\n");
    *(p_frame_address) += num_words*4;
    cb16:	68bb      	ldr	r3, [r7, #8]
    cb18:	681a      	ldr	r2, [r3, #0]
    cb1a:	69fb      	ldr	r3, [r7, #28]
    cb1c:	009b      	lsls	r3, r3, #2
    cb1e:	441a      	add	r2, r3
    cb20:	68bb      	ldr	r3, [r7, #8]
    cb22:	601a      	str	r2, [r3, #0]
    return 0;
    cb24:	2300      	movs	r3, #0
}
    cb26:	4618      	mov	r0, r3
    cb28:	3720      	adds	r7, #32
    cb2a:	46bd      	mov	sp, r7
    cb2c:	bd80      	pop	{r7, pc}
    cb2e:	bf00      	nop
    cb30:	0000edf8 	.word	0x0000edf8
    cb34:	0000ee24 	.word	0x0000ee24
    cb38:	12344321 	.word	0x12344321
    cb3c:	0000ee6c 	.word	0x0000ee6c
    cb40:	0000ee98 	.word	0x0000ee98

0000cb44 <app_start>:
// ****************************************
// 
// Jump to the application
// 
// ****************************************
void app_start( void ){
    cb44:	b580      	push	{r7, lr}
    cb46:	b082      	sub	sp, #8
    cb48:	af00      	add	r7, sp, #0
    debug_printf("\n\t-- app start --\n");
    cb4a:	4809      	ldr	r0, [pc, #36]	; (cb70 <app_start+0x2c>)
    cb4c:	f000 f816 	bl	cb7c <debug_printf>
    debug_printf("\n");
#endif // APP_PRINT_PRETTY
#endif // DEBUG_PRINT_APP
#endif // DEBUG

    void* entryPoint = (void *)(*((uint32_t*)(USERCODE_OFFSET + 4)));
    cb50:	4b08      	ldr	r3, [pc, #32]	; (cb74 <app_start+0x30>)
    cb52:	681b      	ldr	r3, [r3, #0]
    cb54:	607b      	str	r3, [r7, #4]
    debug_printf("\nJump to App at 0x%08X\n\n", (uint32_t)entryPoint);
    cb56:	687b      	ldr	r3, [r7, #4]
    cb58:	4619      	mov	r1, r3
    cb5a:	4807      	ldr	r0, [pc, #28]	; (cb78 <app_start+0x34>)
    cb5c:	f000 f80e 	bl	cb7c <debug_printf>
    am_util_delay_ms(10);   // Wait for prints to complete
    cb60:	200a      	movs	r0, #10
    cb62:	f000 f889 	bl	cc78 <am_util_delay_ms>
    goto *entryPoint;       // Jump to start of user code
    cb66:	687b      	ldr	r3, [r7, #4]
    cb68:	f043 0301 	orr.w	r3, r3, #1
    cb6c:	4718      	bx	r3
    cb6e:	bf00      	nop
    cb70:	0000eeb4 	.word	0x0000eeb4
    cb74:	00010004 	.word	0x00010004
    cb78:	0000eec8 	.word	0x0000eec8

0000cb7c <debug_printf>:
// ****************************************
// 
// Debug printf function
// 
// ****************************************
void debug_printf(char* fmt, ...){
    cb7c:	b40f      	push	{r0, r1, r2, r3}
    cb7e:	b480      	push	{r7}
    cb80:	af00      	add	r7, sp, #0
    vsnprintf(debug_buffer, DEBUG_UART_BUF_LEN, (const char*)fmt, args);
    va_end (args);

    svl_uart_print(hUART_debug, debug_buffer);
#endif //DEBUG  
}
    cb82:	bf00      	nop
    cb84:	46bd      	mov	sp, r7
    cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb8a:	b004      	add	sp, #16
    cb8c:	4770      	bx	lr
	...

0000cb90 <am_uart_isr>:
//*****************************************************************************
//
// UART interrupt handlers
//
//*****************************************************************************
void am_uart_isr(void){
    cb90:	b580      	push	{r7, lr}
    cb92:	b084      	sub	sp, #16
    cb94:	af00      	add	r7, sp, #0
    // Service the FIFOs as necessary, and clear the interrupts.
#if BL_UART_INST == 0
    uint32_t ui32Status, ui32Idle;
    am_hal_uart_interrupt_status_get(hUART_bl, &ui32Status, true);
    cb96:	4b18      	ldr	r3, [pc, #96]	; (cbf8 <am_uart_isr+0x68>)
    cb98:	681b      	ldr	r3, [r3, #0]
    cb9a:	f107 010c 	add.w	r1, r7, #12
    cb9e:	2201      	movs	r2, #1
    cba0:	4618      	mov	r0, r3
    cba2:	f001 ff25 	bl	e9f0 <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(hUART_bl, ui32Status);
    cba6:	4b14      	ldr	r3, [pc, #80]	; (cbf8 <am_uart_isr+0x68>)
    cba8:	681b      	ldr	r3, [r3, #0]
    cbaa:	68fa      	ldr	r2, [r7, #12]
    cbac:	4611      	mov	r1, r2
    cbae:	4618      	mov	r0, r3
    cbb0:	f001 ff0c 	bl	e9cc <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_service(hUART_bl, ui32Status, &ui32Idle);
    cbb4:	4b10      	ldr	r3, [pc, #64]	; (cbf8 <am_uart_isr+0x68>)
    cbb6:	681b      	ldr	r3, [r3, #0]
    cbb8:	68f9      	ldr	r1, [r7, #12]
    cbba:	f107 0208 	add.w	r2, r7, #8
    cbbe:	4618      	mov	r0, r3
    cbc0:	f001 fe62 	bl	e888 <am_hal_uart_interrupt_service>
    if (ui32Status & AM_HAL_UART_INT_RX)
    cbc4:	68fb      	ldr	r3, [r7, #12]
    cbc6:	f003 0310 	and.w	r3, r3, #16
    cbca:	2b00      	cmp	r3, #0
    cbcc:	d010      	beq.n	cbf0 <am_uart_isr+0x60>
    {
        uint8_t c = 0x00;
    cbce:	2300      	movs	r3, #0
    cbd0:	71fb      	strb	r3, [r7, #7]
        if ( svl_uart_read( hUART_bl, (char*)&c, 1) != 0 ){
    cbd2:	4b09      	ldr	r3, [pc, #36]	; (cbf8 <am_uart_isr+0x68>)
    cbd4:	681b      	ldr	r3, [r3, #0]
    cbd6:	1df9      	adds	r1, r7, #7
    cbd8:	2201      	movs	r2, #1
    cbda:	4618      	mov	r0, r3
    cbdc:	f000 fc86 	bl	d4ec <svl_uart_read>
    cbe0:	4603      	mov	r3, r0
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	d004      	beq.n	cbf0 <am_uart_isr+0x60>
            art_svl_ringbuf_write( &bl_rx_ringbuf, c );
    cbe6:	79fb      	ldrb	r3, [r7, #7]
    cbe8:	4619      	mov	r1, r3
    cbea:	4804      	ldr	r0, [pc, #16]	; (cbfc <am_uart_isr+0x6c>)
    cbec:	f000 f9b9 	bl	cf62 <art_svl_ringbuf_write>
    am_hal_uart_interrupt_status_get(hUART_debug, &ui32Status, true);
    am_hal_uart_interrupt_clear(hUART_debug, ui32Status);
    am_hal_uart_interrupt_service(hUART_debug, ui32Status, &ui32Idle);
#endif // DEBUG
#endif // BL_UART_INST == 0
}
    cbf0:	bf00      	nop
    cbf2:	3710      	adds	r7, #16
    cbf4:	46bd      	mov	sp, r7
    cbf6:	bd80      	pop	{r7, pc}
    cbf8:	10001020 	.word	0x10001020
    cbfc:	10001010 	.word	0x10001010

0000cc00 <am_uart1_isr>:

void am_uart1_isr(void){
    cc00:	b480      	push	{r7}
    cc02:	af00      	add	r7, sp, #0
    am_hal_uart_interrupt_status_get(hUART_debug, &ui32Status, true);
    am_hal_uart_interrupt_clear(hUART_debug, ui32Status);
    am_hal_uart_interrupt_service(hUART_debug, ui32Status, &ui32Idle);
#endif // DEBUG
#endif // BL_UART_INST == 0
}
    cc04:	bf00      	nop
    cc06:	46bd      	mov	sp, r7
    cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc0c:	4770      	bx	lr
	...

0000cc10 <am_gpio_isr>:
//*****************************************************************************
//
// GPIO interrupt handler
//
//*****************************************************************************
void am_gpio_isr( void ){
    cc10:	b580      	push	{r7, lr}
    cc12:	af00      	add	r7, sp, #0
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(BL_RX_PAD));
    cc14:	f04f 0000 	mov.w	r0, #0
    cc18:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cc1c:	f001 f918 	bl	de50 <am_hal_gpio_interrupt_clear>
    if( bl_baud_ticks_index < BL_BAUD_SAMPLES ){
    cc20:	4b0a      	ldr	r3, [pc, #40]	; (cc4c <am_gpio_isr+0x3c>)
    cc22:	781b      	ldrb	r3, [r3, #0]
    cc24:	b2db      	uxtb	r3, r3
    cc26:	2b04      	cmp	r3, #4
    cc28:	d80d      	bhi.n	cc46 <am_gpio_isr+0x36>
        bl_baud_ticks[bl_baud_ticks_index++] = CTIMER->STTMR;
    cc2a:	4a09      	ldr	r2, [pc, #36]	; (cc50 <am_gpio_isr+0x40>)
    cc2c:	4b07      	ldr	r3, [pc, #28]	; (cc4c <am_gpio_isr+0x3c>)
    cc2e:	781b      	ldrb	r3, [r3, #0]
    cc30:	b2db      	uxtb	r3, r3
    cc32:	1c59      	adds	r1, r3, #1
    cc34:	b2c8      	uxtb	r0, r1
    cc36:	4905      	ldr	r1, [pc, #20]	; (cc4c <am_gpio_isr+0x3c>)
    cc38:	7008      	strb	r0, [r1, #0]
    cc3a:	4619      	mov	r1, r3
    cc3c:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
    cc40:	4a04      	ldr	r2, [pc, #16]	; (cc54 <am_gpio_isr+0x44>)
    cc42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
}
    cc46:	bf00      	nop
    cc48:	bd80      	pop	{r7, pc}
    cc4a:	bf00      	nop
    cc4c:	10001024 	.word	0x10001024
    cc50:	40008000 	.word	0x40008000
    cc54:	10001028 	.word	0x10001028

0000cc58 <am_stimer_isr>:
//
// STimer interrupt handler
//
//*****************************************************************************
void am_stimer_isr(void)
{
    cc58:	b580      	push	{r7, lr}
    cc5a:	af00      	add	r7, sp, #0
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_OVERFLOW);
    cc5c:	f44f 7080 	mov.w	r0, #256	; 0x100
    cc60:	f001 f9dc 	bl	e01c <am_hal_stimer_int_clear>
    ap3_stimer_overflows += 1;
    cc64:	4b03      	ldr	r3, [pc, #12]	; (cc74 <am_stimer_isr+0x1c>)
    cc66:	681b      	ldr	r3, [r3, #0]
    cc68:	3301      	adds	r3, #1
    cc6a:	4a02      	ldr	r2, [pc, #8]	; (cc74 <am_stimer_isr+0x1c>)
    cc6c:	6013      	str	r3, [r2, #0]
    // At the fastest rate (3MHz) the 64 bits of the stimer
    // along with this overflow counter can keep track of
    // the time for ~ 195,000 years without wrapping to 0
    cc6e:	bf00      	nop
    cc70:	bd80      	pop	{r7, pc}
    cc72:	bf00      	nop
    cc74:	10001858 	.word	0x10001858

0000cc78 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    cc78:	b580      	push	{r7, lr}
    cc7a:	b088      	sub	sp, #32
    cc7c:	af00      	add	r7, sp, #0
    cc7e:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cc80:	f107 030c 	add.w	r3, r7, #12
    cc84:	4618      	mov	r0, r3
    cc86:	f000 febd 	bl	da04 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    cc8a:	68fb      	ldr	r3, [r7, #12]
    cc8c:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    cc8e:	69fb      	ldr	r3, [r7, #28]
    cc90:	4a07      	ldr	r2, [pc, #28]	; (ccb0 <am_util_delay_ms+0x38>)
    cc92:	fba2 2303 	umull	r2, r3, r2, r3
    cc96:	099a      	lsrs	r2, r3, #6
    cc98:	687b      	ldr	r3, [r7, #4]
    cc9a:	fb02 f303 	mul.w	r3, r2, r3
    cc9e:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cca0:	69b8      	ldr	r0, [r7, #24]
    cca2:	f000 feff 	bl	daa4 <am_hal_flash_delay>
}
    cca6:	bf00      	nop
    cca8:	3720      	adds	r7, #32
    ccaa:	46bd      	mov	sp, r7
    ccac:	bd80      	pop	{r7, pc}
    ccae:	bf00      	nop
    ccb0:	057619f1 	.word	0x057619f1

0000ccb4 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
    ccb4:	b580      	push	{r7, lr}
    ccb6:	b088      	sub	sp, #32
    ccb8:	af00      	add	r7, sp, #0
    ccba:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ccbc:	f107 030c 	add.w	r3, r7, #12
    ccc0:	4618      	mov	r0, r3
    ccc2:	f000 fe9f 	bl	da04 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    ccc6:	68fb      	ldr	r3, [r7, #12]
    ccc8:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
    ccca:	69fb      	ldr	r3, [r7, #28]
    cccc:	4a07      	ldr	r2, [pc, #28]	; (ccec <am_util_delay_us+0x38>)
    ccce:	fba2 2303 	umull	r2, r3, r2, r3
    ccd2:	0c9a      	lsrs	r2, r3, #18
    ccd4:	687b      	ldr	r3, [r7, #4]
    ccd6:	fb02 f303 	mul.w	r3, r2, r3
    ccda:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    ccdc:	69b8      	ldr	r0, [r7, #24]
    ccde:	f000 fee1 	bl	daa4 <am_hal_flash_delay>
}
    cce2:	bf00      	nop
    cce4:	3720      	adds	r7, #32
    cce6:	46bd      	mov	sp, r7
    cce8:	bd80      	pop	{r7, pc}
    ccea:	bf00      	nop
    ccec:	165e9f81 	.word	0x165e9f81

0000ccf0 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    ccf0:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    ccf2:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    ccf6:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    ccf8:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    ccfc:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    cd00:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    cd04:	f000 f80a 	bl	cd1c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    cd08:	bd01      	pop	{r0, pc}
}
    cd0a:	bf00      	nop
    cd0c:	4618      	mov	r0, r3

0000cd0e <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    cd0e:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    cd10:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    cd12:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    cd14:	4770      	bx	lr
}
    cd16:	bf00      	nop
    cd18:	4618      	mov	r0, r3
	...

0000cd1c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    cd1c:	b580      	push	{r7, lr}
    cd1e:	b096      	sub	sp, #88	; 0x58
    cd20:	af00      	add	r7, sp, #0
    cd22:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    cd24:	f107 030c 	add.w	r3, r7, #12
    cd28:	2200      	movs	r2, #0
    cd2a:	601a      	str	r2, [r3, #0]
    cd2c:	605a      	str	r2, [r3, #4]
    cd2e:	609a      	str	r2, [r3, #8]
    cd30:	60da      	str	r2, [r3, #12]
    cd32:	611a      	str	r2, [r3, #16]
    cd34:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    cd36:	2300      	movs	r3, #0
    cd38:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    cd3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cd3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    cd3e:	4b2e      	ldr	r3, [pc, #184]	; (cdf8 <am_util_faultisr_collect_data+0xdc>)
    cd40:	681b      	ldr	r3, [r3, #0]
    cd42:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    cd44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cd46:	b2db      	uxtb	r3, r3
    cd48:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    cd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cd4e:	0a1b      	lsrs	r3, r3, #8
    cd50:	b2db      	uxtb	r3, r3
    cd52:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    cd56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cd58:	0c1b      	lsrs	r3, r3, #16
    cd5a:	b29b      	uxth	r3, r3
    cd5c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    cd60:	4b26      	ldr	r3, [pc, #152]	; (cdfc <am_util_faultisr_collect_data+0xe0>)
    cd62:	681b      	ldr	r3, [r3, #0]
    cd64:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cd66:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    cd6a:	b2db      	uxtb	r3, r3
    cd6c:	f003 0302 	and.w	r3, r3, #2
    cd70:	2b00      	cmp	r3, #0
    cd72:	d005      	beq.n	cd80 <am_util_faultisr_collect_data+0x64>
    cd74:	6879      	ldr	r1, [r7, #4]
    cd76:	2006      	movs	r0, #6
    cd78:	f7ff ffc9 	bl	cd0e <getStackedReg>
    cd7c:	4603      	mov	r3, r0
    cd7e:	e001      	b.n	cd84 <am_util_faultisr_collect_data+0x68>
    cd80:	f04f 33ff 	mov.w	r3, #4294967295
    cd84:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cd86:	6879      	ldr	r1, [r7, #4]
    cd88:	2000      	movs	r0, #0
    cd8a:	f7ff ffc0 	bl	cd0e <getStackedReg>
    cd8e:	4603      	mov	r3, r0
    cd90:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cd92:	6879      	ldr	r1, [r7, #4]
    cd94:	2001      	movs	r0, #1
    cd96:	f7ff ffba 	bl	cd0e <getStackedReg>
    cd9a:	4603      	mov	r3, r0
    cd9c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    cd9e:	6879      	ldr	r1, [r7, #4]
    cda0:	2002      	movs	r0, #2
    cda2:	f7ff ffb4 	bl	cd0e <getStackedReg>
    cda6:	4603      	mov	r3, r0
    cda8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    cdaa:	6879      	ldr	r1, [r7, #4]
    cdac:	2003      	movs	r0, #3
    cdae:	f7ff ffae 	bl	cd0e <getStackedReg>
    cdb2:	4603      	mov	r3, r0
    cdb4:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    cdb6:	6879      	ldr	r1, [r7, #4]
    cdb8:	2004      	movs	r0, #4
    cdba:	f7ff ffa8 	bl	cd0e <getStackedReg>
    cdbe:	4603      	mov	r3, r0
    cdc0:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    cdc2:	6879      	ldr	r1, [r7, #4]
    cdc4:	2005      	movs	r0, #5
    cdc6:	f7ff ffa2 	bl	cd0e <getStackedReg>
    cdca:	4603      	mov	r3, r0
    cdcc:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    cdce:	6879      	ldr	r1, [r7, #4]
    cdd0:	2006      	movs	r0, #6
    cdd2:	f7ff ff9c 	bl	cd0e <getStackedReg>
    cdd6:	4603      	mov	r3, r0
    cdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    cdda:	6879      	ldr	r1, [r7, #4]
    cddc:	2007      	movs	r0, #7
    cdde:	f7ff ff96 	bl	cd0e <getStackedReg>
    cde2:	4603      	mov	r3, r0
    cde4:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    cde6:	f107 030c 	add.w	r3, r7, #12
    cdea:	4619      	mov	r1, r3
    cdec:	2002      	movs	r0, #2
    cdee:	f001 f859 	bl	dea4 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    cdf2:	2300      	movs	r3, #0
    cdf4:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    cdf6:	e7fe      	b.n	cdf6 <am_util_faultisr_collect_data+0xda>
    cdf8:	e000ed28 	.word	0xe000ed28
    cdfc:	e000ed38 	.word	0xe000ed38

0000ce00 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    ce00:	4811      	ldr	r0, [pc, #68]	; (ce48 <zero_loop+0x12>)
    ce02:	4912      	ldr	r1, [pc, #72]	; (ce4c <zero_loop+0x16>)
    ce04:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    ce06:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    ce0a:	4811      	ldr	r0, [pc, #68]	; (ce50 <zero_loop+0x1a>)
    ce0c:	6801      	ldr	r1, [r0, #0]
    ce0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ce12:	6001      	str	r1, [r0, #0]
    ce14:	f3bf 8f4f 	dsb	sy
    ce18:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    ce1c:	480d      	ldr	r0, [pc, #52]	; (ce54 <zero_loop+0x1e>)
    ce1e:	490e      	ldr	r1, [pc, #56]	; (ce58 <zero_loop+0x22>)
    ce20:	4a0e      	ldr	r2, [pc, #56]	; (ce5c <zero_loop+0x26>)

0000ce22 <copy_loop>:
    ce22:	f850 3b04 	ldr.w	r3, [r0], #4
    ce26:	f841 3b04 	str.w	r3, [r1], #4
    ce2a:	4291      	cmp	r1, r2
    ce2c:	dbf9      	blt.n	ce22 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    ce2e:	480c      	ldr	r0, [pc, #48]	; (ce60 <zero_loop+0x2a>)
    ce30:	490c      	ldr	r1, [pc, #48]	; (ce64 <zero_loop+0x2e>)
    ce32:	f04f 0200 	mov.w	r2, #0

0000ce36 <zero_loop>:
    ce36:	4288      	cmp	r0, r1
    ce38:	bfb8      	it	lt
    ce3a:	f840 2b04 	strlt.w	r2, [r0], #4
    ce3e:	dbfa      	blt.n	ce36 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    ce40:	f7ff fb20 	bl	c484 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    ce44:	be00      	bkpt	0x0000
}
    ce46:	bf00      	nop
    ce48:	e000ed08 	.word	0xe000ed08
    ce4c:	0000c000 	.word	0x0000c000
    ce50:	e000ed88 	.word	0xe000ed88
    ce54:	0000f190 	.word	0x0000f190
    ce58:	10001000 	.word	0x10001000
    ce5c:	1000100c 	.word	0x1000100c
    ce60:	10001010 	.word	0x10001010
    ce64:	1000193c 	.word	0x1000193c

0000ce68 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    ce68:	b480      	push	{r7}
    ce6a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ce6c:	e7fe      	b.n	ce6c <NMI_Handler+0x4>

0000ce6e <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    ce6e:	b480      	push	{r7}
    ce70:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ce72:	e7fe      	b.n	ce72 <DebugMon_Handler+0x4>

0000ce74 <art_svl_ringbuf_init>:
#include "svl_ringbuf.h"

size_t art_svl_ringbuf_init( void* vrb, uint8_t* buf, size_t len ){
    ce74:	b480      	push	{r7}
    ce76:	b087      	sub	sp, #28
    ce78:	af00      	add	r7, sp, #0
    ce7a:	60f8      	str	r0, [r7, #12]
    ce7c:	60b9      	str	r1, [r7, #8]
    ce7e:	607a      	str	r2, [r7, #4]
    if( vrb == NULL ){ return 0; }
    ce80:	68fb      	ldr	r3, [r7, #12]
    ce82:	2b00      	cmp	r3, #0
    ce84:	d101      	bne.n	ce8a <art_svl_ringbuf_init+0x16>
    ce86:	2300      	movs	r3, #0
    ce88:	e00f      	b.n	ceaa <art_svl_ringbuf_init+0x36>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    ce8a:	68fb      	ldr	r3, [r7, #12]
    ce8c:	617b      	str	r3, [r7, #20]
    
    rb->buf = buf;
    ce8e:	697b      	ldr	r3, [r7, #20]
    ce90:	68ba      	ldr	r2, [r7, #8]
    ce92:	601a      	str	r2, [r3, #0]
    rb->len = len;
    ce94:	697b      	ldr	r3, [r7, #20]
    ce96:	687a      	ldr	r2, [r7, #4]
    ce98:	605a      	str	r2, [r3, #4]
    rb->r_offset = 0;
    ce9a:	697b      	ldr	r3, [r7, #20]
    ce9c:	2200      	movs	r2, #0
    ce9e:	609a      	str	r2, [r3, #8]
    rb->w_offset = 0;
    cea0:	697b      	ldr	r3, [r7, #20]
    cea2:	2200      	movs	r2, #0
    cea4:	60da      	str	r2, [r3, #12]

    return rb->len;
    cea6:	697b      	ldr	r3, [r7, #20]
    cea8:	685b      	ldr	r3, [r3, #4]
}
    ceaa:	4618      	mov	r0, r3
    ceac:	371c      	adds	r7, #28
    ceae:	46bd      	mov	sp, r7
    ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    ceb4:	4770      	bx	lr

0000ceb6 <art_svl_ringbuf_available>:

size_t art_svl_ringbuf_available( void* vrb ){
    ceb6:	b480      	push	{r7}
    ceb8:	b085      	sub	sp, #20
    ceba:	af00      	add	r7, sp, #0
    cebc:	6078      	str	r0, [r7, #4]
    if( vrb == NULL ){ return 0; }
    cebe:	687b      	ldr	r3, [r7, #4]
    cec0:	2b00      	cmp	r3, #0
    cec2:	d101      	bne.n	cec8 <art_svl_ringbuf_available+0x12>
    cec4:	2300      	movs	r3, #0
    cec6:	e01a      	b.n	cefe <art_svl_ringbuf_available+0x48>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    cec8:	687b      	ldr	r3, [r7, #4]
    ceca:	60bb      	str	r3, [r7, #8]

    size_t avail = 0x00;
    cecc:	2300      	movs	r3, #0
    cece:	60fb      	str	r3, [r7, #12]
    if((rb->w_offset) >= (rb->r_offset)){
    ced0:	68bb      	ldr	r3, [r7, #8]
    ced2:	68da      	ldr	r2, [r3, #12]
    ced4:	68bb      	ldr	r3, [r7, #8]
    ced6:	689b      	ldr	r3, [r3, #8]
    ced8:	429a      	cmp	r2, r3
    ceda:	d306      	bcc.n	ceea <art_svl_ringbuf_available+0x34>
        avail = rb->w_offset - rb->r_offset;
    cedc:	68bb      	ldr	r3, [r7, #8]
    cede:	68da      	ldr	r2, [r3, #12]
    cee0:	68bb      	ldr	r3, [r7, #8]
    cee2:	689b      	ldr	r3, [r3, #8]
    cee4:	1ad3      	subs	r3, r2, r3
    cee6:	60fb      	str	r3, [r7, #12]
    cee8:	e008      	b.n	cefc <art_svl_ringbuf_available+0x46>
    }else{
        avail = rb->len - (rb->r_offset - rb->w_offset);
    ceea:	68bb      	ldr	r3, [r7, #8]
    ceec:	685a      	ldr	r2, [r3, #4]
    ceee:	68bb      	ldr	r3, [r7, #8]
    cef0:	68d9      	ldr	r1, [r3, #12]
    cef2:	68bb      	ldr	r3, [r7, #8]
    cef4:	689b      	ldr	r3, [r3, #8]
    cef6:	1acb      	subs	r3, r1, r3
    cef8:	4413      	add	r3, r2
    cefa:	60fb      	str	r3, [r7, #12]
    }
    return avail;
    cefc:	68fb      	ldr	r3, [r7, #12]
}
    cefe:	4618      	mov	r0, r3
    cf00:	3714      	adds	r7, #20
    cf02:	46bd      	mov	sp, r7
    cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf08:	4770      	bx	lr

0000cf0a <art_svl_ringbuf_bytes_free>:

size_t art_svl_ringbuf_bytes_free( void* vrb ){
    cf0a:	b480      	push	{r7}
    cf0c:	b085      	sub	sp, #20
    cf0e:	af00      	add	r7, sp, #0
    cf10:	6078      	str	r0, [r7, #4]
    if( vrb == NULL ){ return 0; }
    cf12:	687b      	ldr	r3, [r7, #4]
    cf14:	2b00      	cmp	r3, #0
    cf16:	d101      	bne.n	cf1c <art_svl_ringbuf_bytes_free+0x12>
    cf18:	2300      	movs	r3, #0
    cf1a:	e01c      	b.n	cf56 <art_svl_ringbuf_bytes_free+0x4c>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    cf1c:	687b      	ldr	r3, [r7, #4]
    cf1e:	60bb      	str	r3, [r7, #8]

    size_t friegh = 0x00;
    cf20:	2300      	movs	r3, #0
    cf22:	60fb      	str	r3, [r7, #12]
    if((rb->w_offset) >= (rb->r_offset)){
    cf24:	68bb      	ldr	r3, [r7, #8]
    cf26:	68da      	ldr	r2, [r3, #12]
    cf28:	68bb      	ldr	r3, [r7, #8]
    cf2a:	689b      	ldr	r3, [r3, #8]
    cf2c:	429a      	cmp	r2, r3
    cf2e:	d30a      	bcc.n	cf46 <art_svl_ringbuf_bytes_free+0x3c>
        friegh = rb->len - rb->w_offset + rb->r_offset -1;
    cf30:	68bb      	ldr	r3, [r7, #8]
    cf32:	685a      	ldr	r2, [r3, #4]
    cf34:	68bb      	ldr	r3, [r7, #8]
    cf36:	68db      	ldr	r3, [r3, #12]
    cf38:	1ad2      	subs	r2, r2, r3
    cf3a:	68bb      	ldr	r3, [r7, #8]
    cf3c:	689b      	ldr	r3, [r3, #8]
    cf3e:	4413      	add	r3, r2
    cf40:	3b01      	subs	r3, #1
    cf42:	60fb      	str	r3, [r7, #12]
    cf44:	e006      	b.n	cf54 <art_svl_ringbuf_bytes_free+0x4a>
    }else{
        friegh = rb->r_offset - rb->w_offset - 1;
    cf46:	68bb      	ldr	r3, [r7, #8]
    cf48:	689a      	ldr	r2, [r3, #8]
    cf4a:	68bb      	ldr	r3, [r7, #8]
    cf4c:	68db      	ldr	r3, [r3, #12]
    cf4e:	1ad3      	subs	r3, r2, r3
    cf50:	3b01      	subs	r3, #1
    cf52:	60fb      	str	r3, [r7, #12]
    }
    return friegh;
    cf54:	68fb      	ldr	r3, [r7, #12]
}
    cf56:	4618      	mov	r0, r3
    cf58:	3714      	adds	r7, #20
    cf5a:	46bd      	mov	sp, r7
    cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf60:	4770      	bx	lr

0000cf62 <art_svl_ringbuf_write>:

size_t art_svl_ringbuf_write( void* vrb, uint8_t c ){
    cf62:	b580      	push	{r7, lr}
    cf64:	b084      	sub	sp, #16
    cf66:	af00      	add	r7, sp, #0
    cf68:	6078      	str	r0, [r7, #4]
    cf6a:	460b      	mov	r3, r1
    cf6c:	70fb      	strb	r3, [r7, #3]
    if( vrb == NULL ){ return 0; }
    cf6e:	687b      	ldr	r3, [r7, #4]
    cf70:	2b00      	cmp	r3, #0
    cf72:	d101      	bne.n	cf78 <art_svl_ringbuf_write+0x16>
    cf74:	2300      	movs	r3, #0
    cf76:	e01f      	b.n	cfb8 <art_svl_ringbuf_write+0x56>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    cf78:	687b      	ldr	r3, [r7, #4]
    cf7a:	60fb      	str	r3, [r7, #12]

    if(art_svl_ringbuf_bytes_free(rb) > 0){
    cf7c:	68f8      	ldr	r0, [r7, #12]
    cf7e:	f7ff ffc4 	bl	cf0a <art_svl_ringbuf_bytes_free>
    cf82:	4603      	mov	r3, r0
    cf84:	2b00      	cmp	r3, #0
    cf86:	d016      	beq.n	cfb6 <art_svl_ringbuf_write+0x54>
        *(rb->buf + rb->w_offset) = c;
    cf88:	68fb      	ldr	r3, [r7, #12]
    cf8a:	681a      	ldr	r2, [r3, #0]
    cf8c:	68fb      	ldr	r3, [r7, #12]
    cf8e:	68db      	ldr	r3, [r3, #12]
    cf90:	4413      	add	r3, r2
    cf92:	78fa      	ldrb	r2, [r7, #3]
    cf94:	701a      	strb	r2, [r3, #0]
        rb->w_offset++;
    cf96:	68fb      	ldr	r3, [r7, #12]
    cf98:	68db      	ldr	r3, [r3, #12]
    cf9a:	1c5a      	adds	r2, r3, #1
    cf9c:	68fb      	ldr	r3, [r7, #12]
    cf9e:	60da      	str	r2, [r3, #12]
        if(rb->w_offset >= rb->len){
    cfa0:	68fb      	ldr	r3, [r7, #12]
    cfa2:	68da      	ldr	r2, [r3, #12]
    cfa4:	68fb      	ldr	r3, [r7, #12]
    cfa6:	685b      	ldr	r3, [r3, #4]
    cfa8:	429a      	cmp	r2, r3
    cfaa:	d302      	bcc.n	cfb2 <art_svl_ringbuf_write+0x50>
            rb->w_offset = 0;
    cfac:	68fb      	ldr	r3, [r7, #12]
    cfae:	2200      	movs	r2, #0
    cfb0:	60da      	str	r2, [r3, #12]
        }
        return 1;
    cfb2:	2301      	movs	r3, #1
    cfb4:	e000      	b.n	cfb8 <art_svl_ringbuf_write+0x56>
    }
    return 0;
    cfb6:	2300      	movs	r3, #0
}
    cfb8:	4618      	mov	r0, r3
    cfba:	3710      	adds	r7, #16
    cfbc:	46bd      	mov	sp, r7
    cfbe:	bd80      	pop	{r7, pc}

0000cfc0 <art_svl_ringbuf_read>:

size_t art_svl_ringbuf_read( void* vrb, uint8_t* c ){
    cfc0:	b580      	push	{r7, lr}
    cfc2:	b084      	sub	sp, #16
    cfc4:	af00      	add	r7, sp, #0
    cfc6:	6078      	str	r0, [r7, #4]
    cfc8:	6039      	str	r1, [r7, #0]
    if( vrb == NULL ){ return 0; }
    cfca:	687b      	ldr	r3, [r7, #4]
    cfcc:	2b00      	cmp	r3, #0
    cfce:	d101      	bne.n	cfd4 <art_svl_ringbuf_read+0x14>
    cfd0:	2300      	movs	r3, #0
    cfd2:	e020      	b.n	d016 <art_svl_ringbuf_read+0x56>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    cfd4:	687b      	ldr	r3, [r7, #4]
    cfd6:	60fb      	str	r3, [r7, #12]
    
    if(art_svl_ringbuf_available(rb) > 0){
    cfd8:	68f8      	ldr	r0, [r7, #12]
    cfda:	f7ff ff6c 	bl	ceb6 <art_svl_ringbuf_available>
    cfde:	4603      	mov	r3, r0
    cfe0:	2b00      	cmp	r3, #0
    cfe2:	d017      	beq.n	d014 <art_svl_ringbuf_read+0x54>
        *c = *(rb->buf + rb->r_offset);
    cfe4:	68fb      	ldr	r3, [r7, #12]
    cfe6:	681a      	ldr	r2, [r3, #0]
    cfe8:	68fb      	ldr	r3, [r7, #12]
    cfea:	689b      	ldr	r3, [r3, #8]
    cfec:	4413      	add	r3, r2
    cfee:	781a      	ldrb	r2, [r3, #0]
    cff0:	683b      	ldr	r3, [r7, #0]
    cff2:	701a      	strb	r2, [r3, #0]
        rb->r_offset++;
    cff4:	68fb      	ldr	r3, [r7, #12]
    cff6:	689b      	ldr	r3, [r3, #8]
    cff8:	1c5a      	adds	r2, r3, #1
    cffa:	68fb      	ldr	r3, [r7, #12]
    cffc:	609a      	str	r2, [r3, #8]
        if(rb->r_offset >= rb->len){
    cffe:	68fb      	ldr	r3, [r7, #12]
    d000:	689a      	ldr	r2, [r3, #8]
    d002:	68fb      	ldr	r3, [r7, #12]
    d004:	685b      	ldr	r3, [r3, #4]
    d006:	429a      	cmp	r2, r3
    d008:	d302      	bcc.n	d010 <art_svl_ringbuf_read+0x50>
            rb->r_offset = 0;
    d00a:	68fb      	ldr	r3, [r7, #12]
    d00c:	2200      	movs	r2, #0
    d00e:	609a      	str	r2, [r3, #8]
        }
        return 1;
    d010:	2301      	movs	r3, #1
    d012:	e000      	b.n	d016 <art_svl_ringbuf_read+0x56>
    }
    return 0;
    d014:	2300      	movs	r3, #0
    d016:	4618      	mov	r0, r3
    d018:	3710      	adds	r7, #16
    d01a:	46bd      	mov	sp, r7
    d01c:	bd80      	pop	{r7, pc}
	...

0000d020 <svl_packet_link_read_fn>:
	size_t retval = 0x00;
	if(millis_fn != NULL){ retval = millis_fn(); }
	return retval;
}

void   	svl_packet_link_read_fn		(svl_packet_read_byte_fn_t fn, void* param){
    d020:	b480      	push	{r7}
    d022:	b083      	sub	sp, #12
    d024:	af00      	add	r7, sp, #0
    d026:	6078      	str	r0, [r7, #4]
    d028:	6039      	str	r1, [r7, #0]
	read_param = param;
    d02a:	4a06      	ldr	r2, [pc, #24]	; (d044 <svl_packet_link_read_fn+0x24>)
    d02c:	683b      	ldr	r3, [r7, #0]
    d02e:	6013      	str	r3, [r2, #0]
	read_fn = fn;
    d030:	4a05      	ldr	r2, [pc, #20]	; (d048 <svl_packet_link_read_fn+0x28>)
    d032:	687b      	ldr	r3, [r7, #4]
    d034:	6013      	str	r3, [r2, #0]
}
    d036:	bf00      	nop
    d038:	370c      	adds	r7, #12
    d03a:	46bd      	mov	sp, r7
    d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d040:	4770      	bx	lr
    d042:	bf00      	nop
    d044:	1000183c 	.word	0x1000183c
    d048:	10001848 	.word	0x10001848

0000d04c <svl_packet_link_write_fn>:

void  	svl_packet_link_write_fn	(svl_packet_write_byte_fn_t fn, void* param){
    d04c:	b480      	push	{r7}
    d04e:	b083      	sub	sp, #12
    d050:	af00      	add	r7, sp, #0
    d052:	6078      	str	r0, [r7, #4]
    d054:	6039      	str	r1, [r7, #0]
	write_param = param;
    d056:	4a06      	ldr	r2, [pc, #24]	; (d070 <svl_packet_link_write_fn+0x24>)
    d058:	683b      	ldr	r3, [r7, #0]
    d05a:	6013      	str	r3, [r2, #0]
	write_fn = fn;
    d05c:	4a05      	ldr	r2, [pc, #20]	; (d074 <svl_packet_link_write_fn+0x28>)
    d05e:	687b      	ldr	r3, [r7, #4]
    d060:	6013      	str	r3, [r2, #0]
}
    d062:	bf00      	nop
    d064:	370c      	adds	r7, #12
    d066:	46bd      	mov	sp, r7
    d068:	f85d 7b04 	ldr.w	r7, [sp], #4
    d06c:	4770      	bx	lr
    d06e:	bf00      	nop
    d070:	10001840 	.word	0x10001840
    d074:	1000184c 	.word	0x1000184c

0000d078 <svl_packet_link_avail_fn>:

void   	svl_packet_link_avail_fn	(svl_packet_avail_bytes_fn_t fn, void* param){
    d078:	b480      	push	{r7}
    d07a:	b083      	sub	sp, #12
    d07c:	af00      	add	r7, sp, #0
    d07e:	6078      	str	r0, [r7, #4]
    d080:	6039      	str	r1, [r7, #0]
	avail_param = param;
    d082:	4a06      	ldr	r2, [pc, #24]	; (d09c <svl_packet_link_avail_fn+0x24>)
    d084:	683b      	ldr	r3, [r7, #0]
    d086:	6013      	str	r3, [r2, #0]
	avail_fn = fn;
    d088:	4a05      	ldr	r2, [pc, #20]	; (d0a0 <svl_packet_link_avail_fn+0x28>)
    d08a:	687b      	ldr	r3, [r7, #4]
    d08c:	6013      	str	r3, [r2, #0]
}
    d08e:	bf00      	nop
    d090:	370c      	adds	r7, #12
    d092:	46bd      	mov	sp, r7
    d094:	f85d 7b04 	ldr.w	r7, [sp], #4
    d098:	4770      	bx	lr
    d09a:	bf00      	nop
    d09c:	10001844 	.word	0x10001844
    d0a0:	10001850 	.word	0x10001850

0000d0a4 <svl_packet_link_millis_fn>:

void	svl_packet_link_millis_fn	( svl_packet_millis_fn_t fn ){
    d0a4:	b480      	push	{r7}
    d0a6:	b083      	sub	sp, #12
    d0a8:	af00      	add	r7, sp, #0
    d0aa:	6078      	str	r0, [r7, #4]
	millis_fn = fn;
    d0ac:	4a04      	ldr	r2, [pc, #16]	; (d0c0 <svl_packet_link_millis_fn+0x1c>)
    d0ae:	687b      	ldr	r3, [r7, #4]
    d0b0:	6013      	str	r3, [r2, #0]
}
    d0b2:	bf00      	nop
    d0b4:	370c      	adds	r7, #12
    d0b6:	46bd      	mov	sp, r7
    d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0bc:	4770      	bx	lr
    d0be:	bf00      	nop
    d0c0:	10001854 	.word	0x10001854

0000d0c4 <svl_packet_send>:




void svl_packet_send(svl_packet_t* packet ){
    d0c4:	b580      	push	{r7, lr}
    d0c6:	b090      	sub	sp, #64	; 0x40
    d0c8:	af00      	add	r7, sp, #0
    d0ca:	6078      	str	r0, [r7, #4]
	uint16_t crc = svl_packet_get_crc16(packet);
    d0cc:	6878      	ldr	r0, [r7, #4]
    d0ce:	f000 f9ab 	bl	d428 <svl_packet_get_crc16>
    d0d2:	4603      	mov	r3, r0
    d0d4:	87bb      	strh	r3, [r7, #60]	; 0x3c

	svl_packet_write_byte( ((packet->pl_len + 3) >>   8) ); 	// len high byte (including command and CRC bytes)
    d0d6:	687b      	ldr	r3, [r7, #4]
    d0d8:	891b      	ldrh	r3, [r3, #8]
    d0da:	3303      	adds	r3, #3
    d0dc:	121b      	asrs	r3, r3, #8
    d0de:	b2db      	uxtb	r3, r3
    d0e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	size_t retval = 0x00;
    d0e4:	2300      	movs	r3, #0
    d0e6:	627b      	str	r3, [r7, #36]	; 0x24
	if(write_fn != NULL){ retval = write_fn( write_param, c ); }
    d0e8:	4b43      	ldr	r3, [pc, #268]	; (d1f8 <svl_packet_send+0x134>)
    d0ea:	681b      	ldr	r3, [r3, #0]
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	d008      	beq.n	d102 <svl_packet_send+0x3e>
    d0f0:	4b41      	ldr	r3, [pc, #260]	; (d1f8 <svl_packet_send+0x134>)
    d0f2:	681b      	ldr	r3, [r3, #0]
    d0f4:	4a41      	ldr	r2, [pc, #260]	; (d1fc <svl_packet_send+0x138>)
    d0f6:	6812      	ldr	r2, [r2, #0]
    d0f8:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
    d0fc:	4610      	mov	r0, r2
    d0fe:	4798      	blx	r3
    d100:	6278      	str	r0, [r7, #36]	; 0x24
	svl_packet_write_byte( ((packet->pl_len + 3) & 0xFF) ); 	// len low byte  (including command and CRC bytes)
    d102:	687b      	ldr	r3, [r7, #4]
    d104:	891b      	ldrh	r3, [r3, #8]
    d106:	b2db      	uxtb	r3, r3
    d108:	3303      	adds	r3, #3
    d10a:	b2db      	uxtb	r3, r3
    d10c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	size_t retval = 0x00;
    d110:	2300      	movs	r3, #0
    d112:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(write_fn != NULL){ retval = write_fn( write_param, c ); }
    d114:	4b38      	ldr	r3, [pc, #224]	; (d1f8 <svl_packet_send+0x134>)
    d116:	681b      	ldr	r3, [r3, #0]
    d118:	2b00      	cmp	r3, #0
    d11a:	d008      	beq.n	d12e <svl_packet_send+0x6a>
    d11c:	4b36      	ldr	r3, [pc, #216]	; (d1f8 <svl_packet_send+0x134>)
    d11e:	681b      	ldr	r3, [r3, #0]
    d120:	4a36      	ldr	r2, [pc, #216]	; (d1fc <svl_packet_send+0x138>)
    d122:	6812      	ldr	r2, [r2, #0]
    d124:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
    d128:	4610      	mov	r0, r2
    d12a:	4798      	blx	r3
    d12c:	62f8      	str	r0, [r7, #44]	; 0x2c

	svl_packet_write_byte( (packet->cmd) );            			// command byte
    d12e:	687b      	ldr	r3, [r7, #4]
    d130:	781b      	ldrb	r3, [r3, #0]
    d132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	size_t retval = 0x00;
    d136:	2300      	movs	r3, #0
    d138:	637b      	str	r3, [r7, #52]	; 0x34
	if(write_fn != NULL){ retval = write_fn( write_param, c ); }
    d13a:	4b2f      	ldr	r3, [pc, #188]	; (d1f8 <svl_packet_send+0x134>)
    d13c:	681b      	ldr	r3, [r3, #0]
    d13e:	2b00      	cmp	r3, #0
    d140:	d008      	beq.n	d154 <svl_packet_send+0x90>
    d142:	4b2d      	ldr	r3, [pc, #180]	; (d1f8 <svl_packet_send+0x134>)
    d144:	681b      	ldr	r3, [r3, #0]
    d146:	4a2d      	ldr	r2, [pc, #180]	; (d1fc <svl_packet_send+0x138>)
    d148:	6812      	ldr	r2, [r2, #0]
    d14a:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
    d14e:	4610      	mov	r0, r2
    d150:	4798      	blx	r3
    d152:	6378      	str	r0, [r7, #52]	; 0x34

	if((packet->pl != NULL) && (packet->pl_len != 0)){
    d154:	687b      	ldr	r3, [r7, #4]
    d156:	685b      	ldr	r3, [r3, #4]
    d158:	2b00      	cmp	r3, #0
    d15a:	d024      	beq.n	d1a6 <svl_packet_send+0xe2>
    d15c:	687b      	ldr	r3, [r7, #4]
    d15e:	891b      	ldrh	r3, [r3, #8]
    d160:	2b00      	cmp	r3, #0
    d162:	d020      	beq.n	d1a6 <svl_packet_send+0xe2>
		for(uint16_t indi = 0; indi < packet->pl_len; indi++){  // payload
    d164:	2300      	movs	r3, #0
    d166:	87fb      	strh	r3, [r7, #62]	; 0x3e
    d168:	e018      	b.n	d19c <svl_packet_send+0xd8>
			svl_packet_write_byte( *(packet->pl + indi) );
    d16a:	687b      	ldr	r3, [r7, #4]
    d16c:	685a      	ldr	r2, [r3, #4]
    d16e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    d170:	4413      	add	r3, r2
    d172:	781b      	ldrb	r3, [r3, #0]
    d174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	size_t retval = 0x00;
    d178:	2300      	movs	r3, #0
    d17a:	61fb      	str	r3, [r7, #28]
	if(write_fn != NULL){ retval = write_fn( write_param, c ); }
    d17c:	4b1e      	ldr	r3, [pc, #120]	; (d1f8 <svl_packet_send+0x134>)
    d17e:	681b      	ldr	r3, [r3, #0]
    d180:	2b00      	cmp	r3, #0
    d182:	d008      	beq.n	d196 <svl_packet_send+0xd2>
    d184:	4b1c      	ldr	r3, [pc, #112]	; (d1f8 <svl_packet_send+0x134>)
    d186:	681b      	ldr	r3, [r3, #0]
    d188:	4a1c      	ldr	r2, [pc, #112]	; (d1fc <svl_packet_send+0x138>)
    d18a:	6812      	ldr	r2, [r2, #0]
    d18c:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
    d190:	4610      	mov	r0, r2
    d192:	4798      	blx	r3
    d194:	61f8      	str	r0, [r7, #28]
		for(uint16_t indi = 0; indi < packet->pl_len; indi++){  // payload
    d196:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    d198:	3301      	adds	r3, #1
    d19a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    d19c:	687b      	ldr	r3, [r7, #4]
    d19e:	891b      	ldrh	r3, [r3, #8]
    d1a0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    d1a2:	429a      	cmp	r2, r3
    d1a4:	d3e1      	bcc.n	d16a <svl_packet_send+0xa6>
		}
	}

	svl_packet_write_byte( (uint8_t)(crc >>   8) );     		// CRC H
    d1a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    d1a8:	0a1b      	lsrs	r3, r3, #8
    d1aa:	b29b      	uxth	r3, r3
    d1ac:	b2db      	uxtb	r3, r3
    d1ae:	74fb      	strb	r3, [r7, #19]
	size_t retval = 0x00;
    d1b0:	2300      	movs	r3, #0
    d1b2:	60fb      	str	r3, [r7, #12]
	if(write_fn != NULL){ retval = write_fn( write_param, c ); }
    d1b4:	4b10      	ldr	r3, [pc, #64]	; (d1f8 <svl_packet_send+0x134>)
    d1b6:	681b      	ldr	r3, [r3, #0]
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	d007      	beq.n	d1cc <svl_packet_send+0x108>
    d1bc:	4b0e      	ldr	r3, [pc, #56]	; (d1f8 <svl_packet_send+0x134>)
    d1be:	681b      	ldr	r3, [r3, #0]
    d1c0:	4a0e      	ldr	r2, [pc, #56]	; (d1fc <svl_packet_send+0x138>)
    d1c2:	6812      	ldr	r2, [r2, #0]
    d1c4:	7cf9      	ldrb	r1, [r7, #19]
    d1c6:	4610      	mov	r0, r2
    d1c8:	4798      	blx	r3
    d1ca:	60f8      	str	r0, [r7, #12]
	svl_packet_write_byte( (uint8_t)(crc & 0xFF) );     		// CRC L
    d1cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    d1ce:	b2db      	uxtb	r3, r3
    d1d0:	76fb      	strb	r3, [r7, #27]
	size_t retval = 0x00;
    d1d2:	2300      	movs	r3, #0
    d1d4:	617b      	str	r3, [r7, #20]
	if(write_fn != NULL){ retval = write_fn( write_param, c ); }
    d1d6:	4b08      	ldr	r3, [pc, #32]	; (d1f8 <svl_packet_send+0x134>)
    d1d8:	681b      	ldr	r3, [r3, #0]
    d1da:	2b00      	cmp	r3, #0
    d1dc:	d007      	beq.n	d1ee <svl_packet_send+0x12a>
    d1de:	4b06      	ldr	r3, [pc, #24]	; (d1f8 <svl_packet_send+0x134>)
    d1e0:	681b      	ldr	r3, [r3, #0]
    d1e2:	4a06      	ldr	r2, [pc, #24]	; (d1fc <svl_packet_send+0x138>)
    d1e4:	6812      	ldr	r2, [r2, #0]
    d1e6:	7ef9      	ldrb	r1, [r7, #27]
    d1e8:	4610      	mov	r0, r2
    d1ea:	4798      	blx	r3
    d1ec:	6178      	str	r0, [r7, #20]
}
    d1ee:	bf00      	nop
    d1f0:	3740      	adds	r7, #64	; 0x40
    d1f2:	46bd      	mov	sp, r7
    d1f4:	bd80      	pop	{r7, pc}
    d1f6:	bf00      	nop
    d1f8:	1000184c 	.word	0x1000184c
    d1fc:	10001840 	.word	0x10001840

0000d200 <svl_packet_wait>:



uint8_t svl_packet_wait(svl_packet_t* packet ){
    d200:	b580      	push	{r7, lr}
    d202:	b08a      	sub	sp, #40	; 0x28
    d204:	af00      	add	r7, sp, #0
    d206:	6078      	str	r0, [r7, #4]

    // wait for 2 bytes (the length bytes)
    // wait for length bytes to come in
    // make sure that 'length' bytes are enough to satisfy the desired payload length

    if(packet == NULL)							{ return (SVL_PACKET_ERR); }
    d208:	687b      	ldr	r3, [r7, #4]
    d20a:	2b00      	cmp	r3, #0
    d20c:	d101      	bne.n	d212 <svl_packet_wait+0x12>
    d20e:	2301      	movs	r3, #1
    d210:	e084      	b.n	d31c <svl_packet_wait+0x11c>

    const uint8_t num_bytes_length = 2;
    d212:	2302      	movs	r3, #2
    d214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(svl_packet_wait_bytes(num_bytes_length))	{ return (SVL_PACKET_ERR_TIMEOUT | SVL_PACKET_LEN); }
    d218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    d21c:	4618      	mov	r0, r3
    d21e:	f000 f8bd 	bl	d39c <svl_packet_wait_bytes>
    d222:	4603      	mov	r3, r0
    d224:	2b00      	cmp	r3, #0
    d226:	d001      	beq.n	d22c <svl_packet_wait+0x2c>
    d228:	2382      	movs	r3, #130	; 0x82
    d22a:	e077      	b.n	d31c <svl_packet_wait+0x11c>
    uint16_t len = svl_packet_get_uint16_t();
    d22c:	f000 f87e 	bl	d32c <svl_packet_get_uint16_t>
    d230:	4603      	mov	r3, r0
    d232:	843b      	strh	r3, [r7, #32]

    if( len == 0 )								{ return ( SVL_PACKET_ERR_ZLP ); }
    d234:	8c3b      	ldrh	r3, [r7, #32]
    d236:	2b00      	cmp	r3, #0
    d238:	d101      	bne.n	d23e <svl_packet_wait+0x3e>
    d23a:	2304      	movs	r3, #4
    d23c:	e06e      	b.n	d31c <svl_packet_wait+0x11c>
    if( (len-3) > packet->max_pl_len )			{ return ( SVL_PACKET_ERR_MEM | SVL_PACKET_PL ); }
    d23e:	8c3b      	ldrh	r3, [r7, #32]
    d240:	3b03      	subs	r3, #3
    d242:	687a      	ldr	r2, [r7, #4]
    d244:	8952      	ldrh	r2, [r2, #10]
    d246:	4293      	cmp	r3, r2
    d248:	dd01      	ble.n	d24e <svl_packet_wait+0x4e>
    d24a:	2348      	movs	r3, #72	; 0x48
    d24c:	e066      	b.n	d31c <svl_packet_wait+0x11c>
    if(svl_packet_wait_bytes(len))				{ return ( SVL_PACKET_ERR_TIMEOUT | SVL_PACKET_PL ); }
    d24e:	8c3b      	ldrh	r3, [r7, #32]
    d250:	4618      	mov	r0, r3
    d252:	f000 f8a3 	bl	d39c <svl_packet_wait_bytes>
    d256:	4603      	mov	r3, r0
    d258:	2b00      	cmp	r3, #0
    d25a:	d001      	beq.n	d260 <svl_packet_wait+0x60>
    d25c:	2342      	movs	r3, #66	; 0x42
    d25e:	e05d      	b.n	d31c <svl_packet_wait+0x11c>

    svl_packet_read_byte( &packet->cmd );
    d260:	687b      	ldr	r3, [r7, #4]
    d262:	61bb      	str	r3, [r7, #24]
	size_t retval = 0x00;
    d264:	2300      	movs	r3, #0
    d266:	617b      	str	r3, [r7, #20]
	if(read_fn != NULL){ retval = read_fn( read_param, c ); }
    d268:	4b2e      	ldr	r3, [pc, #184]	; (d324 <svl_packet_wait+0x124>)
    d26a:	681b      	ldr	r3, [r3, #0]
    d26c:	2b00      	cmp	r3, #0
    d26e:	d007      	beq.n	d280 <svl_packet_wait+0x80>
    d270:	4b2c      	ldr	r3, [pc, #176]	; (d324 <svl_packet_wait+0x124>)
    d272:	681b      	ldr	r3, [r3, #0]
    d274:	4a2c      	ldr	r2, [pc, #176]	; (d328 <svl_packet_wait+0x128>)
    d276:	6812      	ldr	r2, [r2, #0]
    d278:	69b9      	ldr	r1, [r7, #24]
    d27a:	4610      	mov	r0, r2
    d27c:	4798      	blx	r3
    d27e:	6178      	str	r0, [r7, #20]
    packet->pl_len = (len-3);
    d280:	8c3b      	ldrh	r3, [r7, #32]
    d282:	3b03      	subs	r3, #3
    d284:	b29a      	uxth	r2, r3
    d286:	687b      	ldr	r3, [r7, #4]
    d288:	811a      	strh	r2, [r3, #8]
    if((packet->pl != NULL) && (packet->max_pl_len != 0)){
    d28a:	687b      	ldr	r3, [r7, #4]
    d28c:	685b      	ldr	r3, [r3, #4]
    d28e:	2b00      	cmp	r3, #0
    d290:	d034      	beq.n	d2fc <svl_packet_wait+0xfc>
    d292:	687b      	ldr	r3, [r7, #4]
    d294:	895b      	ldrh	r3, [r3, #10]
    d296:	2b00      	cmp	r3, #0
    d298:	d030      	beq.n	d2fc <svl_packet_wait+0xfc>
        uint32_t indi = 0x00;
    d29a:	2300      	movs	r3, #0
    d29c:	627b      	str	r3, [r7, #36]	; 0x24
        for( indi = 0; indi < packet->pl_len; indi++ ){   // Fill payload with data
    d29e:	2300      	movs	r3, #0
    d2a0:	627b      	str	r3, [r7, #36]	; 0x24
    d2a2:	e015      	b.n	d2d0 <svl_packet_wait+0xd0>
            svl_packet_read_byte( (packet->pl + indi) );
    d2a4:	687b      	ldr	r3, [r7, #4]
    d2a6:	685a      	ldr	r2, [r3, #4]
    d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d2aa:	4413      	add	r3, r2
    d2ac:	613b      	str	r3, [r7, #16]
	size_t retval = 0x00;
    d2ae:	2300      	movs	r3, #0
    d2b0:	60fb      	str	r3, [r7, #12]
	if(read_fn != NULL){ retval = read_fn( read_param, c ); }
    d2b2:	4b1c      	ldr	r3, [pc, #112]	; (d324 <svl_packet_wait+0x124>)
    d2b4:	681b      	ldr	r3, [r3, #0]
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d007      	beq.n	d2ca <svl_packet_wait+0xca>
    d2ba:	4b1a      	ldr	r3, [pc, #104]	; (d324 <svl_packet_wait+0x124>)
    d2bc:	681b      	ldr	r3, [r3, #0]
    d2be:	4a1a      	ldr	r2, [pc, #104]	; (d328 <svl_packet_wait+0x128>)
    d2c0:	6812      	ldr	r2, [r2, #0]
    d2c2:	6939      	ldr	r1, [r7, #16]
    d2c4:	4610      	mov	r0, r2
    d2c6:	4798      	blx	r3
    d2c8:	60f8      	str	r0, [r7, #12]
        for( indi = 0; indi < packet->pl_len; indi++ ){   // Fill payload with data
    d2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d2cc:	3301      	adds	r3, #1
    d2ce:	627b      	str	r3, [r7, #36]	; 0x24
    d2d0:	687b      	ldr	r3, [r7, #4]
    d2d2:	891b      	ldrh	r3, [r3, #8]
    d2d4:	461a      	mov	r2, r3
    d2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d2d8:	4293      	cmp	r3, r2
    d2da:	d3e3      	bcc.n	d2a4 <svl_packet_wait+0xa4>
        }
        for( ; indi < packet->max_pl_len; indi++ ){  // Zero out remaining bytes
    d2dc:	e008      	b.n	d2f0 <svl_packet_wait+0xf0>
            *(packet->pl + indi) = 0x00;
    d2de:	687b      	ldr	r3, [r7, #4]
    d2e0:	685a      	ldr	r2, [r3, #4]
    d2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d2e4:	4413      	add	r3, r2
    d2e6:	2200      	movs	r2, #0
    d2e8:	701a      	strb	r2, [r3, #0]
        for( ; indi < packet->max_pl_len; indi++ ){  // Zero out remaining bytes
    d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d2ec:	3301      	adds	r3, #1
    d2ee:	627b      	str	r3, [r7, #36]	; 0x24
    d2f0:	687b      	ldr	r3, [r7, #4]
    d2f2:	895b      	ldrh	r3, [r3, #10]
    d2f4:	461a      	mov	r2, r3
    d2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d2f8:	4293      	cmp	r3, r2
    d2fa:	d3f0      	bcc.n	d2de <svl_packet_wait+0xde>
        }
    }

    uint16_t crc 	= svl_packet_get_uint16_t();
    d2fc:	f000 f816 	bl	d32c <svl_packet_get_uint16_t>
    d300:	4603      	mov	r3, r0
    d302:	83fb      	strh	r3, [r7, #30]
    uint16_t check 	= svl_packet_get_crc16( packet );
    d304:	6878      	ldr	r0, [r7, #4]
    d306:	f000 f88f 	bl	d428 <svl_packet_get_crc16>
    d30a:	4603      	mov	r3, r0
    d30c:	83bb      	strh	r3, [r7, #28]

    if( crc != check ){ return (SVL_PACKET_ERR_CRC); }
    d30e:	8bfa      	ldrh	r2, [r7, #30]
    d310:	8bbb      	ldrh	r3, [r7, #28]
    d312:	429a      	cmp	r2, r3
    d314:	d001      	beq.n	d31a <svl_packet_wait+0x11a>
    d316:	2310      	movs	r3, #16
    d318:	e000      	b.n	d31c <svl_packet_wait+0x11c>

    return (SVL_PACKET_OK);
    d31a:	2300      	movs	r3, #0
}
    d31c:	4618      	mov	r0, r3
    d31e:	3728      	adds	r7, #40	; 0x28
    d320:	46bd      	mov	sp, r7
    d322:	bd80      	pop	{r7, pc}
    d324:	10001848 	.word	0x10001848
    d328:	1000183c 	.word	0x1000183c

0000d32c <svl_packet_get_uint16_t>:



uint16_t svl_packet_get_uint16_t( void ){
    d32c:	b580      	push	{r7, lr}
    d32e:	b086      	sub	sp, #24
    d330:	af00      	add	r7, sp, #0
    uint8_t h = 0x00;
    d332:	2300      	movs	r3, #0
    d334:	71fb      	strb	r3, [r7, #7]
    uint8_t l = 0x00;
    d336:	2300      	movs	r3, #0
    d338:	71bb      	strb	r3, [r7, #6]
    d33a:	1dfb      	adds	r3, r7, #7
    d33c:	60fb      	str	r3, [r7, #12]
	size_t retval = 0x00;
    d33e:	2300      	movs	r3, #0
    d340:	60bb      	str	r3, [r7, #8]
	if(read_fn != NULL){ retval = read_fn( read_param, c ); }
    d342:	4b14      	ldr	r3, [pc, #80]	; (d394 <svl_packet_get_uint16_t+0x68>)
    d344:	681b      	ldr	r3, [r3, #0]
    d346:	2b00      	cmp	r3, #0
    d348:	d007      	beq.n	d35a <svl_packet_get_uint16_t+0x2e>
    d34a:	4b12      	ldr	r3, [pc, #72]	; (d394 <svl_packet_get_uint16_t+0x68>)
    d34c:	681b      	ldr	r3, [r3, #0]
    d34e:	4a12      	ldr	r2, [pc, #72]	; (d398 <svl_packet_get_uint16_t+0x6c>)
    d350:	6812      	ldr	r2, [r2, #0]
    d352:	68f9      	ldr	r1, [r7, #12]
    d354:	4610      	mov	r0, r2
    d356:	4798      	blx	r3
    d358:	60b8      	str	r0, [r7, #8]
    d35a:	1dbb      	adds	r3, r7, #6
    d35c:	617b      	str	r3, [r7, #20]
	size_t retval = 0x00;
    d35e:	2300      	movs	r3, #0
    d360:	613b      	str	r3, [r7, #16]
	if(read_fn != NULL){ retval = read_fn( read_param, c ); }
    d362:	4b0c      	ldr	r3, [pc, #48]	; (d394 <svl_packet_get_uint16_t+0x68>)
    d364:	681b      	ldr	r3, [r3, #0]
    d366:	2b00      	cmp	r3, #0
    d368:	d007      	beq.n	d37a <svl_packet_get_uint16_t+0x4e>
    d36a:	4b0a      	ldr	r3, [pc, #40]	; (d394 <svl_packet_get_uint16_t+0x68>)
    d36c:	681b      	ldr	r3, [r3, #0]
    d36e:	4a0a      	ldr	r2, [pc, #40]	; (d398 <svl_packet_get_uint16_t+0x6c>)
    d370:	6812      	ldr	r2, [r2, #0]
    d372:	6979      	ldr	r1, [r7, #20]
    d374:	4610      	mov	r0, r2
    d376:	4798      	blx	r3
    d378:	6138      	str	r0, [r7, #16]
    svl_packet_read_byte( &h );
    svl_packet_read_byte( &l );
    return (((uint16_t)h << 8) | (l & 0xFF));
    d37a:	79fb      	ldrb	r3, [r7, #7]
    d37c:	021b      	lsls	r3, r3, #8
    d37e:	b21a      	sxth	r2, r3
    d380:	79bb      	ldrb	r3, [r7, #6]
    d382:	b21b      	sxth	r3, r3
    d384:	4313      	orrs	r3, r2
    d386:	b21b      	sxth	r3, r3
    d388:	b29b      	uxth	r3, r3
}
    d38a:	4618      	mov	r0, r3
    d38c:	3718      	adds	r7, #24
    d38e:	46bd      	mov	sp, r7
    d390:	bd80      	pop	{r7, pc}
    d392:	bf00      	nop
    d394:	10001848 	.word	0x10001848
    d398:	1000183c 	.word	0x1000183c

0000d39c <svl_packet_wait_bytes>:



uint8_t svl_packet_wait_bytes(uint32_t num){
    d39c:	b580      	push	{r7, lr}
    d39e:	b088      	sub	sp, #32
    d3a0:	af00      	add	r7, sp, #0
    d3a2:	6078      	str	r0, [r7, #4]
	uint32_t timeout_ms = 500;
    d3a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    d3a8:	61fb      	str	r3, [r7, #28]
	size_t retval = 0x00;
    d3aa:	2300      	movs	r3, #0
    d3ac:	613b      	str	r3, [r7, #16]
	if(millis_fn != NULL){ retval = millis_fn(); }
    d3ae:	4b1b      	ldr	r3, [pc, #108]	; (d41c <svl_packet_wait_bytes+0x80>)
    d3b0:	681b      	ldr	r3, [r3, #0]
    d3b2:	2b00      	cmp	r3, #0
    d3b4:	d003      	beq.n	d3be <svl_packet_wait_bytes+0x22>
    d3b6:	4b19      	ldr	r3, [pc, #100]	; (d41c <svl_packet_wait_bytes+0x80>)
    d3b8:	681b      	ldr	r3, [r3, #0]
    d3ba:	4798      	blx	r3
    d3bc:	6138      	str	r0, [r7, #16]
	return retval;
    d3be:	693b      	ldr	r3, [r7, #16]

	uint32_t start = svl_packet_millis();
    d3c0:	61bb      	str	r3, [r7, #24]
	uint32_t avail = 0;
    d3c2:	2300      	movs	r3, #0
    d3c4:	617b      	str	r3, [r7, #20]
	while((svl_packet_millis() - start) < timeout_ms){
    d3c6:	e014      	b.n	d3f2 <svl_packet_wait_bytes+0x56>
	size_t retval = 0x00;
    d3c8:	2300      	movs	r3, #0
    d3ca:	60fb      	str	r3, [r7, #12]
	if(avail_fn != NULL){ retval = avail_fn( avail_param ); }
    d3cc:	4b14      	ldr	r3, [pc, #80]	; (d420 <svl_packet_wait_bytes+0x84>)
    d3ce:	681b      	ldr	r3, [r3, #0]
    d3d0:	2b00      	cmp	r3, #0
    d3d2:	d006      	beq.n	d3e2 <svl_packet_wait_bytes+0x46>
    d3d4:	4b12      	ldr	r3, [pc, #72]	; (d420 <svl_packet_wait_bytes+0x84>)
    d3d6:	681b      	ldr	r3, [r3, #0]
    d3d8:	4a12      	ldr	r2, [pc, #72]	; (d424 <svl_packet_wait_bytes+0x88>)
    d3da:	6812      	ldr	r2, [r2, #0]
    d3dc:	4610      	mov	r0, r2
    d3de:	4798      	blx	r3
    d3e0:	60f8      	str	r0, [r7, #12]
	return retval;
    d3e2:	68fb      	ldr	r3, [r7, #12]
		avail = svl_packet_avail_bytes();
    d3e4:	617b      	str	r3, [r7, #20]
		if(avail >= num){
    d3e6:	697a      	ldr	r2, [r7, #20]
    d3e8:	687b      	ldr	r3, [r7, #4]
    d3ea:	429a      	cmp	r2, r3
    d3ec:	d301      	bcc.n	d3f2 <svl_packet_wait_bytes+0x56>
			return 0;
    d3ee:	2300      	movs	r3, #0
    d3f0:	e010      	b.n	d414 <svl_packet_wait_bytes+0x78>
	size_t retval = 0x00;
    d3f2:	2300      	movs	r3, #0
    d3f4:	60bb      	str	r3, [r7, #8]
	if(millis_fn != NULL){ retval = millis_fn(); }
    d3f6:	4b09      	ldr	r3, [pc, #36]	; (d41c <svl_packet_wait_bytes+0x80>)
    d3f8:	681b      	ldr	r3, [r3, #0]
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d003      	beq.n	d406 <svl_packet_wait_bytes+0x6a>
    d3fe:	4b07      	ldr	r3, [pc, #28]	; (d41c <svl_packet_wait_bytes+0x80>)
    d400:	681b      	ldr	r3, [r3, #0]
    d402:	4798      	blx	r3
    d404:	60b8      	str	r0, [r7, #8]
	return retval;
    d406:	68ba      	ldr	r2, [r7, #8]
	while((svl_packet_millis() - start) < timeout_ms){
    d408:	69bb      	ldr	r3, [r7, #24]
    d40a:	1ad3      	subs	r3, r2, r3
    d40c:	69fa      	ldr	r2, [r7, #28]
    d40e:	429a      	cmp	r2, r3
    d410:	d8da      	bhi.n	d3c8 <svl_packet_wait_bytes+0x2c>
		}
	}

	// debug_printf("only got %d bytes...\n",avail);
	return 1;
    d412:	2301      	movs	r3, #1
}
    d414:	4618      	mov	r0, r3
    d416:	3720      	adds	r7, #32
    d418:	46bd      	mov	sp, r7
    d41a:	bd80      	pop	{r7, pc}
    d41c:	10001854 	.word	0x10001854
    d420:	10001850 	.word	0x10001850
    d424:	10001844 	.word	0x10001844

0000d428 <svl_packet_get_crc16>:



uint16_t svl_packet_get_crc16(svl_packet_t* packet){
    d428:	b480      	push	{r7}
    d42a:	b087      	sub	sp, #28
    d42c:	af00      	add	r7, sp, #0
    d42e:	6078      	str	r0, [r7, #4]
//    #         augmented message into register bit position 0.
//    #     If (a 1 bit popped out of the register during step 3)
//    #         Register = Register XOR Poly.
//    #     End
//    # The register now contains the remainder.
  uint16_t reg = 0x0000;
    d430:	2300      	movs	r3, #0
    d432:	82fb      	strh	r3, [r7, #22]
  bool c = false;
    d434:	2300      	movs	r3, #0
    d436:	757b      	strb	r3, [r7, #21]
  uint16_t poly = 0x8005;
    d438:	f248 0305 	movw	r3, #32773	; 0x8005
    d43c:	81fb      	strh	r3, [r7, #14]
  for( uint16_t indi = 0; indi < packet->pl_len + 2 + 1; indi++ ){ // addtl 2 bytes for padding, 1 byte to process cmd
    d43e:	2300      	movs	r3, #0
    d440:	827b      	strh	r3, [r7, #18]
    d442:	e046      	b.n	d4d2 <svl_packet_get_crc16+0xaa>
    for( uint8_t b = 0; b < 8; b++ ){
    d444:	2300      	movs	r3, #0
    d446:	747b      	strb	r3, [r7, #17]
    d448:	e03d      	b.n	d4c6 <svl_packet_get_crc16+0x9e>
      c = false;
    d44a:	2300      	movs	r3, #0
    d44c:	757b      	strb	r3, [r7, #21]
      if(reg & 0x8000){
    d44e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    d452:	2b00      	cmp	r3, #0
    d454:	da01      	bge.n	d45a <svl_packet_get_crc16+0x32>
        c = true;
    d456:	2301      	movs	r3, #1
    d458:	757b      	strb	r3, [r7, #21]
      }
      reg <<= 1;
    d45a:	8afb      	ldrh	r3, [r7, #22]
    d45c:	005b      	lsls	r3, r3, #1
    d45e:	82fb      	strh	r3, [r7, #22]
      reg &= 0xFFFF;
      if(indi < (packet->pl_len + 1)){
    d460:	687b      	ldr	r3, [r7, #4]
    d462:	891b      	ldrh	r3, [r3, #8]
    d464:	8a7a      	ldrh	r2, [r7, #18]
    d466:	429a      	cmp	r2, r3
    d468:	d823      	bhi.n	d4b2 <svl_packet_get_crc16+0x8a>
        if(indi == 0){
    d46a:	8a7b      	ldrh	r3, [r7, #18]
    d46c:	2b00      	cmp	r3, #0
    d46e:	d10e      	bne.n	d48e <svl_packet_get_crc16+0x66>
          if( packet->cmd & (0x80 >> b)){
    d470:	687b      	ldr	r3, [r7, #4]
    d472:	781b      	ldrb	r3, [r3, #0]
    d474:	4619      	mov	r1, r3
    d476:	7c7b      	ldrb	r3, [r7, #17]
    d478:	2280      	movs	r2, #128	; 0x80
    d47a:	fa42 f303 	asr.w	r3, r2, r3
    d47e:	400b      	ands	r3, r1
    d480:	2b00      	cmp	r3, #0
    d482:	d016      	beq.n	d4b2 <svl_packet_get_crc16+0x8a>
            reg |= 0x0001;
    d484:	8afb      	ldrh	r3, [r7, #22]
    d486:	f043 0301 	orr.w	r3, r3, #1
    d48a:	82fb      	strh	r3, [r7, #22]
    d48c:	e011      	b.n	d4b2 <svl_packet_get_crc16+0x8a>
          }
        }else{
          if((*(packet->pl + indi - 1)) & (0x80 >> b)){
    d48e:	687b      	ldr	r3, [r7, #4]
    d490:	685a      	ldr	r2, [r3, #4]
    d492:	8a7b      	ldrh	r3, [r7, #18]
    d494:	3b01      	subs	r3, #1
    d496:	4413      	add	r3, r2
    d498:	781b      	ldrb	r3, [r3, #0]
    d49a:	4619      	mov	r1, r3
    d49c:	7c7b      	ldrb	r3, [r7, #17]
    d49e:	2280      	movs	r2, #128	; 0x80
    d4a0:	fa42 f303 	asr.w	r3, r2, r3
    d4a4:	400b      	ands	r3, r1
    d4a6:	2b00      	cmp	r3, #0
    d4a8:	d003      	beq.n	d4b2 <svl_packet_get_crc16+0x8a>
            reg |= 0x0001;
    d4aa:	8afb      	ldrh	r3, [r7, #22]
    d4ac:	f043 0301 	orr.w	r3, r3, #1
    d4b0:	82fb      	strh	r3, [r7, #22]
          }
        }
      }
      if(c){
    d4b2:	7d7b      	ldrb	r3, [r7, #21]
    d4b4:	2b00      	cmp	r3, #0
    d4b6:	d003      	beq.n	d4c0 <svl_packet_get_crc16+0x98>
        reg = (reg ^ poly);
    d4b8:	8afa      	ldrh	r2, [r7, #22]
    d4ba:	89fb      	ldrh	r3, [r7, #14]
    d4bc:	4053      	eors	r3, r2
    d4be:	82fb      	strh	r3, [r7, #22]
    for( uint8_t b = 0; b < 8; b++ ){
    d4c0:	7c7b      	ldrb	r3, [r7, #17]
    d4c2:	3301      	adds	r3, #1
    d4c4:	747b      	strb	r3, [r7, #17]
    d4c6:	7c7b      	ldrb	r3, [r7, #17]
    d4c8:	2b07      	cmp	r3, #7
    d4ca:	d9be      	bls.n	d44a <svl_packet_get_crc16+0x22>
  for( uint16_t indi = 0; indi < packet->pl_len + 2 + 1; indi++ ){ // addtl 2 bytes for padding, 1 byte to process cmd
    d4cc:	8a7b      	ldrh	r3, [r7, #18]
    d4ce:	3301      	adds	r3, #1
    d4d0:	827b      	strh	r3, [r7, #18]
    d4d2:	687b      	ldr	r3, [r7, #4]
    d4d4:	891b      	ldrh	r3, [r3, #8]
    d4d6:	1c9a      	adds	r2, r3, #2
    d4d8:	8a7b      	ldrh	r3, [r7, #18]
    d4da:	429a      	cmp	r2, r3
    d4dc:	dab2      	bge.n	d444 <svl_packet_get_crc16+0x1c>
      }
    }
  }
  return reg;
    d4de:	8afb      	ldrh	r3, [r7, #22]
    d4e0:	4618      	mov	r0, r3
    d4e2:	371c      	adds	r7, #28
    d4e4:	46bd      	mov	sp, r7
    d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4ea:	4770      	bx	lr

0000d4ec <svl_uart_read>:
//*****************************************************************************
//
// UART read buffer
//
//*****************************************************************************
size_t svl_uart_read(void *pHandle, char* buf, size_t len){
    d4ec:	b580      	push	{r7, lr}
    d4ee:	b08a      	sub	sp, #40	; 0x28
    d4f0:	af00      	add	r7, sp, #0
    d4f2:	60f8      	str	r0, [r7, #12]
    d4f4:	60b9      	str	r1, [r7, #8]
    d4f6:	607a      	str	r2, [r7, #4]
    uint32_t ui32BytesRead = 0x00;
    d4f8:	2300      	movs	r3, #0
    d4fa:	627b      	str	r3, [r7, #36]	; 0x24
    am_hal_uart_transfer_t sRead = {
    d4fc:	2301      	movs	r3, #1
    d4fe:	613b      	str	r3, [r7, #16]
    d500:	68bb      	ldr	r3, [r7, #8]
    d502:	617b      	str	r3, [r7, #20]
    d504:	687b      	ldr	r3, [r7, #4]
    d506:	61bb      	str	r3, [r7, #24]
    d508:	2300      	movs	r3, #0
    d50a:	61fb      	str	r3, [r7, #28]
    d50c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d510:	623b      	str	r3, [r7, #32]
        .pui8Data = (uint8_t*)buf,
        .ui32NumBytes = len,
        .ui32TimeoutMs = 0,
        .pui32BytesTransferred = &ui32BytesRead,
    };
    am_hal_uart_transfer(pHandle, &sRead);
    d512:	f107 0310 	add.w	r3, r7, #16
    d516:	4619      	mov	r1, r3
    d518:	68f8      	ldr	r0, [r7, #12]
    d51a:	f000 ff7b 	bl	e414 <am_hal_uart_transfer>
    return ui32BytesRead;
    d51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d520:	4618      	mov	r0, r3
    d522:	3728      	adds	r7, #40	; 0x28
    d524:	46bd      	mov	sp, r7
    d526:	bd80      	pop	{r7, pc}

0000d528 <svl_uart_write>:
//*****************************************************************************
//
// UART write buffer
//
//*****************************************************************************
size_t svl_uart_write(void *pHandle, char* buf, size_t len){
    d528:	b580      	push	{r7, lr}
    d52a:	b08a      	sub	sp, #40	; 0x28
    d52c:	af00      	add	r7, sp, #0
    d52e:	60f8      	str	r0, [r7, #12]
    d530:	60b9      	str	r1, [r7, #8]
    d532:	607a      	str	r2, [r7, #4]
    uint32_t ui32BytesWritten = 0;
    d534:	2300      	movs	r3, #0
    d536:	627b      	str	r3, [r7, #36]	; 0x24
    const am_hal_uart_transfer_t sUartWrite =
    d538:	2300      	movs	r3, #0
    d53a:	613b      	str	r3, [r7, #16]
    d53c:	68bb      	ldr	r3, [r7, #8]
    d53e:	617b      	str	r3, [r7, #20]
    d540:	687b      	ldr	r3, [r7, #4]
    d542:	61bb      	str	r3, [r7, #24]
    d544:	f04f 33ff 	mov.w	r3, #4294967295
    d548:	61fb      	str	r3, [r7, #28]
    d54a:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d54e:	623b      	str	r3, [r7, #32]
        .ui32NumBytes = len,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    am_hal_uart_transfer(pHandle, &sUartWrite);
    d550:	f107 0310 	add.w	r3, r7, #16
    d554:	4619      	mov	r1, r3
    d556:	68f8      	ldr	r0, [r7, #12]
    d558:	f000 ff5c 	bl	e414 <am_hal_uart_transfer>

    return ui32BytesWritten;
    d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d55e:	4618      	mov	r0, r3
    d560:	3728      	adds	r7, #40	; 0x28
    d562:	46bd      	mov	sp, r7
    d564:	bd80      	pop	{r7, pc}

0000d566 <svl_uart_write_byte>:
//*****************************************************************************
//
// UART write byte
//
//*****************************************************************************
size_t svl_uart_write_byte(void *pHandle, uint8_t c){
    d566:	b580      	push	{r7, lr}
    d568:	b082      	sub	sp, #8
    d56a:	af00      	add	r7, sp, #0
    d56c:	6078      	str	r0, [r7, #4]
    d56e:	460b      	mov	r3, r1
    d570:	70fb      	strb	r3, [r7, #3]
    return svl_uart_write(pHandle, (char*)&c, 1);
    d572:	1cfb      	adds	r3, r7, #3
    d574:	2201      	movs	r2, #1
    d576:	4619      	mov	r1, r3
    d578:	6878      	ldr	r0, [r7, #4]
    d57a:	f7ff ffd5 	bl	d528 <svl_uart_write>
    d57e:	4603      	mov	r3, r0
}
    d580:	4618      	mov	r0, r3
    d582:	3708      	adds	r7, #8
    d584:	46bd      	mov	sp, r7
    d586:	bd80      	pop	{r7, pc}

0000d588 <_fill_ticks>:

volatile uint32_t ap3_stimer_overflows = 0x00;
uint64_t ticks = 0;

void _fill_ticks(void)
{
    d588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d58a:	af00      	add	r7, sp, #0
    ticks = ap3_stimer_overflows;
    d58c:	4b12      	ldr	r3, [pc, #72]	; (d5d8 <_fill_ticks+0x50>)
    d58e:	681b      	ldr	r3, [r3, #0]
    d590:	f04f 0400 	mov.w	r4, #0
    d594:	4a11      	ldr	r2, [pc, #68]	; (d5dc <_fill_ticks+0x54>)
    d596:	e9c2 3400 	strd	r3, r4, [r2]
    ticks <<= 32;
    d59a:	4b10      	ldr	r3, [pc, #64]	; (d5dc <_fill_ticks+0x54>)
    d59c:	e9d3 1200 	ldrd	r1, r2, [r3]
    d5a0:	f04f 0300 	mov.w	r3, #0
    d5a4:	f04f 0400 	mov.w	r4, #0
    d5a8:	000c      	movs	r4, r1
    d5aa:	2300      	movs	r3, #0
    d5ac:	4a0b      	ldr	r2, [pc, #44]	; (d5dc <_fill_ticks+0x54>)
    d5ae:	e9c2 3400 	strd	r3, r4, [r2]
    ticks |= (am_hal_stimer_counter_get() & 0xFFFFFFFF);
    d5b2:	f000 fd2d 	bl	e010 <am_hal_stimer_counter_get>
    d5b6:	4603      	mov	r3, r0
    d5b8:	4619      	mov	r1, r3
    d5ba:	f04f 0200 	mov.w	r2, #0
    d5be:	4b07      	ldr	r3, [pc, #28]	; (d5dc <_fill_ticks+0x54>)
    d5c0:	e9d3 3400 	ldrd	r3, r4, [r3]
    d5c4:	ea41 0503 	orr.w	r5, r1, r3
    d5c8:	ea42 0604 	orr.w	r6, r2, r4
    d5cc:	4b03      	ldr	r3, [pc, #12]	; (d5dc <_fill_ticks+0x54>)
    d5ce:	e9c3 5600 	strd	r5, r6, [r3]
}
    d5d2:	bf00      	nop
    d5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5d6:	bf00      	nop
    d5d8:	10001858 	.word	0x10001858
    d5dc:	10001860 	.word	0x10001860

0000d5e0 <millis>:

size_t millis(void){
    d5e0:	b598      	push	{r3, r4, r7, lr}
    d5e2:	af00      	add	r7, sp, #0
    _fill_ticks();
    d5e4:	f7ff ffd0 	bl	d588 <_fill_ticks>
    return (uint32_t)(ticks / AP3_STIMER_FREQ_KHZ);
    d5e8:	4b06      	ldr	r3, [pc, #24]	; (d604 <millis+0x24>)
    d5ea:	e9d3 0100 	ldrd	r0, r1, [r3]
    d5ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
    d5f2:	f04f 0300 	mov.w	r3, #0
    d5f6:	f7fe fd83 	bl	c100 <__aeabi_uldivmod>
    d5fa:	4603      	mov	r3, r0
    d5fc:	460c      	mov	r4, r1
}
    d5fe:	4618      	mov	r0, r3
    d600:	bd98      	pop	{r3, r4, r7, pc}
    d602:	bf00      	nop
    d604:	10001860 	.word	0x10001860

0000d608 <enable_burst_mode>:
//
// Burst mode
//
//*****************************************************************************
bool enable_burst_mode(void)
{
    d608:	b580      	push	{r7, lr}
    d60a:	b082      	sub	sp, #8
    d60c:	af00      	add	r7, sp, #0
    // Check that the Burst Feature is available.
    am_hal_burst_avail_e eBurstModeAvailable;
    if (AM_HAL_STATUS_SUCCESS != am_hal_burst_mode_initialize(&eBurstModeAvailable))
    d60e:	1dfb      	adds	r3, r7, #7
    d610:	4618      	mov	r0, r3
    d612:	f000 f895 	bl	d740 <am_hal_burst_mode_initialize>
    d616:	4603      	mov	r3, r0
    d618:	2b00      	cmp	r3, #0
    d61a:	d001      	beq.n	d620 <enable_burst_mode+0x18>
    {
        return (false);
    d61c:	2300      	movs	r3, #0
    d61e:	e009      	b.n	d634 <enable_burst_mode+0x2c>
    }

    // Put the MCU into "Burst" mode.
    am_hal_burst_mode_e eBurstMode;
    if (AM_HAL_STATUS_SUCCESS != am_hal_burst_mode_enable(&eBurstMode))
    d620:	1dbb      	adds	r3, r7, #6
    d622:	4618      	mov	r0, r3
    d624:	f000 f8d4 	bl	d7d0 <am_hal_burst_mode_enable>
    d628:	4603      	mov	r3, r0
    d62a:	2b00      	cmp	r3, #0
    d62c:	d001      	beq.n	d632 <enable_burst_mode+0x2a>
    {
        return (false);
    d62e:	2300      	movs	r3, #0
    d630:	e000      	b.n	d634 <enable_burst_mode+0x2c>
    }
    return (true);
    d632:	2301      	movs	r3, #1
}
    d634:	4618      	mov	r0, r3
    d636:	3708      	adds	r7, #8
    d638:	46bd      	mov	sp, r7
    d63a:	bd80      	pop	{r7, pc}

0000d63c <disable_burst_mode>:

//Turns main processor from 96MHz to 48MHz
//Returns false if disable fails
bool disable_burst_mode(void)
{
    d63c:	b580      	push	{r7, lr}
    d63e:	b082      	sub	sp, #8
    d640:	af00      	add	r7, sp, #0
    am_hal_burst_mode_e eBurstMode;
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_disable(&eBurstMode))
    d642:	1dfb      	adds	r3, r7, #7
    d644:	4618      	mov	r0, r3
    d646:	f000 f8f1 	bl	d82c <am_hal_burst_mode_disable>
    d64a:	4603      	mov	r3, r0
    d64c:	2b00      	cmp	r3, #0
    d64e:	d104      	bne.n	d65a <disable_burst_mode+0x1e>
    {
        if (AM_HAL_NORMAL_MODE != eBurstMode)
    d650:	79fb      	ldrb	r3, [r7, #7]
    d652:	2b01      	cmp	r3, #1
    d654:	d003      	beq.n	d65e <disable_burst_mode+0x22>
        {
            return (false);
    d656:	2300      	movs	r3, #0
    d658:	e002      	b.n	d660 <disable_burst_mode+0x24>
        }
    }
    else
    {
        return (false);
    d65a:	2300      	movs	r3, #0
    d65c:	e000      	b.n	d660 <disable_burst_mode+0x24>
    }
    return (true);
    d65e:	2301      	movs	r3, #1
}
    d660:	4618      	mov	r0, r3
    d662:	3708      	adds	r7, #8
    d664:	46bd      	mov	sp, r7
    d666:	bd80      	pop	{r7, pc}

0000d668 <ap3_gpio_enable_interrupts>:

#define GPIOCFG_FLD_INTD_S 3
#define GPIOCFG_FLD_OUTCFG_S 1
#define GPIOCFG_FLD_INCFG_S 0

uint32_t ap3_gpio_enable_interrupts(uint32_t ui32Pin, uint32_t eIntDir){
    d668:	b580      	push	{r7, lr}
    d66a:	b08a      	sub	sp, #40	; 0x28
    d66c:	af00      	add	r7, sp, #0
    d66e:	6078      	str	r0, [r7, #4]
    d670:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    bool bClearEnable = false;
    d672:	2300      	movs	r3, #0
    d674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    d678:	2300      	movs	r3, #0
    d67a:	623b      	str	r3, [r7, #32]
    d67c:	6a3b      	ldr	r3, [r7, #32]
    d67e:	61fb      	str	r3, [r7, #28]
    d680:	69fb      	ldr	r3, [r7, #28]
    d682:	61bb      	str	r3, [r7, #24]
    ui32GPCfg |= (((eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S) | (((eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d684:	683b      	ldr	r3, [r7, #0]
    d686:	00db      	lsls	r3, r3, #3
    d688:	f003 0208 	and.w	r2, r3, #8
    d68c:	683b      	ldr	r3, [r7, #0]
    d68e:	085b      	lsrs	r3, r3, #1
    d690:	f003 0301 	and.w	r3, r3, #1
    d694:	4313      	orrs	r3, r2
    d696:	69ba      	ldr	r2, [r7, #24]
    d698:	4313      	orrs	r3, r2
    d69a:	61bb      	str	r3, [r7, #24]

    uint32_t ui32GPCfgAddr;
    uint32_t ui32GPCfgClearMask;
    uint32_t ui32GPCfgShft;

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d69c:	687b      	ldr	r3, [r7, #4]
    d69e:	009b      	lsls	r3, r3, #2
    d6a0:	f003 031c 	and.w	r3, r3, #28
    d6a4:	617b      	str	r3, [r7, #20]

    ui32GPCfgAddr = AM_REGADDR(GPIO, CFGA) + ((ui32Pin >> 1) & ~0x3);
    d6a6:	687b      	ldr	r3, [r7, #4]
    d6a8:	085b      	lsrs	r3, r3, #1
    d6aa:	f023 0203 	bic.w	r2, r3, #3
    d6ae:	4b1d      	ldr	r3, [pc, #116]	; (d724 <ap3_gpio_enable_interrupts+0xbc>)
    d6b0:	4413      	add	r3, r2
    d6b2:	613b      	str	r3, [r7, #16]
    ui32GPCfgClearMask = ~((uint32_t)0xF << ui32GPCfgShft);
    d6b4:	220f      	movs	r2, #15
    d6b6:	697b      	ldr	r3, [r7, #20]
    d6b8:	fa02 f303 	lsl.w	r3, r2, r3
    d6bc:	43db      	mvns	r3, r3
    d6be:	60fb      	str	r3, [r7, #12]

    ui32GPCfg <<= ui32GPCfgShft;
    d6c0:	69ba      	ldr	r2, [r7, #24]
    d6c2:	697b      	ldr	r3, [r7, #20]
    d6c4:	fa02 f303 	lsl.w	r3, r2, r3
    d6c8:	61bb      	str	r3, [r7, #24]

    AM_CRITICAL_BEGIN
    d6ca:	f000 fbe3 	bl	de94 <am_hal_interrupt_master_disable>
    d6ce:	4603      	mov	r3, r0
    d6d0:	60bb      	str	r3, [r7, #8]

    if (bClearEnable)
    d6d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	d00c      	beq.n	d6f4 <ap3_gpio_enable_interrupts+0x8c>
    {
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d6da:	687b      	ldr	r3, [r7, #4]
    d6dc:	f003 021f 	and.w	r2, r3, #31
    d6e0:	687b      	ldr	r3, [r7, #4]
    d6e2:	08db      	lsrs	r3, r3, #3
    d6e4:	f003 0104 	and.w	r1, r3, #4
    d6e8:	4b0f      	ldr	r3, [pc, #60]	; (d728 <ap3_gpio_enable_interrupts+0xc0>)
    d6ea:	440b      	add	r3, r1
    d6ec:	4619      	mov	r1, r3
    d6ee:	2301      	movs	r3, #1
    d6f0:	4093      	lsls	r3, r2
    d6f2:	600b      	str	r3, [r1, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d6f4:	4b0d      	ldr	r3, [pc, #52]	; (d72c <ap3_gpio_enable_interrupts+0xc4>)
    d6f6:	2273      	movs	r2, #115	; 0x73
    d6f8:	661a      	str	r2, [r3, #96]	; 0x60

    // Here's where the magic happens
    AM_REGVAL(ui32GPCfgAddr) = (AM_REGVAL(ui32GPCfgAddr) & ui32GPCfgClearMask) | ui32GPCfg;
    d6fa:	693b      	ldr	r3, [r7, #16]
    d6fc:	681a      	ldr	r2, [r3, #0]
    d6fe:	68fb      	ldr	r3, [r7, #12]
    d700:	ea02 0103 	and.w	r1, r2, r3
    d704:	693b      	ldr	r3, [r7, #16]
    d706:	69ba      	ldr	r2, [r7, #24]
    d708:	430a      	orrs	r2, r1
    d70a:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    d70c:	4b07      	ldr	r3, [pc, #28]	; (d72c <ap3_gpio_enable_interrupts+0xc4>)
    d70e:	2200      	movs	r2, #0
    d710:	661a      	str	r2, [r3, #96]	; 0x60

    AM_CRITICAL_END
    d712:	68bb      	ldr	r3, [r7, #8]
    d714:	4618      	mov	r0, r3
    d716:	f000 fbc1 	bl	de9c <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    d71a:	2300      	movs	r3, #0
}
    d71c:	4618      	mov	r0, r3
    d71e:	3728      	adds	r7, #40	; 0x28
    d720:	46bd      	mov	sp, r7
    d722:	bd80      	pop	{r7, pc}
    d724:	40010040 	.word	0x40010040
    d728:	400100b4 	.word	0x400100b4
    d72c:	40010000 	.word	0x40010000

0000d730 <memset>:
    d730:	4402      	add	r2, r0
    d732:	4603      	mov	r3, r0
    d734:	4293      	cmp	r3, r2
    d736:	d100      	bne.n	d73a <memset+0xa>
    d738:	4770      	bx	lr
    d73a:	f803 1b01 	strb.w	r1, [r3], #1
    d73e:	e7f9      	b.n	d734 <memset+0x4>

0000d740 <am_hal_burst_mode_initialize>:
    d740:	b570      	push	{r4, r5, r6, lr}
    d742:	4b1e      	ldr	r3, [pc, #120]	; (d7bc <am_hal_burst_mode_initialize+0x7c>)
    d744:	695a      	ldr	r2, [r3, #20]
    d746:	07d5      	lsls	r5, r2, #31
    d748:	b082      	sub	sp, #8
    d74a:	4604      	mov	r4, r0
    d74c:	d407      	bmi.n	d75e <am_hal_burst_mode_initialize+0x1e>
    d74e:	4a1c      	ldr	r2, [pc, #112]	; (d7c0 <am_hal_burst_mode_initialize+0x80>)
    d750:	2100      	movs	r1, #0
    d752:	2301      	movs	r3, #1
    d754:	7011      	strb	r1, [r2, #0]
    d756:	2007      	movs	r0, #7
    d758:	7023      	strb	r3, [r4, #0]
    d75a:	b002      	add	sp, #8
    d75c:	bd70      	pop	{r4, r5, r6, pc}
    d75e:	4a19      	ldr	r2, [pc, #100]	; (d7c4 <am_hal_burst_mode_initialize+0x84>)
    d760:	6a91      	ldr	r1, [r2, #40]	; 0x28
    d762:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    d766:	6291      	str	r1, [r2, #40]	; 0x28
    d768:	6812      	ldr	r2, [r2, #0]
    d76a:	07d0      	lsls	r0, r2, #31
    d76c:	d507      	bpl.n	d77e <am_hal_burst_mode_initialize+0x3e>
    d76e:	68db      	ldr	r3, [r3, #12]
    d770:	b2db      	uxtb	r3, r3
    d772:	2b11      	cmp	r3, #17
    d774:	d903      	bls.n	d77e <am_hal_burst_mode_initialize+0x3e>
    d776:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d77a:	4a13      	ldr	r2, [pc, #76]	; (d7c8 <am_hal_burst_mode_initialize+0x88>)
    d77c:	63da      	str	r2, [r3, #60]	; 0x3c
    d77e:	4d0f      	ldr	r5, [pc, #60]	; (d7bc <am_hal_burst_mode_initialize+0x7c>)
    d780:	4912      	ldr	r1, [pc, #72]	; (d7cc <am_hal_burst_mode_initialize+0x8c>)
    d782:	7e2a      	ldrb	r2, [r5, #24]
    d784:	2601      	movs	r6, #1
    d786:	f042 0210 	orr.w	r2, r2, #16
    d78a:	2320      	movs	r3, #32
    d78c:	762a      	strb	r2, [r5, #24]
    d78e:	f242 7010 	movw	r0, #10000	; 0x2710
    d792:	461a      	mov	r2, r3
    d794:	9600      	str	r6, [sp, #0]
    d796:	f000 f995 	bl	dac4 <am_hal_flash_delay_status_check>
    d79a:	b948      	cbnz	r0, d7b0 <am_hal_burst_mode_initialize+0x70>
    d79c:	69aa      	ldr	r2, [r5, #24]
    d79e:	0651      	lsls	r1, r2, #25
    d7a0:	d5d5      	bpl.n	d74e <am_hal_burst_mode_initialize+0xe>
    d7a2:	69aa      	ldr	r2, [r5, #24]
    d7a4:	0692      	lsls	r2, r2, #26
    d7a6:	d5d2      	bpl.n	d74e <am_hal_burst_mode_initialize+0xe>
    d7a8:	4a05      	ldr	r2, [pc, #20]	; (d7c0 <am_hal_burst_mode_initialize+0x80>)
    d7aa:	7016      	strb	r6, [r2, #0]
    d7ac:	7020      	strb	r0, [r4, #0]
    d7ae:	e7d4      	b.n	d75a <am_hal_burst_mode_initialize+0x1a>
    d7b0:	4a03      	ldr	r2, [pc, #12]	; (d7c0 <am_hal_burst_mode_initialize+0x80>)
    d7b2:	2100      	movs	r1, #0
    d7b4:	7011      	strb	r1, [r2, #0]
    d7b6:	7026      	strb	r6, [r4, #0]
    d7b8:	b002      	add	sp, #8
    d7ba:	bd70      	pop	{r4, r5, r6, pc}
    d7bc:	40020000 	.word	0x40020000
    d7c0:	10001868 	.word	0x10001868
    d7c4:	40021000 	.word	0x40021000
    d7c8:	0fc0400f 	.word	0x0fc0400f
    d7cc:	40020018 	.word	0x40020018

0000d7d0 <am_hal_burst_mode_enable>:
    d7d0:	4b14      	ldr	r3, [pc, #80]	; (d824 <am_hal_burst_mode_enable+0x54>)
    d7d2:	781b      	ldrb	r3, [r3, #0]
    d7d4:	b91b      	cbnz	r3, d7de <am_hal_burst_mode_enable+0xe>
    d7d6:	2301      	movs	r3, #1
    d7d8:	7003      	strb	r3, [r0, #0]
    d7da:	2007      	movs	r0, #7
    d7dc:	4770      	bx	lr
    d7de:	b570      	push	{r4, r5, r6, lr}
    d7e0:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    d7e4:	b082      	sub	sp, #8
    d7e6:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    d7ea:	490f      	ldr	r1, [pc, #60]	; (d828 <am_hal_burst_mode_enable+0x58>)
    d7ec:	2601      	movs	r6, #1
    d7ee:	4332      	orrs	r2, r6
    d7f0:	2304      	movs	r3, #4
    d7f2:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    d7f6:	4604      	mov	r4, r0
    d7f8:	461a      	mov	r2, r3
    d7fa:	9600      	str	r6, [sp, #0]
    d7fc:	f242 7010 	movw	r0, #10000	; 0x2710
    d800:	f000 f960 	bl	dac4 <am_hal_flash_delay_status_check>
    d804:	b938      	cbnz	r0, d816 <am_hal_burst_mode_enable+0x46>
    d806:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d808:	079a      	lsls	r2, r3, #30
    d80a:	d507      	bpl.n	d81c <am_hal_burst_mode_enable+0x4c>
    d80c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d80e:	075b      	lsls	r3, r3, #29
    d810:	d501      	bpl.n	d816 <am_hal_burst_mode_enable+0x46>
    d812:	7020      	strb	r0, [r4, #0]
    d814:	e000      	b.n	d818 <am_hal_burst_mode_enable+0x48>
    d816:	7026      	strb	r6, [r4, #0]
    d818:	b002      	add	sp, #8
    d81a:	bd70      	pop	{r4, r5, r6, pc}
    d81c:	7026      	strb	r6, [r4, #0]
    d81e:	4630      	mov	r0, r6
    d820:	e7fa      	b.n	d818 <am_hal_burst_mode_enable+0x48>
    d822:	bf00      	nop
    d824:	10001868 	.word	0x10001868
    d828:	40004034 	.word	0x40004034

0000d82c <am_hal_burst_mode_disable>:
    d82c:	b530      	push	{r4, r5, lr}
    d82e:	b085      	sub	sp, #20
    d830:	4605      	mov	r5, r0
    d832:	f000 fb2f 	bl	de94 <am_hal_interrupt_master_disable>
    d836:	2100      	movs	r1, #0
    d838:	4603      	mov	r3, r0
    d83a:	4812      	ldr	r0, [pc, #72]	; (d884 <am_hal_burst_mode_disable+0x58>)
    d83c:	9303      	str	r3, [sp, #12]
    d83e:	f000 f97b 	bl	db38 <am_hal_flash_store_ui32>
    d842:	9803      	ldr	r0, [sp, #12]
    d844:	f000 fb2a 	bl	de9c <am_hal_interrupt_master_set>
    d848:	4b0f      	ldr	r3, [pc, #60]	; (d888 <am_hal_burst_mode_disable+0x5c>)
    d84a:	490e      	ldr	r1, [pc, #56]	; (d884 <am_hal_burst_mode_disable+0x58>)
    d84c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d84e:	2401      	movs	r4, #1
    d850:	f36f 72df 	bfc	r2, #31, #1
    d854:	629a      	str	r2, [r3, #40]	; 0x28
    d856:	f242 7010 	movw	r0, #10000	; 0x2710
    d85a:	2300      	movs	r3, #0
    d85c:	9400      	str	r4, [sp, #0]
    d85e:	2204      	movs	r2, #4
    d860:	f000 f930 	bl	dac4 <am_hal_flash_delay_status_check>
    d864:	b950      	cbnz	r0, d87c <am_hal_burst_mode_disable+0x50>
    d866:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d86c:	f013 0f04 	tst.w	r3, #4
    d870:	bf0c      	ite	eq
    d872:	2301      	moveq	r3, #1
    d874:	2300      	movne	r3, #0
    d876:	702b      	strb	r3, [r5, #0]
    d878:	b005      	add	sp, #20
    d87a:	bd30      	pop	{r4, r5, pc}
    d87c:	702c      	strb	r4, [r5, #0]
    d87e:	b005      	add	sp, #20
    d880:	bd30      	pop	{r4, r5, pc}
    d882:	bf00      	nop
    d884:	40004034 	.word	0x40004034
    d888:	40021000 	.word	0x40021000

0000d88c <am_hal_cachectrl_config>:
    d88c:	b530      	push	{r4, r5, lr}
    d88e:	b083      	sub	sp, #12
    d890:	4605      	mov	r5, r0
    d892:	f000 faff 	bl	de94 <am_hal_interrupt_master_disable>
    d896:	4c0f      	ldr	r4, [pc, #60]	; (d8d4 <am_hal_cachectrl_config+0x48>)
    d898:	9001      	str	r0, [sp, #4]
    d89a:	6823      	ldr	r3, [r4, #0]
    d89c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d8a0:	6023      	str	r3, [r4, #0]
    d8a2:	9801      	ldr	r0, [sp, #4]
    d8a4:	f000 fafa 	bl	de9c <am_hal_interrupt_master_set>
    d8a8:	78ab      	ldrb	r3, [r5, #2]
    d8aa:	782a      	ldrb	r2, [r5, #0]
    d8ac:	7869      	ldrb	r1, [r5, #1]
    d8ae:	005b      	lsls	r3, r3, #1
    d8b0:	0112      	lsls	r2, r2, #4
    d8b2:	b2d2      	uxtb	r2, r2
    d8b4:	f003 0302 	and.w	r3, r3, #2
    d8b8:	4313      	orrs	r3, r2
    d8ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d8be:	020a      	lsls	r2, r1, #8
    d8c0:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d8c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d8c8:	4313      	orrs	r3, r2
    d8ca:	2000      	movs	r0, #0
    d8cc:	6023      	str	r3, [r4, #0]
    d8ce:	b003      	add	sp, #12
    d8d0:	bd30      	pop	{r4, r5, pc}
    d8d2:	bf00      	nop
    d8d4:	40018000 	.word	0x40018000

0000d8d8 <am_hal_cachectrl_enable>:
    d8d8:	4a03      	ldr	r2, [pc, #12]	; (d8e8 <am_hal_cachectrl_enable+0x10>)
    d8da:	6813      	ldr	r3, [r2, #0]
    d8dc:	f043 0301 	orr.w	r3, r3, #1
    d8e0:	6013      	str	r3, [r2, #0]
    d8e2:	2000      	movs	r0, #0
    d8e4:	4770      	bx	lr
    d8e6:	bf00      	nop
    d8e8:	40018000 	.word	0x40018000

0000d8ec <am_hal_clkgen_control>:
    d8ec:	4b41      	ldr	r3, [pc, #260]	; (d9f4 <am_hal_clkgen_control+0x108>)
    d8ee:	681a      	ldr	r2, [r3, #0]
    d8f0:	b912      	cbnz	r2, d8f8 <am_hal_clkgen_control+0xc>
    d8f2:	4a41      	ldr	r2, [pc, #260]	; (d9f8 <am_hal_clkgen_control+0x10c>)
    d8f4:	6812      	ldr	r2, [r2, #0]
    d8f6:	601a      	str	r2, [r3, #0]
    d8f8:	2809      	cmp	r0, #9
    d8fa:	d878      	bhi.n	d9ee <am_hal_clkgen_control+0x102>
    d8fc:	e8df f000 	tbb	[pc, r0]
    d900:	261e160d 	.word	0x261e160d
    d904:	524c423a 	.word	0x524c423a
    d908:	055a      	.short	0x055a
    d90a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d90e:	2000      	movs	r0, #0
    d910:	6a1a      	ldr	r2, [r3, #32]
    d912:	f36f 0200 	bfc	r2, #0, #1
    d916:	621a      	str	r2, [r3, #32]
    d918:	4770      	bx	lr
    d91a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d91e:	2200      	movs	r2, #0
    d920:	2147      	movs	r1, #71	; 0x47
    d922:	6159      	str	r1, [r3, #20]
    d924:	4610      	mov	r0, r2
    d926:	619a      	str	r2, [r3, #24]
    d928:	615a      	str	r2, [r3, #20]
    d92a:	4770      	bx	lr
    d92c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d930:	2000      	movs	r0, #0
    d932:	68d3      	ldr	r3, [r2, #12]
    d934:	f023 0301 	bic.w	r3, r3, #1
    d938:	60d3      	str	r3, [r2, #12]
    d93a:	4770      	bx	lr
    d93c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d940:	2000      	movs	r0, #0
    d942:	68d3      	ldr	r3, [r2, #12]
    d944:	f023 0302 	bic.w	r3, r3, #2
    d948:	60d3      	str	r3, [r2, #12]
    d94a:	4770      	bx	lr
    d94c:	4a2b      	ldr	r2, [pc, #172]	; (d9fc <am_hal_clkgen_control+0x110>)
    d94e:	68d3      	ldr	r3, [r2, #12]
    d950:	b2db      	uxtb	r3, r3
    d952:	2b21      	cmp	r3, #33	; 0x21
    d954:	d106      	bne.n	d964 <am_hal_clkgen_control+0x78>
    d956:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d95a:	2101      	movs	r1, #1
    d95c:	f361 2309 	bfi	r3, r1, #8, #2
    d960:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d964:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d968:	2000      	movs	r0, #0
    d96a:	68d3      	ldr	r3, [r2, #12]
    d96c:	f043 0301 	orr.w	r3, r3, #1
    d970:	60d3      	str	r3, [r2, #12]
    d972:	4770      	bx	lr
    d974:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d978:	2000      	movs	r0, #0
    d97a:	68d3      	ldr	r3, [r2, #12]
    d97c:	f043 0302 	orr.w	r3, r3, #2
    d980:	60d3      	str	r3, [r2, #12]
    d982:	4770      	bx	lr
    d984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d988:	2200      	movs	r2, #0
    d98a:	2047      	movs	r0, #71	; 0x47
    d98c:	2101      	movs	r1, #1
    d98e:	6158      	str	r0, [r3, #20]
    d990:	6199      	str	r1, [r3, #24]
    d992:	4610      	mov	r0, r2
    d994:	615a      	str	r2, [r3, #20]
    d996:	4770      	bx	lr
    d998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d99c:	2000      	movs	r0, #0
    d99e:	68da      	ldr	r2, [r3, #12]
    d9a0:	60da      	str	r2, [r3, #12]
    d9a2:	4770      	bx	lr
    d9a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9a8:	2000      	movs	r0, #0
    d9aa:	68d3      	ldr	r3, [r2, #12]
    d9ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d9b0:	60d3      	str	r3, [r2, #12]
    d9b2:	4770      	bx	lr
    d9b4:	b510      	push	{r4, lr}
    d9b6:	4a11      	ldr	r2, [pc, #68]	; (d9fc <am_hal_clkgen_control+0x110>)
    d9b8:	68d3      	ldr	r3, [r2, #12]
    d9ba:	b2db      	uxtb	r3, r3
    d9bc:	2b21      	cmp	r3, #33	; 0x21
    d9be:	460c      	mov	r4, r1
    d9c0:	d008      	beq.n	d9d4 <am_hal_clkgen_control+0xe8>
    d9c2:	b194      	cbz	r4, d9ea <am_hal_clkgen_control+0xfe>
    d9c4:	6823      	ldr	r3, [r4, #0]
    d9c6:	f043 0301 	orr.w	r3, r3, #1
    d9ca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9ce:	2000      	movs	r0, #0
    d9d0:	6213      	str	r3, [r2, #32]
    d9d2:	bd10      	pop	{r4, pc}
    d9d4:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d9d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d9dc:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d9e0:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d9e4:	f000 f85e 	bl	daa4 <am_hal_flash_delay>
    d9e8:	e7eb      	b.n	d9c2 <am_hal_clkgen_control+0xd6>
    d9ea:	4b05      	ldr	r3, [pc, #20]	; (da00 <am_hal_clkgen_control+0x114>)
    d9ec:	e7ed      	b.n	d9ca <am_hal_clkgen_control+0xde>
    d9ee:	2006      	movs	r0, #6
    d9f0:	4770      	bx	lr
    d9f2:	bf00      	nop
    d9f4:	1000186c 	.word	0x1000186c
    d9f8:	4ffff000 	.word	0x4ffff000
    d9fc:	40020000 	.word	0x40020000
    da00:	0025b801 	.word	0x0025b801

0000da04 <am_hal_clkgen_status_get>:
    da04:	b1a8      	cbz	r0, da32 <am_hal_clkgen_status_get+0x2e>
    da06:	b410      	push	{r4}
    da08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da0c:	490a      	ldr	r1, [pc, #40]	; (da38 <am_hal_clkgen_status_get+0x34>)
    da0e:	6994      	ldr	r4, [r2, #24]
    da10:	4b0a      	ldr	r3, [pc, #40]	; (da3c <am_hal_clkgen_status_get+0x38>)
    da12:	f014 0f01 	tst.w	r4, #1
    da16:	bf08      	it	eq
    da18:	460b      	moveq	r3, r1
    da1a:	6003      	str	r3, [r0, #0]
    da1c:	69d3      	ldr	r3, [r2, #28]
    da1e:	f85d 4b04 	ldr.w	r4, [sp], #4
    da22:	f003 0201 	and.w	r2, r3, #1
    da26:	f3c3 0340 	ubfx	r3, r3, #1, #1
    da2a:	6042      	str	r2, [r0, #4]
    da2c:	7203      	strb	r3, [r0, #8]
    da2e:	2000      	movs	r0, #0
    da30:	4770      	bx	lr
    da32:	2006      	movs	r0, #6
    da34:	4770      	bx	lr
    da36:	bf00      	nop
    da38:	02dc6c00 	.word	0x02dc6c00
    da3c:	016e3600 	.word	0x016e3600

0000da40 <am_hal_flash_page_erase>:
    da40:	4b00      	ldr	r3, [pc, #0]	; (da44 <am_hal_flash_page_erase+0x4>)
    da42:	4718      	bx	r3
    da44:	08000051 	.word	0x08000051

0000da48 <am_hal_flash_program_main>:
    da48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da4c:	4d12      	ldr	r5, [pc, #72]	; (da98 <am_hal_flash_program_main+0x50>)
    da4e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    da52:	42ae      	cmp	r6, r5
    da54:	b082      	sub	sp, #8
    da56:	d004      	beq.n	da62 <am_hal_flash_program_main+0x1a>
    da58:	4c10      	ldr	r4, [pc, #64]	; (da9c <am_hal_flash_program_main+0x54>)
    da5a:	47a0      	blx	r4
    da5c:	b002      	add	sp, #8
    da5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da62:	2b01      	cmp	r3, #1
    da64:	461c      	mov	r4, r3
    da66:	4607      	mov	r7, r0
    da68:	4690      	mov	r8, r2
    da6a:	d904      	bls.n	da76 <am_hal_flash_program_main+0x2e>
    da6c:	4d0b      	ldr	r5, [pc, #44]	; (da9c <am_hal_flash_program_main+0x54>)
    da6e:	3b01      	subs	r3, #1
    da70:	47a8      	blx	r5
    da72:	2800      	cmp	r0, #0
    da74:	d1f2      	bne.n	da5c <am_hal_flash_program_main+0x14>
    da76:	4b0a      	ldr	r3, [pc, #40]	; (daa0 <am_hal_flash_program_main+0x58>)
    da78:	4d08      	ldr	r5, [pc, #32]	; (da9c <am_hal_flash_program_main+0x54>)
    da7a:	681b      	ldr	r3, [r3, #0]
    da7c:	a902      	add	r1, sp, #8
    da7e:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    da82:	3a01      	subs	r2, #1
    da84:	f841 3d04 	str.w	r3, [r1, #-4]!
    da88:	eb08 0282 	add.w	r2, r8, r2, lsl #2
    da8c:	4638      	mov	r0, r7
    da8e:	2301      	movs	r3, #1
    da90:	47a8      	blx	r5
    da92:	b002      	add	sp, #8
    da94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da98:	10060000 	.word	0x10060000
    da9c:	08000055 	.word	0x08000055
    daa0:	1005fffc 	.word	0x1005fffc

0000daa4 <am_hal_flash_delay>:
    daa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    daa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    daaa:	075b      	lsls	r3, r3, #29
    daac:	bf46      	itte	mi
    daae:	0040      	lslmi	r0, r0, #1
    dab0:	230e      	movmi	r3, #14
    dab2:	230b      	movpl	r3, #11
    dab4:	4298      	cmp	r0, r3
    dab6:	d800      	bhi.n	daba <am_hal_flash_delay+0x16>
    dab8:	4770      	bx	lr
    daba:	1ac0      	subs	r0, r0, r3
    dabc:	4b00      	ldr	r3, [pc, #0]	; (dac0 <am_hal_flash_delay+0x1c>)
    dabe:	4718      	bx	r3
    dac0:	0800009d 	.word	0x0800009d

0000dac4 <am_hal_flash_delay_status_check>:
    dac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dac8:	f89d 4020 	ldrb.w	r4, [sp, #32]
    dacc:	460d      	mov	r5, r1
    dace:	4616      	mov	r6, r2
    dad0:	461f      	mov	r7, r3
    dad2:	b1b4      	cbz	r4, db02 <am_hal_flash_delay_status_check+0x3e>
    dad4:	4604      	mov	r4, r0
    dad6:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dada:	f8df 8058 	ldr.w	r8, [pc, #88]	; db34 <am_hal_flash_delay_status_check+0x70>
    dade:	e009      	b.n	daf4 <am_hal_flash_delay_status_check+0x30>
    dae0:	b324      	cbz	r4, db2c <am_hal_flash_delay_status_check+0x68>
    dae2:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dae6:	f013 0f04 	tst.w	r3, #4
    daea:	bf14      	ite	ne
    daec:	2012      	movne	r0, #18
    daee:	2005      	moveq	r0, #5
    daf0:	3c01      	subs	r4, #1
    daf2:	47c0      	blx	r8
    daf4:	682b      	ldr	r3, [r5, #0]
    daf6:	4033      	ands	r3, r6
    daf8:	429f      	cmp	r7, r3
    dafa:	d1f1      	bne.n	dae0 <am_hal_flash_delay_status_check+0x1c>
    dafc:	2000      	movs	r0, #0
    dafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    db02:	f8df 8030 	ldr.w	r8, [pc, #48]	; db34 <am_hal_flash_delay_status_check+0x70>
    db06:	4604      	mov	r4, r0
    db08:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    db0c:	e009      	b.n	db22 <am_hal_flash_delay_status_check+0x5e>
    db0e:	b16c      	cbz	r4, db2c <am_hal_flash_delay_status_check+0x68>
    db10:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    db14:	f013 0f04 	tst.w	r3, #4
    db18:	bf14      	ite	ne
    db1a:	2012      	movne	r0, #18
    db1c:	2005      	moveq	r0, #5
    db1e:	3c01      	subs	r4, #1
    db20:	47c0      	blx	r8
    db22:	682b      	ldr	r3, [r5, #0]
    db24:	4033      	ands	r3, r6
    db26:	429f      	cmp	r7, r3
    db28:	d0f1      	beq.n	db0e <am_hal_flash_delay_status_check+0x4a>
    db2a:	e7e7      	b.n	dafc <am_hal_flash_delay_status_check+0x38>
    db2c:	2004      	movs	r0, #4
    db2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    db32:	bf00      	nop
    db34:	0800009d 	.word	0x0800009d

0000db38 <am_hal_flash_store_ui32>:
    db38:	4b01      	ldr	r3, [pc, #4]	; (db40 <am_hal_flash_store_ui32+0x8>)
    db3a:	f043 0301 	orr.w	r3, r3, #1
    db3e:	4718      	bx	r3
    db40:	10001000 	.word	0x10001000

0000db44 <am_hal_gpio_pinconfig>:
    db44:	2831      	cmp	r0, #49	; 0x31
    db46:	d901      	bls.n	db4c <am_hal_gpio_pinconfig+0x8>
    db48:	2006      	movs	r0, #6
    db4a:	4770      	bx	lr
    db4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db50:	f001 0307 	and.w	r3, r1, #7
    db54:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
    db58:	b085      	sub	sp, #20
    db5a:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    db5e:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    db62:	d014      	beq.n	db8e <am_hal_gpio_pinconfig+0x4a>
    db64:	f3c1 1742 	ubfx	r7, r1, #5, #3
    db68:	1dbd      	adds	r5, r7, #6
    db6a:	f005 0507 	and.w	r5, r5, #7
    db6e:	2d03      	cmp	r5, #3
    db70:	f042 0201 	orr.w	r2, r2, #1
    db74:	f200 80a7 	bhi.w	dcc6 <am_hal_gpio_pinconfig+0x182>
    db78:	4d82      	ldr	r5, [pc, #520]	; (dd84 <am_hal_gpio_pinconfig+0x240>)
    db7a:	5c2d      	ldrb	r5, [r5, r0]
    db7c:	07ee      	lsls	r6, r5, #31
    db7e:	d403      	bmi.n	db88 <am_hal_gpio_pinconfig+0x44>
    db80:	4881      	ldr	r0, [pc, #516]	; (dd88 <am_hal_gpio_pinconfig+0x244>)
    db82:	b005      	add	sp, #20
    db84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db88:	3f02      	subs	r7, #2
    db8a:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
    db8e:	2c00      	cmp	r4, #0
    db90:	f040 8091 	bne.w	dcb6 <am_hal_gpio_pinconfig+0x172>
    db94:	4c7d      	ldr	r4, [pc, #500]	; (dd8c <am_hal_gpio_pinconfig+0x248>)
    db96:	4d7e      	ldr	r5, [pc, #504]	; (dd90 <am_hal_gpio_pinconfig+0x24c>)
    db98:	5c24      	ldrb	r4, [r4, r0]
    db9a:	5c2d      	ldrb	r5, [r5, r0]
    db9c:	411c      	asrs	r4, r3
    db9e:	f014 0f01 	tst.w	r4, #1
    dba2:	bf0c      	ite	eq
    dba4:	2400      	moveq	r4, #0
    dba6:	2402      	movne	r4, #2
    dba8:	42ab      	cmp	r3, r5
    dbaa:	ea42 0204 	orr.w	r2, r2, r4
    dbae:	f000 8096 	beq.w	dcde <am_hal_gpio_pinconfig+0x19a>
    dbb2:	f3c1 3341 	ubfx	r3, r1, #13, #2
    dbb6:	105d      	asrs	r5, r3, #1
    dbb8:	f3c1 2681 	ubfx	r6, r1, #10, #2
    dbbc:	00db      	lsls	r3, r3, #3
    dbbe:	f3c1 2e07 	ubfx	lr, r1, #8, #8
    dbc2:	f003 0408 	and.w	r4, r3, #8
    dbc6:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    dbca:	f00e 060c 	and.w	r6, lr, #12
    dbce:	f3c1 3500 	ubfx	r5, r1, #12, #1
    dbd2:	2e04      	cmp	r6, #4
    dbd4:	ea43 0304 	orr.w	r3, r3, r4
    dbd8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dbdc:	462c      	mov	r4, r5
    dbde:	f000 808b 	beq.w	dcf8 <am_hal_gpio_pinconfig+0x1b4>
    dbe2:	4c6c      	ldr	r4, [pc, #432]	; (dd94 <am_hal_gpio_pinconfig+0x250>)
    dbe4:	6827      	ldr	r7, [r4, #0]
    dbe6:	1bcf      	subs	r7, r1, r7
    dbe8:	fab7 f787 	clz	r7, r7
    dbec:	097f      	lsrs	r7, r7, #5
    dbee:	f01e 0f60 	tst.w	lr, #96	; 0x60
    dbf2:	bf04      	itt	eq
    dbf4:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    dbf8:	f364 0300 	bfieq	r3, r4, #0, #1
    dbfc:	0084      	lsls	r4, r0, #2
    dbfe:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dc02:	2902      	cmp	r1, #2
    dc04:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    dc08:	d078      	beq.n	dcfc <am_hal_gpio_pinconfig+0x1b8>
    dc0a:	d87f      	bhi.n	dd0c <am_hal_gpio_pinconfig+0x1c8>
    dc0c:	2901      	cmp	r1, #1
    dc0e:	f04f 0100 	mov.w	r1, #0
    dc12:	bf08      	it	eq
    dc14:	f042 0204 	orreq.w	r2, r2, #4
    dc18:	f005 0518 	and.w	r5, r5, #24
    dc1c:	9101      	str	r1, [sp, #4]
    dc1e:	f004 041c 	and.w	r4, r4, #28
    dc22:	f020 0a03 	bic.w	sl, r0, #3
    dc26:	f04f 090f 	mov.w	r9, #15
    dc2a:	fa09 f904 	lsl.w	r9, r9, r4
    dc2e:	0841      	lsrs	r1, r0, #1
    dc30:	26ff      	movs	r6, #255	; 0xff
    dc32:	fa03 f404 	lsl.w	r4, r3, r4
    dc36:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    dc3a:	40ae      	lsls	r6, r5
    dc3c:	9300      	str	r3, [sp, #0]
    dc3e:	fa02 f505 	lsl.w	r5, r2, r5
    dc42:	4683      	mov	fp, r0
    dc44:	f021 0803 	bic.w	r8, r1, #3
    dc48:	f000 f924 	bl	de94 <am_hal_interrupt_master_disable>
    dc4c:	9b00      	ldr	r3, [sp, #0]
    dc4e:	9003      	str	r0, [sp, #12]
    dc50:	ea6f 0909 	mvn.w	r9, r9
    dc54:	43f6      	mvns	r6, r6
    dc56:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    dc5a:	f8df e15c 	ldr.w	lr, [pc, #348]	; ddb8 <am_hal_gpio_pinconfig+0x274>
    dc5e:	4a4e      	ldr	r2, [pc, #312]	; (dd98 <am_hal_gpio_pinconfig+0x254>)
    dc60:	b15f      	cbz	r7, dc7a <am_hal_gpio_pinconfig+0x136>
    dc62:	ea4f 07db 	mov.w	r7, fp, lsr #3
    dc66:	f00b 001f 	and.w	r0, fp, #31
    dc6a:	f007 0704 	and.w	r7, r7, #4
    dc6e:	f04f 0b01 	mov.w	fp, #1
    dc72:	494a      	ldr	r1, [pc, #296]	; (dd9c <am_hal_gpio_pinconfig+0x258>)
    dc74:	fa0b f000 	lsl.w	r0, fp, r0
    dc78:	5078      	str	r0, [r7, r1]
    dc7a:	4849      	ldr	r0, [pc, #292]	; (dda0 <am_hal_gpio_pinconfig+0x25c>)
    dc7c:	2773      	movs	r7, #115	; 0x73
    dc7e:	6607      	str	r7, [r0, #96]	; 0x60
    dc80:	681f      	ldr	r7, [r3, #0]
    dc82:	4037      	ands	r7, r6
    dc84:	433d      	orrs	r5, r7
    dc86:	601d      	str	r5, [r3, #0]
    dc88:	f858 300e 	ldr.w	r3, [r8, lr]
    dc8c:	ea09 0303 	and.w	r3, r9, r3
    dc90:	4323      	orrs	r3, r4
    dc92:	f848 300e 	str.w	r3, [r8, lr]
    dc96:	f85a 3002 	ldr.w	r3, [sl, r2]
    dc9a:	401e      	ands	r6, r3
    dc9c:	9b01      	ldr	r3, [sp, #4]
    dc9e:	2400      	movs	r4, #0
    dca0:	431e      	orrs	r6, r3
    dca2:	f84a 6002 	str.w	r6, [sl, r2]
    dca6:	6604      	str	r4, [r0, #96]	; 0x60
    dca8:	9803      	ldr	r0, [sp, #12]
    dcaa:	f000 f8f7 	bl	de9c <am_hal_interrupt_master_set>
    dcae:	4620      	mov	r0, r4
    dcb0:	b005      	add	sp, #20
    dcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcb6:	2c01      	cmp	r4, #1
    dcb8:	d017      	beq.n	dcea <am_hal_gpio_pinconfig+0x1a6>
    dcba:	2c02      	cmp	r4, #2
    dcbc:	d035      	beq.n	dd2a <am_hal_gpio_pinconfig+0x1e6>
    dcbe:	4839      	ldr	r0, [pc, #228]	; (dda4 <am_hal_gpio_pinconfig+0x260>)
    dcc0:	b005      	add	sp, #20
    dcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcc6:	2ec0      	cmp	r6, #192	; 0xc0
    dcc8:	d02a      	beq.n	dd20 <am_hal_gpio_pinconfig+0x1dc>
    dcca:	2e20      	cmp	r6, #32
    dccc:	f47f af5f 	bne.w	db8e <am_hal_gpio_pinconfig+0x4a>
    dcd0:	2814      	cmp	r0, #20
    dcd2:	f43f af55 	beq.w	db80 <am_hal_gpio_pinconfig+0x3c>
    dcd6:	2c00      	cmp	r4, #0
    dcd8:	f43f af5c 	beq.w	db94 <am_hal_gpio_pinconfig+0x50>
    dcdc:	e7eb      	b.n	dcb6 <am_hal_gpio_pinconfig+0x172>
    dcde:	f3c1 4402 	ubfx	r4, r1, #16, #3
    dce2:	2c07      	cmp	r4, #7
    dce4:	d128      	bne.n	dd38 <am_hal_gpio_pinconfig+0x1f4>
    dce6:	4830      	ldr	r0, [pc, #192]	; (dda8 <am_hal_gpio_pinconfig+0x264>)
    dce8:	e74b      	b.n	db82 <am_hal_gpio_pinconfig+0x3e>
    dcea:	4c26      	ldr	r4, [pc, #152]	; (dd84 <am_hal_gpio_pinconfig+0x240>)
    dcec:	5c24      	ldrb	r4, [r4, r0]
    dcee:	07a5      	lsls	r5, r4, #30
    dcf0:	d5e5      	bpl.n	dcbe <am_hal_gpio_pinconfig+0x17a>
    dcf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dcf6:	e74d      	b.n	db94 <am_hal_gpio_pinconfig+0x50>
    dcf8:	2701      	movs	r7, #1
    dcfa:	e778      	b.n	dbee <am_hal_gpio_pinconfig+0xaa>
    dcfc:	f005 0518 	and.w	r5, r5, #24
    dd00:	f04f 0801 	mov.w	r8, #1
    dd04:	fa08 f105 	lsl.w	r1, r8, r5
    dd08:	9101      	str	r1, [sp, #4]
    dd0a:	e788      	b.n	dc1e <am_hal_gpio_pinconfig+0xda>
    dd0c:	f005 0518 	and.w	r5, r5, #24
    dd10:	f04f 0801 	mov.w	r8, #1
    dd14:	fa08 f105 	lsl.w	r1, r8, r5
    dd18:	f042 0204 	orr.w	r2, r2, #4
    dd1c:	9101      	str	r1, [sp, #4]
    dd1e:	e77e      	b.n	dc1e <am_hal_gpio_pinconfig+0xda>
    dd20:	2814      	cmp	r0, #20
    dd22:	f43f af34 	beq.w	db8e <am_hal_gpio_pinconfig+0x4a>
    dd26:	4821      	ldr	r0, [pc, #132]	; (ddac <am_hal_gpio_pinconfig+0x268>)
    dd28:	e72b      	b.n	db82 <am_hal_gpio_pinconfig+0x3e>
    dd2a:	4c16      	ldr	r4, [pc, #88]	; (dd84 <am_hal_gpio_pinconfig+0x240>)
    dd2c:	5c24      	ldrb	r4, [r4, r0]
    dd2e:	0764      	lsls	r4, r4, #29
    dd30:	d5c5      	bpl.n	dcbe <am_hal_gpio_pinconfig+0x17a>
    dd32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dd36:	e72d      	b.n	db94 <am_hal_gpio_pinconfig+0x50>
    dd38:	4d1d      	ldr	r5, [pc, #116]	; (ddb0 <am_hal_gpio_pinconfig+0x26c>)
    dd3a:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    dd3e:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    dd42:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    dd46:	429e      	cmp	r6, r3
    dd48:	d00c      	beq.n	dd64 <am_hal_gpio_pinconfig+0x220>
    dd4a:	0084      	lsls	r4, r0, #2
    dd4c:	4425      	add	r5, r4
    dd4e:	786e      	ldrb	r6, [r5, #1]
    dd50:	429e      	cmp	r6, r3
    dd52:	d012      	beq.n	dd7a <am_hal_gpio_pinconfig+0x236>
    dd54:	78ae      	ldrb	r6, [r5, #2]
    dd56:	429e      	cmp	r6, r3
    dd58:	d00d      	beq.n	dd76 <am_hal_gpio_pinconfig+0x232>
    dd5a:	78ed      	ldrb	r5, [r5, #3]
    dd5c:	429d      	cmp	r5, r3
    dd5e:	d00e      	beq.n	dd7e <am_hal_gpio_pinconfig+0x23a>
    dd60:	4814      	ldr	r0, [pc, #80]	; (ddb4 <am_hal_gpio_pinconfig+0x270>)
    dd62:	e70e      	b.n	db82 <am_hal_gpio_pinconfig+0x3e>
    dd64:	2300      	movs	r3, #0
    dd66:	0084      	lsls	r4, r0, #2
    dd68:	005b      	lsls	r3, r3, #1
    dd6a:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dd6e:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    dd72:	2700      	movs	r7, #0
    dd74:	e743      	b.n	dbfe <am_hal_gpio_pinconfig+0xba>
    dd76:	2302      	movs	r3, #2
    dd78:	e7f6      	b.n	dd68 <am_hal_gpio_pinconfig+0x224>
    dd7a:	2301      	movs	r3, #1
    dd7c:	e7f4      	b.n	dd68 <am_hal_gpio_pinconfig+0x224>
    dd7e:	2303      	movs	r3, #3
    dd80:	e7f2      	b.n	dd68 <am_hal_gpio_pinconfig+0x224>
    dd82:	bf00      	nop
    dd84:	0000eeec 	.word	0x0000eeec
    dd88:	08000100 	.word	0x08000100
    dd8c:	0000efe8 	.word	0x0000efe8
    dd90:	0000f020 	.word	0x0000f020
    dd94:	0000f01c 	.word	0x0000f01c
    dd98:	400100e0 	.word	0x400100e0
    dd9c:	400100b4 	.word	0x400100b4
    dda0:	40010000 	.word	0x40010000
    dda4:	08000102 	.word	0x08000102
    dda8:	08000103 	.word	0x08000103
    ddac:	08000101 	.word	0x08000101
    ddb0:	0000ef20 	.word	0x0000ef20
    ddb4:	08000104 	.word	0x08000104
    ddb8:	40010040 	.word	0x40010040

0000ddbc <am_hal_gpio_interrupt_enable>:
    ddbc:	4b0f      	ldr	r3, [pc, #60]	; (ddfc <am_hal_gpio_interrupt_enable+0x40>)
    ddbe:	2200      	movs	r2, #0
    ddc0:	4002      	ands	r2, r0
    ddc2:	400b      	ands	r3, r1
    ddc4:	4313      	orrs	r3, r2
    ddc6:	d001      	beq.n	ddcc <am_hal_gpio_interrupt_enable+0x10>
    ddc8:	2005      	movs	r0, #5
    ddca:	4770      	bx	lr
    ddcc:	b530      	push	{r4, r5, lr}
    ddce:	b083      	sub	sp, #12
    ddd0:	460d      	mov	r5, r1
    ddd2:	4604      	mov	r4, r0
    ddd4:	f000 f85e 	bl	de94 <am_hal_interrupt_master_disable>
    ddd8:	4b09      	ldr	r3, [pc, #36]	; (de00 <am_hal_gpio_interrupt_enable+0x44>)
    ddda:	9001      	str	r0, [sp, #4]
    dddc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dde0:	4322      	orrs	r2, r4
    dde2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    dde6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
    ddea:	432a      	orrs	r2, r5
    ddec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    ddf0:	9801      	ldr	r0, [sp, #4]
    ddf2:	f000 f853 	bl	de9c <am_hal_interrupt_master_set>
    ddf6:	2000      	movs	r0, #0
    ddf8:	b003      	add	sp, #12
    ddfa:	bd30      	pop	{r4, r5, pc}
    ddfc:	fffc0000 	.word	0xfffc0000
    de00:	40010000 	.word	0x40010000

0000de04 <am_hal_gpio_interrupt_disable>:
    de04:	4b10      	ldr	r3, [pc, #64]	; (de48 <am_hal_gpio_interrupt_disable+0x44>)
    de06:	2200      	movs	r2, #0
    de08:	4002      	ands	r2, r0
    de0a:	400b      	ands	r3, r1
    de0c:	4313      	orrs	r3, r2
    de0e:	d001      	beq.n	de14 <am_hal_gpio_interrupt_disable+0x10>
    de10:	2005      	movs	r0, #5
    de12:	4770      	bx	lr
    de14:	b530      	push	{r4, r5, lr}
    de16:	b083      	sub	sp, #12
    de18:	460d      	mov	r5, r1
    de1a:	4604      	mov	r4, r0
    de1c:	f000 f83a 	bl	de94 <am_hal_interrupt_master_disable>
    de20:	4b0a      	ldr	r3, [pc, #40]	; (de4c <am_hal_gpio_interrupt_disable+0x48>)
    de22:	9001      	str	r0, [sp, #4]
    de24:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    de28:	ea22 0204 	bic.w	r2, r2, r4
    de2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    de30:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
    de34:	ea22 0205 	bic.w	r2, r2, r5
    de38:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    de3c:	9801      	ldr	r0, [sp, #4]
    de3e:	f000 f82d 	bl	de9c <am_hal_interrupt_master_set>
    de42:	2000      	movs	r0, #0
    de44:	b003      	add	sp, #12
    de46:	bd30      	pop	{r4, r5, pc}
    de48:	fffc0000 	.word	0xfffc0000
    de4c:	40010000 	.word	0x40010000

0000de50 <am_hal_gpio_interrupt_clear>:
    de50:	4b0c      	ldr	r3, [pc, #48]	; (de84 <am_hal_gpio_interrupt_clear+0x34>)
    de52:	2200      	movs	r2, #0
    de54:	4002      	ands	r2, r0
    de56:	400b      	ands	r3, r1
    de58:	4313      	orrs	r3, r2
    de5a:	d001      	beq.n	de60 <am_hal_gpio_interrupt_clear+0x10>
    de5c:	2005      	movs	r0, #5
    de5e:	4770      	bx	lr
    de60:	b530      	push	{r4, r5, lr}
    de62:	b083      	sub	sp, #12
    de64:	460d      	mov	r5, r1
    de66:	4604      	mov	r4, r0
    de68:	f000 f814 	bl	de94 <am_hal_interrupt_master_disable>
    de6c:	4b06      	ldr	r3, [pc, #24]	; (de88 <am_hal_gpio_interrupt_clear+0x38>)
    de6e:	9001      	str	r0, [sp, #4]
    de70:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    de74:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
    de78:	9801      	ldr	r0, [sp, #4]
    de7a:	f000 f80f 	bl	de9c <am_hal_interrupt_master_set>
    de7e:	2000      	movs	r0, #0
    de80:	b003      	add	sp, #12
    de82:	bd30      	pop	{r4, r5, pc}
    de84:	fffc0000 	.word	0xfffc0000
    de88:	40010000 	.word	0x40010000

0000de8c <am_hal_interrupt_master_enable>:
    de8c:	f3ef 8010 	mrs	r0, PRIMASK
    de90:	b662      	cpsie	i
    de92:	4770      	bx	lr

0000de94 <am_hal_interrupt_master_disable>:
    de94:	f3ef 8010 	mrs	r0, PRIMASK
    de98:	b672      	cpsid	i
    de9a:	4770      	bx	lr

0000de9c <am_hal_interrupt_master_set>:
    de9c:	f380 8810 	msr	PRIMASK, r0
    dea0:	4770      	bx	lr
    dea2:	bf00      	nop

0000dea4 <am_hal_mcuctrl_info_get>:
    dea4:	b4f0      	push	{r4, r5, r6, r7}
    dea6:	b121      	cbz	r1, deb2 <am_hal_mcuctrl_info_get+0xe>
    dea8:	2801      	cmp	r0, #1
    deaa:	d038      	beq.n	df1e <am_hal_mcuctrl_info_get+0x7a>
    deac:	d320      	bcc.n	def0 <am_hal_mcuctrl_info_get+0x4c>
    deae:	2802      	cmp	r0, #2
    deb0:	d002      	beq.n	deb8 <am_hal_mcuctrl_info_get+0x14>
    deb2:	2006      	movs	r0, #6
    deb4:	bcf0      	pop	{r4, r5, r6, r7}
    deb6:	4770      	bx	lr
    deb8:	4a41      	ldr	r2, [pc, #260]	; (dfc0 <am_hal_mcuctrl_info_get+0x11c>)
    deba:	684d      	ldr	r5, [r1, #4]
    debc:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    dec0:	694c      	ldr	r4, [r1, #20]
    dec2:	f003 0601 	and.w	r6, r3, #1
    dec6:	f3c3 0040 	ubfx	r0, r3, #1, #1
    deca:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dece:	700e      	strb	r6, [r1, #0]
    ded0:	7208      	strb	r0, [r1, #8]
    ded2:	740b      	strb	r3, [r1, #16]
    ded4:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    ded8:	60cb      	str	r3, [r1, #12]
    deda:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    dede:	4328      	orrs	r0, r5
    dee0:	6048      	str	r0, [r1, #4]
    dee2:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    dee6:	4323      	orrs	r3, r4
    dee8:	2000      	movs	r0, #0
    deea:	614b      	str	r3, [r1, #20]
    deec:	bcf0      	pop	{r4, r5, r6, r7}
    deee:	4770      	bx	lr
    def0:	4a33      	ldr	r2, [pc, #204]	; (dfc0 <am_hal_mcuctrl_info_get+0x11c>)
    def2:	6993      	ldr	r3, [r2, #24]
    def4:	f3c3 1080 	ubfx	r0, r3, #6, #1
    def8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    defc:	7008      	strb	r0, [r1, #0]
    defe:	704b      	strb	r3, [r1, #1]
    df00:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    df04:	f3c3 6381 	ubfx	r3, r3, #26, #2
    df08:	710b      	strb	r3, [r1, #4]
    df0a:	6953      	ldr	r3, [r2, #20]
    df0c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    df10:	f003 0301 	and.w	r3, r3, #1
    df14:	2000      	movs	r0, #0
    df16:	708a      	strb	r2, [r1, #2]
    df18:	70cb      	strb	r3, [r1, #3]
    df1a:	bcf0      	pop	{r4, r5, r6, r7}
    df1c:	4770      	bx	lr
    df1e:	4b28      	ldr	r3, [pc, #160]	; (dfc0 <am_hal_mcuctrl_info_get+0x11c>)
    df20:	4c28      	ldr	r4, [pc, #160]	; (dfc4 <am_hal_mcuctrl_info_get+0x120>)
    df22:	681a      	ldr	r2, [r3, #0]
    df24:	600a      	str	r2, [r1, #0]
    df26:	6858      	ldr	r0, [r3, #4]
    df28:	6048      	str	r0, [r1, #4]
    df2a:	6898      	ldr	r0, [r3, #8]
    df2c:	6088      	str	r0, [r1, #8]
    df2e:	68d8      	ldr	r0, [r3, #12]
    df30:	60c8      	str	r0, [r1, #12]
    df32:	691d      	ldr	r5, [r3, #16]
    df34:	4824      	ldr	r0, [pc, #144]	; (dfc8 <am_hal_mcuctrl_info_get+0x124>)
    df36:	610d      	str	r5, [r1, #16]
    df38:	f3c2 5703 	ubfx	r7, r2, #20, #4
    df3c:	f3c2 4603 	ubfx	r6, r2, #16, #4
    df40:	695d      	ldr	r5, [r3, #20]
    df42:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    df46:	4b21      	ldr	r3, [pc, #132]	; (dfcc <am_hal_mcuctrl_info_get+0x128>)
    df48:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    df4c:	6208      	str	r0, [r1, #32]
    df4e:	f002 0201 	and.w	r2, r2, #1
    df52:	614d      	str	r5, [r1, #20]
    df54:	61cc      	str	r4, [r1, #28]
    df56:	618a      	str	r2, [r1, #24]
    df58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    df5c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    df60:	b2d0      	uxtb	r0, r2
    df62:	f004 020f 	and.w	r2, r4, #15
    df66:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    df6a:	624a      	str	r2, [r1, #36]	; 0x24
    df6c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    df70:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    df74:	f3c2 1003 	ubfx	r0, r2, #4, #4
    df78:	f004 020f 	and.w	r2, r4, #15
    df7c:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    df80:	628a      	str	r2, [r1, #40]	; 0x28
    df82:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    df86:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    df8a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    df8e:	f3c2 1203 	ubfx	r2, r2, #4, #4
    df92:	4302      	orrs	r2, r0
    df94:	62ca      	str	r2, [r1, #44]	; 0x2c
    df96:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    df9a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    df9e:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    dfa2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    dfa6:	b2c0      	uxtb	r0, r0
    dfa8:	0400      	lsls	r0, r0, #16
    dfaa:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    dfae:	b2d2      	uxtb	r2, r2
    dfb0:	431a      	orrs	r2, r3
    dfb2:	b2e3      	uxtb	r3, r4
    dfb4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    dfb8:	630b      	str	r3, [r1, #48]	; 0x30
    dfba:	2000      	movs	r0, #0
    dfbc:	bcf0      	pop	{r4, r5, r6, r7}
    dfbe:	4770      	bx	lr
    dfc0:	40020000 	.word	0x40020000
    dfc4:	0000f054 	.word	0x0000f054
    dfc8:	0000f094 	.word	0x0000f094
    dfcc:	f0000f00 	.word	0xf0000f00

0000dfd0 <am_hal_reset_control>:
    dfd0:	2803      	cmp	r0, #3
    dfd2:	d819      	bhi.n	e008 <am_hal_reset_control+0x38>
    dfd4:	e8df f000 	tbb	[pc, r0]
    dfd8:	02080c12 	.word	0x02080c12
    dfdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dfe0:	2201      	movs	r2, #1
    dfe2:	615a      	str	r2, [r3, #20]
    dfe4:	2000      	movs	r0, #0
    dfe6:	4770      	bx	lr
    dfe8:	4b08      	ldr	r3, [pc, #32]	; (e00c <am_hal_reset_control+0x3c>)
    dfea:	2000      	movs	r0, #0
    dfec:	6018      	str	r0, [r3, #0]
    dfee:	4770      	bx	lr
    dff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dff4:	221b      	movs	r2, #27
    dff6:	605a      	str	r2, [r3, #4]
    dff8:	2000      	movs	r0, #0
    dffa:	4770      	bx	lr
    dffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e000:	22d4      	movs	r2, #212	; 0xd4
    e002:	609a      	str	r2, [r3, #8]
    e004:	2000      	movs	r0, #0
    e006:	4770      	bx	lr
    e008:	2006      	movs	r0, #6
    e00a:	4770      	bx	lr
    e00c:	4ffff000 	.word	0x4ffff000

0000e010 <am_hal_stimer_counter_get>:
    e010:	4b01      	ldr	r3, [pc, #4]	; (e018 <am_hal_stimer_counter_get+0x8>)
    e012:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
    e016:	4770      	bx	lr
    e018:	40008000 	.word	0x40008000

0000e01c <am_hal_stimer_int_clear>:
    e01c:	4b01      	ldr	r3, [pc, #4]	; (e024 <am_hal_stimer_int_clear+0x8>)
    e01e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    e022:	4770      	bx	lr
    e024:	40008000 	.word	0x40008000

0000e028 <am_hal_sysctrl_sleep>:
    e028:	b510      	push	{r4, lr}
    e02a:	b082      	sub	sp, #8
    e02c:	4604      	mov	r4, r0
    e02e:	f7ff ff31 	bl	de94 <am_hal_interrupt_master_disable>
    e032:	9001      	str	r0, [sp, #4]
    e034:	b124      	cbz	r4, e040 <am_hal_sysctrl_sleep+0x18>
    e036:	4b12      	ldr	r3, [pc, #72]	; (e080 <am_hal_sysctrl_sleep+0x58>)
    e038:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e03c:	07db      	lsls	r3, r3, #31
    e03e:	d512      	bpl.n	e066 <am_hal_sysctrl_sleep+0x3e>
    e040:	4a10      	ldr	r2, [pc, #64]	; (e084 <am_hal_sysctrl_sleep+0x5c>)
    e042:	6913      	ldr	r3, [r2, #16]
    e044:	f023 0304 	bic.w	r3, r3, #4
    e048:	6113      	str	r3, [r2, #16]
    e04a:	f3bf 8f4f 	dsb	sy
    e04e:	4a0e      	ldr	r2, [pc, #56]	; (e088 <am_hal_sysctrl_sleep+0x60>)
    e050:	4b0e      	ldr	r3, [pc, #56]	; (e08c <am_hal_sysctrl_sleep+0x64>)
    e052:	6812      	ldr	r2, [r2, #0]
    e054:	601a      	str	r2, [r3, #0]
    e056:	bf30      	wfi
    e058:	f3bf 8f6f 	isb	sy
    e05c:	9801      	ldr	r0, [sp, #4]
    e05e:	f7ff ff1d 	bl	de9c <am_hal_interrupt_master_set>
    e062:	b002      	add	sp, #8
    e064:	bd10      	pop	{r4, pc}
    e066:	4b0a      	ldr	r3, [pc, #40]	; (e090 <am_hal_sysctrl_sleep+0x68>)
    e068:	681a      	ldr	r2, [r3, #0]
    e06a:	b912      	cbnz	r2, e072 <am_hal_sysctrl_sleep+0x4a>
    e06c:	4a09      	ldr	r2, [pc, #36]	; (e094 <am_hal_sysctrl_sleep+0x6c>)
    e06e:	6812      	ldr	r2, [r2, #0]
    e070:	601a      	str	r2, [r3, #0]
    e072:	4a04      	ldr	r2, [pc, #16]	; (e084 <am_hal_sysctrl_sleep+0x5c>)
    e074:	6913      	ldr	r3, [r2, #16]
    e076:	f043 0304 	orr.w	r3, r3, #4
    e07a:	6113      	str	r3, [r2, #16]
    e07c:	e7e5      	b.n	e04a <am_hal_sysctrl_sleep+0x22>
    e07e:	bf00      	nop
    e080:	40020000 	.word	0x40020000
    e084:	e000ed00 	.word	0xe000ed00
    e088:	5fff0000 	.word	0x5fff0000
    e08c:	10001870 	.word	0x10001870
    e090:	1000186c 	.word	0x1000186c
    e094:	4ffff000 	.word	0x4ffff000

0000e098 <am_hal_uart_initialize>:
    e098:	2801      	cmp	r0, #1
    e09a:	d901      	bls.n	e0a0 <am_hal_uart_initialize+0x8>
    e09c:	2005      	movs	r0, #5
    e09e:	4770      	bx	lr
    e0a0:	b169      	cbz	r1, e0be <am_hal_uart_initialize+0x26>
    e0a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0a4:	2264      	movs	r2, #100	; 0x64
    e0a6:	4e0e      	ldr	r6, [pc, #56]	; (e0e0 <am_hal_uart_initialize+0x48>)
    e0a8:	fb02 f200 	mul.w	r2, r2, r0
    e0ac:	18b4      	adds	r4, r6, r2
    e0ae:	4603      	mov	r3, r0
    e0b0:	78e0      	ldrb	r0, [r4, #3]
    e0b2:	f3c0 0700 	ubfx	r7, r0, #0, #1
    e0b6:	b2fd      	uxtb	r5, r7
    e0b8:	b11d      	cbz	r5, e0c2 <am_hal_uart_initialize+0x2a>
    e0ba:	2007      	movs	r0, #7
    e0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0be:	2006      	movs	r0, #6
    e0c0:	4770      	bx	lr
    e0c2:	f040 0001 	orr.w	r0, r0, #1
    e0c6:	70e0      	strb	r0, [r4, #3]
    e0c8:	58b0      	ldr	r0, [r6, r2]
    e0ca:	f8df e018 	ldr.w	lr, [pc, #24]	; e0e4 <am_hal_uart_initialize+0x4c>
    e0ce:	f36e 0017 	bfi	r0, lr, #0, #24
    e0d2:	50b0      	str	r0, [r6, r2]
    e0d4:	6263      	str	r3, [r4, #36]	; 0x24
    e0d6:	7127      	strb	r7, [r4, #4]
    e0d8:	6625      	str	r5, [r4, #96]	; 0x60
    e0da:	4628      	mov	r0, r5
    e0dc:	600c      	str	r4, [r1, #0]
    e0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0e0:	10001874 	.word	0x10001874
    e0e4:	00ea9e06 	.word	0x00ea9e06

0000e0e8 <am_hal_uart_power_control>:
    e0e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e0ec:	6804      	ldr	r4, [r0, #0]
    e0ee:	4b36      	ldr	r3, [pc, #216]	; (e1c8 <am_hal_uart_power_control+0xe0>)
    e0f0:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e0f4:	429c      	cmp	r4, r3
    e0f6:	b083      	sub	sp, #12
    e0f8:	d003      	beq.n	e102 <am_hal_uart_power_control+0x1a>
    e0fa:	2002      	movs	r0, #2
    e0fc:	b003      	add	sp, #12
    e0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e102:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e104:	4605      	mov	r5, r0
    e106:	f107 0008 	add.w	r0, r7, #8
    e10a:	4691      	mov	r9, r2
    e10c:	460e      	mov	r6, r1
    e10e:	fa5f f880 	uxtb.w	r8, r0
    e112:	b181      	cbz	r1, e136 <am_hal_uart_power_control+0x4e>
    e114:	2902      	cmp	r1, #2
    e116:	d80c      	bhi.n	e132 <am_hal_uart_power_control+0x4a>
    e118:	b992      	cbnz	r2, e140 <am_hal_uart_power_control+0x58>
    e11a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e11e:	371c      	adds	r7, #28
    e120:	033f      	lsls	r7, r7, #12
    e122:	f04f 33ff 	mov.w	r3, #4294967295
    e126:	647b      	str	r3, [r7, #68]	; 0x44
    e128:	4640      	mov	r0, r8
    e12a:	f000 fca7 	bl	ea7c <am_hal_pwrctrl_periph_disable>
    e12e:	2000      	movs	r0, #0
    e130:	e7e4      	b.n	e0fc <am_hal_uart_power_control+0x14>
    e132:	2006      	movs	r0, #6
    e134:	e7e2      	b.n	e0fc <am_hal_uart_power_control+0x14>
    e136:	b322      	cbz	r2, e182 <am_hal_uart_power_control+0x9a>
    e138:	792b      	ldrb	r3, [r5, #4]
    e13a:	bb3b      	cbnz	r3, e18c <am_hal_uart_power_control+0xa4>
    e13c:	2007      	movs	r0, #7
    e13e:	e7dd      	b.n	e0fc <am_hal_uart_power_control+0x14>
    e140:	f7ff fea8 	bl	de94 <am_hal_interrupt_master_disable>
    e144:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e148:	331c      	adds	r3, #28
    e14a:	031b      	lsls	r3, r3, #12
    e14c:	9001      	str	r0, [sp, #4]
    e14e:	6a1a      	ldr	r2, [r3, #32]
    e150:	60aa      	str	r2, [r5, #8]
    e152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e154:	60ea      	str	r2, [r5, #12]
    e156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e158:	612a      	str	r2, [r5, #16]
    e15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e15c:	616a      	str	r2, [r5, #20]
    e15e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e160:	61aa      	str	r2, [r5, #24]
    e162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e164:	61ea      	str	r2, [r5, #28]
    e166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e168:	622b      	str	r3, [r5, #32]
    e16a:	2301      	movs	r3, #1
    e16c:	712b      	strb	r3, [r5, #4]
    e16e:	9801      	ldr	r0, [sp, #4]
    e170:	f7ff fe94 	bl	de9c <am_hal_interrupt_master_set>
    e174:	682b      	ldr	r3, [r5, #0]
    e176:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e17a:	42a3      	cmp	r3, r4
    e17c:	d1d4      	bne.n	e128 <am_hal_uart_power_control+0x40>
    e17e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e180:	e7cb      	b.n	e11a <am_hal_uart_power_control+0x32>
    e182:	4640      	mov	r0, r8
    e184:	f000 fc50 	bl	ea28 <am_hal_pwrctrl_periph_enable>
    e188:	4648      	mov	r0, r9
    e18a:	e7b7      	b.n	e0fc <am_hal_uart_power_control+0x14>
    e18c:	4640      	mov	r0, r8
    e18e:	f000 fc4b 	bl	ea28 <am_hal_pwrctrl_periph_enable>
    e192:	f7ff fe7f 	bl	de94 <am_hal_interrupt_master_disable>
    e196:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e19a:	331c      	adds	r3, #28
    e19c:	031b      	lsls	r3, r3, #12
    e19e:	68aa      	ldr	r2, [r5, #8]
    e1a0:	9000      	str	r0, [sp, #0]
    e1a2:	621a      	str	r2, [r3, #32]
    e1a4:	68ea      	ldr	r2, [r5, #12]
    e1a6:	625a      	str	r2, [r3, #36]	; 0x24
    e1a8:	692a      	ldr	r2, [r5, #16]
    e1aa:	629a      	str	r2, [r3, #40]	; 0x28
    e1ac:	696a      	ldr	r2, [r5, #20]
    e1ae:	62da      	str	r2, [r3, #44]	; 0x2c
    e1b0:	69aa      	ldr	r2, [r5, #24]
    e1b2:	631a      	str	r2, [r3, #48]	; 0x30
    e1b4:	69ea      	ldr	r2, [r5, #28]
    e1b6:	635a      	str	r2, [r3, #52]	; 0x34
    e1b8:	6a2a      	ldr	r2, [r5, #32]
    e1ba:	639a      	str	r2, [r3, #56]	; 0x38
    e1bc:	9800      	ldr	r0, [sp, #0]
    e1be:	712e      	strb	r6, [r5, #4]
    e1c0:	f7ff fe6c 	bl	de9c <am_hal_interrupt_master_set>
    e1c4:	4630      	mov	r0, r6
    e1c6:	e799      	b.n	e0fc <am_hal_uart_power_control+0x14>
    e1c8:	01ea9e06 	.word	0x01ea9e06

0000e1cc <am_hal_uart_configure>:
    e1cc:	6803      	ldr	r3, [r0, #0]
    e1ce:	4a84      	ldr	r2, [pc, #528]	; (e3e0 <am_hal_uart_configure+0x214>)
    e1d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e1d4:	4293      	cmp	r3, r2
    e1d6:	d001      	beq.n	e1dc <am_hal_uart_configure+0x10>
    e1d8:	2002      	movs	r0, #2
    e1da:	4770      	bx	lr
    e1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e1e2:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e1e6:	351c      	adds	r5, #28
    e1e8:	032d      	lsls	r5, r5, #12
    e1ea:	2700      	movs	r7, #0
    e1ec:	b084      	sub	sp, #16
    e1ee:	632f      	str	r7, [r5, #48]	; 0x30
    e1f0:	460e      	mov	r6, r1
    e1f2:	4604      	mov	r4, r0
    e1f4:	f7ff fe4e 	bl	de94 <am_hal_interrupt_master_disable>
    e1f8:	9001      	str	r0, [sp, #4]
    e1fa:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e1fc:	f043 0308 	orr.w	r3, r3, #8
    e200:	862b      	strh	r3, [r5, #48]	; 0x30
    e202:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e204:	2201      	movs	r2, #1
    e206:	f362 1306 	bfi	r3, r2, #4, #3
    e20a:	862b      	strh	r3, [r5, #48]	; 0x30
    e20c:	9801      	ldr	r0, [sp, #4]
    e20e:	f7ff fe45 	bl	de9c <am_hal_interrupt_master_set>
    e212:	f7ff fe3f 	bl	de94 <am_hal_interrupt_master_disable>
    e216:	9002      	str	r0, [sp, #8]
    e218:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e21a:	f367 0300 	bfi	r3, r7, #0, #1
    e21e:	862b      	strh	r3, [r5, #48]	; 0x30
    e220:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e222:	f367 2349 	bfi	r3, r7, #9, #1
    e226:	862b      	strh	r3, [r5, #48]	; 0x30
    e228:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e22a:	f367 2308 	bfi	r3, r7, #8, #1
    e22e:	862b      	strh	r3, [r5, #48]	; 0x30
    e230:	9802      	ldr	r0, [sp, #8]
    e232:	f7ff fe33 	bl	de9c <am_hal_interrupt_master_set>
    e236:	4a6b      	ldr	r2, [pc, #428]	; (e3e4 <am_hal_uart_configure+0x218>)
    e238:	6833      	ldr	r3, [r6, #0]
    e23a:	68d2      	ldr	r2, [r2, #12]
    e23c:	b2d2      	uxtb	r2, r2
    e23e:	2a12      	cmp	r2, #18
    e240:	d00b      	beq.n	e25a <am_hal_uart_configure+0x8e>
    e242:	4a68      	ldr	r2, [pc, #416]	; (e3e4 <am_hal_uart_configure+0x218>)
    e244:	68d2      	ldr	r2, [r2, #12]
    e246:	b2d2      	uxtb	r2, r2
    e248:	2a20      	cmp	r2, #32
    e24a:	d90a      	bls.n	e262 <am_hal_uart_configure+0x96>
    e24c:	4a66      	ldr	r2, [pc, #408]	; (e3e8 <am_hal_uart_configure+0x21c>)
    e24e:	4293      	cmp	r3, r2
    e250:	d907      	bls.n	e262 <am_hal_uart_configure+0x96>
    e252:	4866      	ldr	r0, [pc, #408]	; (e3ec <am_hal_uart_configure+0x220>)
    e254:	b004      	add	sp, #16
    e256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e25a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    e25e:	d8f8      	bhi.n	e252 <am_hal_uart_configure+0x86>
    e260:	e7ef      	b.n	e242 <am_hal_uart_configure+0x76>
    e262:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e264:	f3c2 1202 	ubfx	r2, r2, #4, #3
    e268:	3a01      	subs	r2, #1
    e26a:	2a03      	cmp	r2, #3
    e26c:	d852      	bhi.n	e314 <am_hal_uart_configure+0x148>
    e26e:	e8df f002 	tbb	[pc, r2]
    e272:	020f      	.short	0x020f
    e274:	1215      	.short	0x1215
    e276:	4a5e      	ldr	r2, [pc, #376]	; (e3f0 <am_hal_uart_configure+0x224>)
    e278:	495e      	ldr	r1, [pc, #376]	; (e3f4 <am_hal_uart_configure+0x228>)
    e27a:	011b      	lsls	r3, r3, #4
    e27c:	fbb2 f2f3 	udiv	r2, r2, r3
    e280:	fbb1 f3f3 	udiv	r3, r1, r3
    e284:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    e288:	b95b      	cbnz	r3, e2a2 <am_hal_uart_configure+0xd6>
    e28a:	6623      	str	r3, [r4, #96]	; 0x60
    e28c:	4857      	ldr	r0, [pc, #348]	; (e3ec <am_hal_uart_configure+0x220>)
    e28e:	e7e1      	b.n	e254 <am_hal_uart_configure+0x88>
    e290:	4a59      	ldr	r2, [pc, #356]	; (e3f8 <am_hal_uart_configure+0x22c>)
    e292:	495a      	ldr	r1, [pc, #360]	; (e3fc <am_hal_uart_configure+0x230>)
    e294:	e7f1      	b.n	e27a <am_hal_uart_configure+0xae>
    e296:	4a5a      	ldr	r2, [pc, #360]	; (e400 <am_hal_uart_configure+0x234>)
    e298:	495a      	ldr	r1, [pc, #360]	; (e404 <am_hal_uart_configure+0x238>)
    e29a:	e7ee      	b.n	e27a <am_hal_uart_configure+0xae>
    e29c:	4a5a      	ldr	r2, [pc, #360]	; (e408 <am_hal_uart_configure+0x23c>)
    e29e:	495b      	ldr	r1, [pc, #364]	; (e40c <am_hal_uart_configure+0x240>)
    e2a0:	e7eb      	b.n	e27a <am_hal_uart_configure+0xae>
    e2a2:	0890      	lsrs	r0, r2, #2
    e2a4:	626b      	str	r3, [r5, #36]	; 0x24
    e2a6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    e2aa:	626b      	str	r3, [r5, #36]	; 0x24
    e2ac:	fbb1 f1f0 	udiv	r1, r1, r0
    e2b0:	62aa      	str	r2, [r5, #40]	; 0x28
    e2b2:	6621      	str	r1, [r4, #96]	; 0x60
    e2b4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e2b6:	f36f 338e 	bfc	r3, #14, #1
    e2ba:	862b      	strh	r3, [r5, #48]	; 0x30
    e2bc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e2be:	f36f 33cf 	bfc	r3, #15, #1
    e2c2:	862b      	strh	r3, [r5, #48]	; 0x30
    e2c4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e2c6:	6933      	ldr	r3, [r6, #16]
    e2c8:	4313      	orrs	r3, r2
    e2ca:	632b      	str	r3, [r5, #48]	; 0x30
    e2cc:	6973      	ldr	r3, [r6, #20]
    e2ce:	636b      	str	r3, [r5, #52]	; 0x34
    e2d0:	6871      	ldr	r1, [r6, #4]
    e2d2:	68b3      	ldr	r3, [r6, #8]
    e2d4:	68f2      	ldr	r2, [r6, #12]
    e2d6:	430b      	orrs	r3, r1
    e2d8:	f043 0310 	orr.w	r3, r3, #16
    e2dc:	4313      	orrs	r3, r2
    e2de:	62eb      	str	r3, [r5, #44]	; 0x2c
    e2e0:	f7ff fdd8 	bl	de94 <am_hal_interrupt_master_disable>
    e2e4:	9003      	str	r0, [sp, #12]
    e2e6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e2e8:	f043 0301 	orr.w	r3, r3, #1
    e2ec:	862b      	strh	r3, [r5, #48]	; 0x30
    e2ee:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e2f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e2f4:	862b      	strh	r3, [r5, #48]	; 0x30
    e2f6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e2f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e2fc:	862b      	strh	r3, [r5, #48]	; 0x30
    e2fe:	9803      	ldr	r0, [sp, #12]
    e300:	f7ff fdcc 	bl	de9c <am_hal_interrupt_master_set>
    e304:	6825      	ldr	r5, [r4, #0]
    e306:	4b36      	ldr	r3, [pc, #216]	; (e3e0 <am_hal_uart_configure+0x214>)
    e308:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    e30c:	429d      	cmp	r5, r3
    e30e:	d005      	beq.n	e31c <am_hal_uart_configure+0x150>
    e310:	2000      	movs	r0, #0
    e312:	e79f      	b.n	e254 <am_hal_uart_configure+0x88>
    e314:	2300      	movs	r3, #0
    e316:	6623      	str	r3, [r4, #96]	; 0x60
    e318:	483d      	ldr	r0, [pc, #244]	; (e410 <am_hal_uart_configure+0x244>)
    e31a:	e79b      	b.n	e254 <am_hal_uart_configure+0x88>
    e31c:	69b1      	ldr	r1, [r6, #24]
    e31e:	6a37      	ldr	r7, [r6, #32]
    e320:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    e324:	b109      	cbz	r1, e32a <am_hal_uart_configure+0x15e>
    e326:	69f3      	ldr	r3, [r6, #28]
    e328:	bb3b      	cbnz	r3, e37a <am_hal_uart_configure+0x1ae>
    e32a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e32c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e330:	f103 021c 	add.w	r2, r3, #28
    e334:	0312      	lsls	r2, r2, #12
    e336:	2100      	movs	r1, #0
    e338:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    e33c:	6b91      	ldr	r1, [r2, #56]	; 0x38
    e33e:	f021 0120 	bic.w	r1, r1, #32
    e342:	6391      	str	r1, [r2, #56]	; 0x38
    e344:	b1b7      	cbz	r7, e374 <am_hal_uart_configure+0x1a8>
    e346:	f1b8 0f00 	cmp.w	r8, #0
    e34a:	d12e      	bne.n	e3aa <am_hal_uart_configure+0x1de>
    e34c:	6823      	ldr	r3, [r4, #0]
    e34e:	4a24      	ldr	r2, [pc, #144]	; (e3e0 <am_hal_uart_configure+0x214>)
    e350:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e354:	2100      	movs	r1, #0
    e356:	4293      	cmp	r3, r2
    e358:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    e35c:	d1d8      	bne.n	e310 <am_hal_uart_configure+0x144>
    e35e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e360:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e364:	331c      	adds	r3, #28
    e366:	031b      	lsls	r3, r3, #12
    e368:	2000      	movs	r0, #0
    e36a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e36c:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e370:	639a      	str	r2, [r3, #56]	; 0x38
    e372:	e76f      	b.n	e254 <am_hal_uart_configure+0x88>
    e374:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    e378:	e7f4      	b.n	e364 <am_hal_uart_configure+0x198>
    e37a:	2201      	movs	r2, #1
    e37c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    e380:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e384:	f000 fba6 	bl	ead4 <am_hal_queue_init>
    e388:	6823      	ldr	r3, [r4, #0]
    e38a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e38e:	42ab      	cmp	r3, r5
    e390:	d1be      	bne.n	e310 <am_hal_uart_configure+0x144>
    e392:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e394:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e398:	331c      	adds	r3, #28
    e39a:	031b      	lsls	r3, r3, #12
    e39c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e39e:	f042 0220 	orr.w	r2, r2, #32
    e3a2:	639a      	str	r2, [r3, #56]	; 0x38
    e3a4:	2f00      	cmp	r7, #0
    e3a6:	d1ce      	bne.n	e346 <am_hal_uart_configure+0x17a>
    e3a8:	e7d0      	b.n	e34c <am_hal_uart_configure+0x180>
    e3aa:	2201      	movs	r2, #1
    e3ac:	4643      	mov	r3, r8
    e3ae:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    e3b2:	4639      	mov	r1, r7
    e3b4:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e3b8:	f000 fb8c 	bl	ead4 <am_hal_queue_init>
    e3bc:	6823      	ldr	r3, [r4, #0]
    e3be:	4a08      	ldr	r2, [pc, #32]	; (e3e0 <am_hal_uart_configure+0x214>)
    e3c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e3c4:	4293      	cmp	r3, r2
    e3c6:	d1a3      	bne.n	e310 <am_hal_uart_configure+0x144>
    e3c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e3ca:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e3ce:	331c      	adds	r3, #28
    e3d0:	031b      	lsls	r3, r3, #12
    e3d2:	2000      	movs	r0, #0
    e3d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e3d6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e3da:	639a      	str	r2, [r3, #56]	; 0x38
    e3dc:	e73a      	b.n	e254 <am_hal_uart_configure+0x88>
    e3de:	bf00      	nop
    e3e0:	01ea9e06 	.word	0x01ea9e06
    e3e4:	40020000 	.word	0x40020000
    e3e8:	0016e360 	.word	0x0016e360
    e3ec:	08000003 	.word	0x08000003
    e3f0:	2dc6c000 	.word	0x2dc6c000
    e3f4:	00b71b00 	.word	0x00b71b00
    e3f8:	5b8d8000 	.word	0x5b8d8000
    e3fc:	016e3600 	.word	0x016e3600
    e400:	0b71b000 	.word	0x0b71b000
    e404:	002dc6c0 	.word	0x002dc6c0
    e408:	16e36000 	.word	0x16e36000
    e40c:	005b8d80 	.word	0x005b8d80
    e410:	08000002 	.word	0x08000002

0000e414 <am_hal_uart_transfer>:
    e414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e418:	680f      	ldr	r7, [r1, #0]
    e41a:	b091      	sub	sp, #68	; 0x44
    e41c:	4605      	mov	r5, r0
    e41e:	b13f      	cbz	r7, e430 <am_hal_uart_transfer+0x1c>
    e420:	2f01      	cmp	r7, #1
    e422:	bf18      	it	ne
    e424:	2707      	movne	r7, #7
    e426:	d024      	beq.n	e472 <am_hal_uart_transfer+0x5e>
    e428:	4638      	mov	r0, r7
    e42a:	b011      	add	sp, #68	; 0x44
    e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e430:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e434:	690b      	ldr	r3, [r1, #16]
    e436:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e43a:	688e      	ldr	r6, [r1, #8]
    e43c:	9300      	str	r3, [sp, #0]
    e43e:	f1b9 0f00 	cmp.w	r9, #0
    e442:	d031      	beq.n	e4a8 <am_hal_uart_transfer+0x94>
    e444:	2e00      	cmp	r6, #0
    e446:	f000 819c 	beq.w	e782 <am_hal_uart_transfer+0x36e>
    e44a:	2800      	cmp	r0, #0
    e44c:	f000 8097 	beq.w	e57e <am_hal_uart_transfer+0x16a>
    e450:	6803      	ldr	r3, [r0, #0]
    e452:	4aa9      	ldr	r2, [pc, #676]	; (e6f8 <am_hal_uart_transfer+0x2e4>)
    e454:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e458:	4293      	cmp	r3, r2
    e45a:	f000 8092 	beq.w	e582 <am_hal_uart_transfer+0x16e>
    e45e:	46b8      	mov	r8, r7
    e460:	9b00      	ldr	r3, [sp, #0]
    e462:	b10b      	cbz	r3, e468 <am_hal_uart_transfer+0x54>
    e464:	f8c3 8000 	str.w	r8, [r3]
    e468:	2702      	movs	r7, #2
    e46a:	4638      	mov	r0, r7
    e46c:	b011      	add	sp, #68	; 0x44
    e46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e472:	1d0b      	adds	r3, r1, #4
    e474:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    e478:	f1b9 0f00 	cmp.w	r9, #0
    e47c:	d043      	beq.n	e506 <am_hal_uart_transfer+0xf2>
    e47e:	2f00      	cmp	r7, #0
    e480:	f000 8185 	beq.w	e78e <am_hal_uart_transfer+0x37a>
    e484:	2800      	cmp	r0, #0
    e486:	f000 80eb 	beq.w	e660 <am_hal_uart_transfer+0x24c>
    e48a:	6802      	ldr	r2, [r0, #0]
    e48c:	499a      	ldr	r1, [pc, #616]	; (e6f8 <am_hal_uart_transfer+0x2e4>)
    e48e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e492:	428a      	cmp	r2, r1
    e494:	f000 80e7 	beq.w	e666 <am_hal_uart_transfer+0x252>
    e498:	2600      	movs	r6, #0
    e49a:	2702      	movs	r7, #2
    e49c:	f1bb 0f00 	cmp.w	fp, #0
    e4a0:	d0c2      	beq.n	e428 <am_hal_uart_transfer+0x14>
    e4a2:	f8cb 6000 	str.w	r6, [fp]
    e4a6:	e7bf      	b.n	e428 <am_hal_uart_transfer+0x14>
    e4a8:	2800      	cmp	r0, #0
    e4aa:	d0dd      	beq.n	e468 <am_hal_uart_transfer+0x54>
    e4ac:	6803      	ldr	r3, [r0, #0]
    e4ae:	4a92      	ldr	r2, [pc, #584]	; (e6f8 <am_hal_uart_transfer+0x2e4>)
    e4b0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e4b4:	4293      	cmp	r3, r2
    e4b6:	d1d7      	bne.n	e468 <am_hal_uart_transfer+0x54>
    e4b8:	9b00      	ldr	r3, [sp, #0]
    e4ba:	b10b      	cbz	r3, e4c0 <am_hal_uart_transfer+0xac>
    e4bc:	f8c3 9000 	str.w	r9, [r3]
    e4c0:	b1fe      	cbz	r6, e502 <am_hal_uart_transfer+0xee>
    e4c2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	f040 8165 	bne.w	e796 <am_hal_uart_transfer+0x382>
    e4cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e4ce:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e4d2:	311c      	adds	r1, #28
    e4d4:	0309      	lsls	r1, r1, #12
    e4d6:	698a      	ldr	r2, [r1, #24]
    e4d8:	f3c2 1240 	ubfx	r2, r2, #5, #1
    e4dc:	2a00      	cmp	r2, #0
    e4de:	f040 818d 	bne.w	e7fc <am_hal_uart_transfer+0x3e8>
    e4e2:	f10a 33ff 	add.w	r3, sl, #4294967295
    e4e6:	e003      	b.n	e4f0 <am_hal_uart_transfer+0xdc>
    e4e8:	6988      	ldr	r0, [r1, #24]
    e4ea:	0680      	lsls	r0, r0, #26
    e4ec:	f100 8151 	bmi.w	e792 <am_hal_uart_transfer+0x37e>
    e4f0:	3201      	adds	r2, #1
    e4f2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    e4f6:	6008      	str	r0, [r1, #0]
    e4f8:	4296      	cmp	r6, r2
    e4fa:	d1f5      	bne.n	e4e8 <am_hal_uart_transfer+0xd4>
    e4fc:	9b00      	ldr	r3, [sp, #0]
    e4fe:	b103      	cbz	r3, e502 <am_hal_uart_transfer+0xee>
    e500:	601e      	str	r6, [r3, #0]
    e502:	2700      	movs	r7, #0
    e504:	e790      	b.n	e428 <am_hal_uart_transfer+0x14>
    e506:	2800      	cmp	r0, #0
    e508:	d0ae      	beq.n	e468 <am_hal_uart_transfer+0x54>
    e50a:	6802      	ldr	r2, [r0, #0]
    e50c:	497a      	ldr	r1, [pc, #488]	; (e6f8 <am_hal_uart_transfer+0x2e4>)
    e50e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e512:	428a      	cmp	r2, r1
    e514:	d1a8      	bne.n	e468 <am_hal_uart_transfer+0x54>
    e516:	f1bb 0f00 	cmp.w	fp, #0
    e51a:	d001      	beq.n	e520 <am_hal_uart_transfer+0x10c>
    e51c:	f8cb 9000 	str.w	r9, [fp]
    e520:	2f00      	cmp	r7, #0
    e522:	d0ee      	beq.n	e502 <am_hal_uart_transfer+0xee>
    e524:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    e528:	2c00      	cmp	r4, #0
    e52a:	f040 816c 	bne.w	e806 <am_hal_uart_transfer+0x3f2>
    e52e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e530:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e534:	321c      	adds	r2, #28
    e536:	0312      	lsls	r2, r2, #12
    e538:	6990      	ldr	r0, [r2, #24]
    e53a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    e53e:	2800      	cmp	r0, #0
    e540:	f040 819d 	bne.w	e87e <am_hal_uart_transfer+0x46a>
    e544:	6811      	ldr	r1, [r2, #0]
    e546:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    e54a:	bf08      	it	eq
    e54c:	f103 33ff 	addeq.w	r3, r3, #4294967295
    e550:	d008      	beq.n	e564 <am_hal_uart_transfer+0x150>
    e552:	e190      	b.n	e876 <am_hal_uart_transfer+0x462>
    e554:	6991      	ldr	r1, [r2, #24]
    e556:	06c8      	lsls	r0, r1, #27
    e558:	d409      	bmi.n	e56e <am_hal_uart_transfer+0x15a>
    e55a:	6811      	ldr	r1, [r2, #0]
    e55c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e560:	f040 814e 	bne.w	e800 <am_hal_uart_transfer+0x3ec>
    e564:	3401      	adds	r4, #1
    e566:	42a7      	cmp	r7, r4
    e568:	f803 1f01 	strb.w	r1, [r3, #1]!
    e56c:	d1f2      	bne.n	e554 <am_hal_uart_transfer+0x140>
    e56e:	2700      	movs	r7, #0
    e570:	f1bb 0f00 	cmp.w	fp, #0
    e574:	f43f af58 	beq.w	e428 <am_hal_uart_transfer+0x14>
    e578:	f8cb 4000 	str.w	r4, [fp]
    e57c:	e754      	b.n	e428 <am_hal_uart_transfer+0x14>
    e57e:	4680      	mov	r8, r0
    e580:	e76e      	b.n	e460 <am_hal_uart_transfer+0x4c>
    e582:	9301      	str	r3, [sp, #4]
    e584:	4651      	mov	r1, sl
    e586:	46bb      	mov	fp, r7
    e588:	46b8      	mov	r8, r7
    e58a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e58e:	b9f2      	cbnz	r2, e5ce <am_hal_uart_transfer+0x1ba>
    e590:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e592:	b19e      	cbz	r6, e5bc <am_hal_uart_transfer+0x1a8>
    e594:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e598:	321c      	adds	r2, #28
    e59a:	0312      	lsls	r2, r2, #12
    e59c:	3901      	subs	r1, #1
    e59e:	6994      	ldr	r4, [r2, #24]
    e5a0:	f3c4 1440 	ubfx	r4, r4, #5, #1
    e5a4:	b11c      	cbz	r4, e5ae <am_hal_uart_transfer+0x19a>
    e5a6:	e047      	b.n	e638 <am_hal_uart_transfer+0x224>
    e5a8:	6993      	ldr	r3, [r2, #24]
    e5aa:	069b      	lsls	r3, r3, #26
    e5ac:	d441      	bmi.n	e632 <am_hal_uart_transfer+0x21e>
    e5ae:	3401      	adds	r4, #1
    e5b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e5b4:	6013      	str	r3, [r2, #0]
    e5b6:	42b4      	cmp	r4, r6
    e5b8:	d1f6      	bne.n	e5a8 <am_hal_uart_transfer+0x194>
    e5ba:	44a0      	add	r8, r4
    e5bc:	9b00      	ldr	r3, [sp, #0]
    e5be:	2b00      	cmp	r3, #0
    e5c0:	d09f      	beq.n	e502 <am_hal_uart_transfer+0xee>
    e5c2:	4638      	mov	r0, r7
    e5c4:	f8c3 8000 	str.w	r8, [r3]
    e5c8:	b011      	add	sp, #68	; 0x44
    e5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5ce:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e5d0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    e5d2:	1b14      	subs	r4, r2, r4
    e5d4:	42b4      	cmp	r4, r6
    e5d6:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    e5da:	bf28      	it	cs
    e5dc:	4634      	movcs	r4, r6
    e5de:	4622      	mov	r2, r4
    e5e0:	4618      	mov	r0, r3
    e5e2:	9302      	str	r3, [sp, #8]
    e5e4:	f000 fa82 	bl	eaec <am_hal_queue_item_add>
    e5e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e5ea:	9303      	str	r3, [sp, #12]
    e5ec:	f7ff fc52 	bl	de94 <am_hal_interrupt_master_disable>
    e5f0:	9b03      	ldr	r3, [sp, #12]
    e5f2:	9008      	str	r0, [sp, #32]
    e5f4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e5f8:	331c      	adds	r3, #28
    e5fa:	031b      	lsls	r3, r3, #12
    e5fc:	9303      	str	r3, [sp, #12]
    e5fe:	e00d      	b.n	e61c <am_hal_uart_transfer+0x208>
    e600:	f000 faac 	bl	eb5c <am_hal_queue_item_get>
    e604:	b190      	cbz	r0, e62c <am_hal_uart_transfer+0x218>
    e606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e608:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e60c:	331c      	adds	r3, #28
    e60e:	031b      	lsls	r3, r3, #12
    e610:	699a      	ldr	r2, [r3, #24]
    e612:	0692      	lsls	r2, r2, #26
    e614:	bf5c      	itt	pl
    e616:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e61a:	601a      	strpl	r2, [r3, #0]
    e61c:	9b03      	ldr	r3, [sp, #12]
    e61e:	9802      	ldr	r0, [sp, #8]
    e620:	699b      	ldr	r3, [r3, #24]
    e622:	069b      	lsls	r3, r3, #26
    e624:	f04f 0201 	mov.w	r2, #1
    e628:	a907      	add	r1, sp, #28
    e62a:	d5e9      	bpl.n	e600 <am_hal_uart_transfer+0x1ec>
    e62c:	9808      	ldr	r0, [sp, #32]
    e62e:	f7ff fc35 	bl	de9c <am_hal_interrupt_master_set>
    e632:	1b36      	subs	r6, r6, r4
    e634:	44a0      	add	r8, r4
    e636:	d0c1      	beq.n	e5bc <am_hal_uart_transfer+0x1a8>
    e638:	2010      	movs	r0, #16
    e63a:	f7ff fa33 	bl	daa4 <am_hal_flash_delay>
    e63e:	f1b9 3fff 	cmp.w	r9, #4294967295
    e642:	d001      	beq.n	e648 <am_hal_uart_transfer+0x234>
    e644:	f10b 0b01 	add.w	fp, fp, #1
    e648:	45d9      	cmp	r9, fp
    e64a:	d9b7      	bls.n	e5bc <am_hal_uart_transfer+0x1a8>
    e64c:	682a      	ldr	r2, [r5, #0]
    e64e:	9b01      	ldr	r3, [sp, #4]
    e650:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e654:	429a      	cmp	r2, r3
    e656:	eb0a 0108 	add.w	r1, sl, r8
    e65a:	f47f af01 	bne.w	e460 <am_hal_uart_transfer+0x4c>
    e65e:	e794      	b.n	e58a <am_hal_uart_transfer+0x176>
    e660:	4606      	mov	r6, r0
    e662:	2702      	movs	r7, #2
    e664:	e71a      	b.n	e49c <am_hal_uart_transfer+0x88>
    e666:	9200      	str	r2, [sp, #0]
    e668:	f100 0248 	add.w	r2, r0, #72	; 0x48
    e66c:	f04f 0a00 	mov.w	sl, #0
    e670:	9202      	str	r2, [sp, #8]
    e672:	465a      	mov	r2, fp
    e674:	4698      	mov	r8, r3
    e676:	469b      	mov	fp, r3
    e678:	4656      	mov	r6, sl
    e67a:	4613      	mov	r3, r2
    e67c:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    e680:	2a00      	cmp	r2, #0
    e682:	d152      	bne.n	e72a <am_hal_uart_transfer+0x316>
    e684:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e686:	b3a7      	cbz	r7, e6f2 <am_hal_uart_transfer+0x2de>
    e688:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e68c:	311c      	adds	r1, #28
    e68e:	0309      	lsls	r1, r1, #12
    e690:	698a      	ldr	r2, [r1, #24]
    e692:	06d0      	lsls	r0, r2, #27
    e694:	d432      	bmi.n	e6fc <am_hal_uart_transfer+0x2e8>
    e696:	680a      	ldr	r2, [r1, #0]
    e698:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    e69c:	f040 80aa 	bne.w	e7f4 <am_hal_uart_transfer+0x3e0>
    e6a0:	f108 38ff 	add.w	r8, r8, #4294967295
    e6a4:	e006      	b.n	e6b4 <am_hal_uart_transfer+0x2a0>
    e6a6:	698a      	ldr	r2, [r1, #24]
    e6a8:	06d2      	lsls	r2, r2, #27
    e6aa:	d41f      	bmi.n	e6ec <am_hal_uart_transfer+0x2d8>
    e6ac:	680a      	ldr	r2, [r1, #0]
    e6ae:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e6b2:	d161      	bne.n	e778 <am_hal_uart_transfer+0x364>
    e6b4:	3401      	adds	r4, #1
    e6b6:	42bc      	cmp	r4, r7
    e6b8:	f808 2f01 	strb.w	r2, [r8, #1]!
    e6bc:	d1f3      	bne.n	e6a6 <am_hal_uart_transfer+0x292>
    e6be:	469b      	mov	fp, r3
    e6c0:	4426      	add	r6, r4
    e6c2:	f1bb 0f00 	cmp.w	fp, #0
    e6c6:	f43f af1c 	beq.w	e502 <am_hal_uart_transfer+0xee>
    e6ca:	f8cb 6000 	str.w	r6, [fp]
    e6ce:	2700      	movs	r7, #0
    e6d0:	e6aa      	b.n	e428 <am_hal_uart_transfer+0x14>
    e6d2:	9807      	ldr	r0, [sp, #28]
    e6d4:	f7ff fbe2 	bl	de9c <am_hal_interrupt_master_set>
    e6d8:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    e6da:	9802      	ldr	r0, [sp, #8]
    e6dc:	42bc      	cmp	r4, r7
    e6de:	bf28      	it	cs
    e6e0:	463c      	movcs	r4, r7
    e6e2:	4641      	mov	r1, r8
    e6e4:	4622      	mov	r2, r4
    e6e6:	f000 fa39 	bl	eb5c <am_hal_queue_item_get>
    e6ea:	9b01      	ldr	r3, [sp, #4]
    e6ec:	1b3f      	subs	r7, r7, r4
    e6ee:	4426      	add	r6, r4
    e6f0:	d104      	bne.n	e6fc <am_hal_uart_transfer+0x2e8>
    e6f2:	469b      	mov	fp, r3
    e6f4:	e7e5      	b.n	e6c2 <am_hal_uart_transfer+0x2ae>
    e6f6:	bf00      	nop
    e6f8:	01ea9e06 	.word	0x01ea9e06
    e6fc:	2010      	movs	r0, #16
    e6fe:	9301      	str	r3, [sp, #4]
    e700:	f7ff f9d0 	bl	daa4 <am_hal_flash_delay>
    e704:	f1b9 3fff 	cmp.w	r9, #4294967295
    e708:	9b01      	ldr	r3, [sp, #4]
    e70a:	d001      	beq.n	e710 <am_hal_uart_transfer+0x2fc>
    e70c:	f10a 0a01 	add.w	sl, sl, #1
    e710:	45d1      	cmp	r9, sl
    e712:	d9ee      	bls.n	e6f2 <am_hal_uart_transfer+0x2de>
    e714:	682a      	ldr	r2, [r5, #0]
    e716:	9900      	ldr	r1, [sp, #0]
    e718:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e71c:	428a      	cmp	r2, r1
    e71e:	eb0b 0806 	add.w	r8, fp, r6
    e722:	d0ab      	beq.n	e67c <am_hal_uart_transfer+0x268>
    e724:	469b      	mov	fp, r3
    e726:	2702      	movs	r7, #2
    e728:	e6b8      	b.n	e49c <am_hal_uart_transfer+0x88>
    e72a:	9301      	str	r3, [sp, #4]
    e72c:	f7ff fbb2 	bl	de94 <am_hal_interrupt_master_disable>
    e730:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e732:	9007      	str	r0, [sp, #28]
    e734:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    e738:	301c      	adds	r0, #28
    e73a:	9b01      	ldr	r3, [sp, #4]
    e73c:	0300      	lsls	r0, r0, #12
    e73e:	ac08      	add	r4, sp, #32
    e740:	2200      	movs	r2, #0
    e742:	6981      	ldr	r1, [r0, #24]
    e744:	06c9      	lsls	r1, r1, #27
    e746:	d409      	bmi.n	e75c <am_hal_uart_transfer+0x348>
    e748:	6801      	ldr	r1, [r0, #0]
    e74a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e74e:	f102 0201 	add.w	r2, r2, #1
    e752:	d118      	bne.n	e786 <am_hal_uart_transfer+0x372>
    e754:	2a20      	cmp	r2, #32
    e756:	f804 1b01 	strb.w	r1, [r4], #1
    e75a:	d1f2      	bne.n	e742 <am_hal_uart_transfer+0x32e>
    e75c:	a908      	add	r1, sp, #32
    e75e:	9802      	ldr	r0, [sp, #8]
    e760:	9301      	str	r3, [sp, #4]
    e762:	f000 f9c3 	bl	eaec <am_hal_queue_item_add>
    e766:	9b01      	ldr	r3, [sp, #4]
    e768:	2800      	cmp	r0, #0
    e76a:	d1b2      	bne.n	e6d2 <am_hal_uart_transfer+0x2be>
    e76c:	4f45      	ldr	r7, [pc, #276]	; (e884 <am_hal_uart_transfer+0x470>)
    e76e:	469b      	mov	fp, r3
    e770:	9807      	ldr	r0, [sp, #28]
    e772:	f7ff fb93 	bl	de9c <am_hal_interrupt_master_set>
    e776:	e691      	b.n	e49c <am_hal_uart_transfer+0x88>
    e778:	469b      	mov	fp, r3
    e77a:	4426      	add	r6, r4
    e77c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e780:	e68c      	b.n	e49c <am_hal_uart_transfer+0x88>
    e782:	46b8      	mov	r8, r7
    e784:	e71a      	b.n	e5bc <am_hal_uart_transfer+0x1a8>
    e786:	469b      	mov	fp, r3
    e788:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e78c:	e7f0      	b.n	e770 <am_hal_uart_transfer+0x35c>
    e78e:	463e      	mov	r6, r7
    e790:	e797      	b.n	e6c2 <am_hal_uart_transfer+0x2ae>
    e792:	4616      	mov	r6, r2
    e794:	e6b2      	b.n	e4fc <am_hal_uart_transfer+0xe8>
    e796:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e798:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e79a:	1a9b      	subs	r3, r3, r2
    e79c:	429e      	cmp	r6, r3
    e79e:	bf28      	it	cs
    e7a0:	461e      	movcs	r6, r3
    e7a2:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    e7a6:	4651      	mov	r1, sl
    e7a8:	4632      	mov	r2, r6
    e7aa:	4620      	mov	r0, r4
    e7ac:	f000 f99e 	bl	eaec <am_hal_queue_item_add>
    e7b0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e7b2:	f7ff fb6f 	bl	de94 <am_hal_interrupt_master_disable>
    e7b6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e7ba:	371c      	adds	r7, #28
    e7bc:	033f      	lsls	r7, r7, #12
    e7be:	9005      	str	r0, [sp, #20]
    e7c0:	e00d      	b.n	e7de <am_hal_uart_transfer+0x3ca>
    e7c2:	f000 f9cb 	bl	eb5c <am_hal_queue_item_get>
    e7c6:	b188      	cbz	r0, e7ec <am_hal_uart_transfer+0x3d8>
    e7c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e7ca:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e7ce:	331c      	adds	r3, #28
    e7d0:	031b      	lsls	r3, r3, #12
    e7d2:	699a      	ldr	r2, [r3, #24]
    e7d4:	0692      	lsls	r2, r2, #26
    e7d6:	bf5c      	itt	pl
    e7d8:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    e7dc:	601a      	strpl	r2, [r3, #0]
    e7de:	69bb      	ldr	r3, [r7, #24]
    e7e0:	069b      	lsls	r3, r3, #26
    e7e2:	f04f 0201 	mov.w	r2, #1
    e7e6:	a908      	add	r1, sp, #32
    e7e8:	4620      	mov	r0, r4
    e7ea:	d5ea      	bpl.n	e7c2 <am_hal_uart_transfer+0x3ae>
    e7ec:	9805      	ldr	r0, [sp, #20]
    e7ee:	f7ff fb55 	bl	de9c <am_hal_interrupt_master_set>
    e7f2:	e683      	b.n	e4fc <am_hal_uart_transfer+0xe8>
    e7f4:	469b      	mov	fp, r3
    e7f6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e7fa:	e64f      	b.n	e49c <am_hal_uart_transfer+0x88>
    e7fc:	461e      	mov	r6, r3
    e7fe:	e67d      	b.n	e4fc <am_hal_uart_transfer+0xe8>
    e800:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e804:	e6b4      	b.n	e570 <am_hal_uart_transfer+0x15c>
    e806:	9300      	str	r3, [sp, #0]
    e808:	f7ff fb44 	bl	de94 <am_hal_interrupt_master_disable>
    e80c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e80e:	9006      	str	r0, [sp, #24]
    e810:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e814:	321c      	adds	r2, #28
    e816:	0311      	lsls	r1, r2, #12
    e818:	a808      	add	r0, sp, #32
    e81a:	2200      	movs	r2, #0
    e81c:	9b00      	ldr	r3, [sp, #0]
    e81e:	e009      	b.n	e834 <am_hal_uart_transfer+0x420>
    e820:	680c      	ldr	r4, [r1, #0]
    e822:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    e826:	f102 0201 	add.w	r2, r2, #1
    e82a:	d121      	bne.n	e870 <am_hal_uart_transfer+0x45c>
    e82c:	2a20      	cmp	r2, #32
    e82e:	f800 4b01 	strb.w	r4, [r0], #1
    e832:	d002      	beq.n	e83a <am_hal_uart_transfer+0x426>
    e834:	698c      	ldr	r4, [r1, #24]
    e836:	06e4      	lsls	r4, r4, #27
    e838:	d5f2      	bpl.n	e820 <am_hal_uart_transfer+0x40c>
    e83a:	f105 0648 	add.w	r6, r5, #72	; 0x48
    e83e:	a908      	add	r1, sp, #32
    e840:	4630      	mov	r0, r6
    e842:	9300      	str	r3, [sp, #0]
    e844:	f000 f952 	bl	eaec <am_hal_queue_item_add>
    e848:	b920      	cbnz	r0, e854 <am_hal_uart_transfer+0x440>
    e84a:	4f0e      	ldr	r7, [pc, #56]	; (e884 <am_hal_uart_transfer+0x470>)
    e84c:	9806      	ldr	r0, [sp, #24]
    e84e:	f7ff fb25 	bl	de9c <am_hal_interrupt_master_set>
    e852:	e5e9      	b.n	e428 <am_hal_uart_transfer+0x14>
    e854:	9806      	ldr	r0, [sp, #24]
    e856:	f7ff fb21 	bl	de9c <am_hal_interrupt_master_set>
    e85a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    e85c:	9b00      	ldr	r3, [sp, #0]
    e85e:	42bc      	cmp	r4, r7
    e860:	bf28      	it	cs
    e862:	463c      	movcs	r4, r7
    e864:	4619      	mov	r1, r3
    e866:	4630      	mov	r0, r6
    e868:	4622      	mov	r2, r4
    e86a:	f000 f977 	bl	eb5c <am_hal_queue_item_get>
    e86e:	e67e      	b.n	e56e <am_hal_uart_transfer+0x15a>
    e870:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e874:	e7ea      	b.n	e84c <am_hal_uart_transfer+0x438>
    e876:	4604      	mov	r4, r0
    e878:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e87c:	e678      	b.n	e570 <am_hal_uart_transfer+0x15c>
    e87e:	4627      	mov	r7, r4
    e880:	e676      	b.n	e570 <am_hal_uart_transfer+0x15c>
    e882:	bf00      	nop
    e884:	08000001 	.word	0x08000001

0000e888 <am_hal_uart_interrupt_service>:
    e888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e88c:	6803      	ldr	r3, [r0, #0]
    e88e:	4c43      	ldr	r4, [pc, #268]	; (e99c <am_hal_uart_interrupt_service+0x114>)
    e890:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e894:	42a3      	cmp	r3, r4
    e896:	b08a      	sub	sp, #40	; 0x28
    e898:	d003      	beq.n	e8a2 <am_hal_uart_interrupt_service+0x1a>
    e89a:	2002      	movs	r0, #2
    e89c:	b00a      	add	sp, #40	; 0x28
    e89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e8a2:	f011 0f50 	tst.w	r1, #80	; 0x50
    e8a6:	4615      	mov	r5, r2
    e8a8:	460e      	mov	r6, r1
    e8aa:	4604      	mov	r4, r0
    e8ac:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e8ae:	d003      	beq.n	e8b8 <am_hal_uart_interrupt_service+0x30>
    e8b0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    e8b4:	2b00      	cmp	r3, #0
    e8b6:	d146      	bne.n	e946 <am_hal_uart_interrupt_service+0xbe>
    e8b8:	06b1      	lsls	r1, r6, #26
    e8ba:	d532      	bpl.n	e922 <am_hal_uart_interrupt_service+0x9a>
    e8bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e8c0:	b95b      	cbnz	r3, e8da <am_hal_uart_interrupt_service+0x52>
    e8c2:	2d00      	cmp	r5, #0
    e8c4:	d03d      	beq.n	e942 <am_hal_uart_interrupt_service+0xba>
    e8c6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e8ca:	371c      	adds	r7, #28
    e8cc:	033f      	lsls	r7, r7, #12
    e8ce:	69bb      	ldr	r3, [r7, #24]
    e8d0:	071b      	lsls	r3, r3, #28
    e8d2:	d534      	bpl.n	e93e <am_hal_uart_interrupt_service+0xb6>
    e8d4:	2000      	movs	r0, #0
    e8d6:	6028      	str	r0, [r5, #0]
    e8d8:	e7e0      	b.n	e89c <am_hal_uart_interrupt_service+0x14>
    e8da:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e8dc:	f7ff fada 	bl	de94 <am_hal_interrupt_master_disable>
    e8e0:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    e8e4:	361c      	adds	r6, #28
    e8e6:	0336      	lsls	r6, r6, #12
    e8e8:	9002      	str	r0, [sp, #8]
    e8ea:	f104 082c 	add.w	r8, r4, #44	; 0x2c
    e8ee:	e00d      	b.n	e90c <am_hal_uart_interrupt_service+0x84>
    e8f0:	f000 f934 	bl	eb5c <am_hal_queue_item_get>
    e8f4:	b190      	cbz	r0, e91c <am_hal_uart_interrupt_service+0x94>
    e8f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e8f8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e8fc:	331c      	adds	r3, #28
    e8fe:	031b      	lsls	r3, r3, #12
    e900:	699a      	ldr	r2, [r3, #24]
    e902:	0692      	lsls	r2, r2, #26
    e904:	bf5c      	itt	pl
    e906:	f89d 2003 	ldrbpl.w	r2, [sp, #3]
    e90a:	601a      	strpl	r2, [r3, #0]
    e90c:	69b3      	ldr	r3, [r6, #24]
    e90e:	069b      	lsls	r3, r3, #26
    e910:	f04f 0201 	mov.w	r2, #1
    e914:	f10d 0103 	add.w	r1, sp, #3
    e918:	4640      	mov	r0, r8
    e91a:	d5e9      	bpl.n	e8f0 <am_hal_uart_interrupt_service+0x68>
    e91c:	9802      	ldr	r0, [sp, #8]
    e91e:	f7ff fabd 	bl	de9c <am_hal_interrupt_master_set>
    e922:	b175      	cbz	r5, e942 <am_hal_uart_interrupt_service+0xba>
    e924:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e928:	2b00      	cmp	r3, #0
    e92a:	d0cc      	beq.n	e8c6 <am_hal_uart_interrupt_service+0x3e>
    e92c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e92e:	b943      	cbnz	r3, e942 <am_hal_uart_interrupt_service+0xba>
    e930:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e934:	371c      	adds	r7, #28
    e936:	033f      	lsls	r7, r7, #12
    e938:	69bb      	ldr	r3, [r7, #24]
    e93a:	071a      	lsls	r2, r3, #28
    e93c:	d401      	bmi.n	e942 <am_hal_uart_interrupt_service+0xba>
    e93e:	2301      	movs	r3, #1
    e940:	602b      	str	r3, [r5, #0]
    e942:	2000      	movs	r0, #0
    e944:	e7aa      	b.n	e89c <am_hal_uart_interrupt_service+0x14>
    e946:	f7ff faa5 	bl	de94 <am_hal_interrupt_master_disable>
    e94a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e94c:	9001      	str	r0, [sp, #4]
    e94e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e952:	311c      	adds	r1, #28
    e954:	0309      	lsls	r1, r1, #12
    e956:	a802      	add	r0, sp, #8
    e958:	2200      	movs	r2, #0
    e95a:	698b      	ldr	r3, [r1, #24]
    e95c:	06db      	lsls	r3, r3, #27
    e95e:	d409      	bmi.n	e974 <am_hal_uart_interrupt_service+0xec>
    e960:	680b      	ldr	r3, [r1, #0]
    e962:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e966:	f102 0201 	add.w	r2, r2, #1
    e96a:	d10f      	bne.n	e98c <am_hal_uart_interrupt_service+0x104>
    e96c:	2a20      	cmp	r2, #32
    e96e:	f800 3b01 	strb.w	r3, [r0], #1
    e972:	d1f2      	bne.n	e95a <am_hal_uart_interrupt_service+0xd2>
    e974:	a902      	add	r1, sp, #8
    e976:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e97a:	f000 f8b7 	bl	eaec <am_hal_queue_item_add>
    e97e:	b940      	cbnz	r0, e992 <am_hal_uart_interrupt_service+0x10a>
    e980:	4c07      	ldr	r4, [pc, #28]	; (e9a0 <am_hal_uart_interrupt_service+0x118>)
    e982:	9801      	ldr	r0, [sp, #4]
    e984:	f7ff fa8a 	bl	de9c <am_hal_interrupt_master_set>
    e988:	4620      	mov	r0, r4
    e98a:	e787      	b.n	e89c <am_hal_uart_interrupt_service+0x14>
    e98c:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
    e990:	e7f7      	b.n	e982 <am_hal_uart_interrupt_service+0xfa>
    e992:	9801      	ldr	r0, [sp, #4]
    e994:	f7ff fa82 	bl	de9c <am_hal_interrupt_master_set>
    e998:	e78e      	b.n	e8b8 <am_hal_uart_interrupt_service+0x30>
    e99a:	bf00      	nop
    e99c:	01ea9e06 	.word	0x01ea9e06
    e9a0:	08000001 	.word	0x08000001

0000e9a4 <am_hal_uart_interrupt_enable>:
    e9a4:	6803      	ldr	r3, [r0, #0]
    e9a6:	4a08      	ldr	r2, [pc, #32]	; (e9c8 <am_hal_uart_interrupt_enable+0x24>)
    e9a8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e9ac:	4293      	cmp	r3, r2
    e9ae:	d001      	beq.n	e9b4 <am_hal_uart_interrupt_enable+0x10>
    e9b0:	2002      	movs	r0, #2
    e9b2:	4770      	bx	lr
    e9b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e9b6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e9ba:	331c      	adds	r3, #28
    e9bc:	031b      	lsls	r3, r3, #12
    e9be:	2000      	movs	r0, #0
    e9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e9c2:	4311      	orrs	r1, r2
    e9c4:	6399      	str	r1, [r3, #56]	; 0x38
    e9c6:	4770      	bx	lr
    e9c8:	01ea9e06 	.word	0x01ea9e06

0000e9cc <am_hal_uart_interrupt_clear>:
    e9cc:	6803      	ldr	r3, [r0, #0]
    e9ce:	4a07      	ldr	r2, [pc, #28]	; (e9ec <am_hal_uart_interrupt_clear+0x20>)
    e9d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e9d4:	4293      	cmp	r3, r2
    e9d6:	d001      	beq.n	e9dc <am_hal_uart_interrupt_clear+0x10>
    e9d8:	2002      	movs	r0, #2
    e9da:	4770      	bx	lr
    e9dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e9de:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e9e2:	331c      	adds	r3, #28
    e9e4:	031b      	lsls	r3, r3, #12
    e9e6:	2000      	movs	r0, #0
    e9e8:	6459      	str	r1, [r3, #68]	; 0x44
    e9ea:	4770      	bx	lr
    e9ec:	01ea9e06 	.word	0x01ea9e06

0000e9f0 <am_hal_uart_interrupt_status_get>:
    e9f0:	6803      	ldr	r3, [r0, #0]
    e9f2:	b410      	push	{r4}
    e9f4:	4c0b      	ldr	r4, [pc, #44]	; (ea24 <am_hal_uart_interrupt_status_get+0x34>)
    e9f6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e9fa:	42a3      	cmp	r3, r4
    e9fc:	d003      	beq.n	ea06 <am_hal_uart_interrupt_status_get+0x16>
    e9fe:	2002      	movs	r0, #2
    ea00:	f85d 4b04 	ldr.w	r4, [sp], #4
    ea04:	4770      	bx	lr
    ea06:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ea08:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ea0c:	331c      	adds	r3, #28
    ea0e:	031b      	lsls	r3, r3, #12
    ea10:	b12a      	cbz	r2, ea1e <am_hal_uart_interrupt_status_get+0x2e>
    ea12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ea14:	600b      	str	r3, [r1, #0]
    ea16:	2000      	movs	r0, #0
    ea18:	f85d 4b04 	ldr.w	r4, [sp], #4
    ea1c:	4770      	bx	lr
    ea1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ea20:	e7f8      	b.n	ea14 <am_hal_uart_interrupt_status_get+0x24>
    ea22:	bf00      	nop
    ea24:	01ea9e06 	.word	0x01ea9e06

0000ea28 <am_hal_pwrctrl_periph_enable>:
    ea28:	b570      	push	{r4, r5, r6, lr}
    ea2a:	b082      	sub	sp, #8
    ea2c:	4604      	mov	r4, r0
    ea2e:	f7ff fa31 	bl	de94 <am_hal_interrupt_master_disable>
    ea32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ea36:	4d0f      	ldr	r5, [pc, #60]	; (ea74 <am_hal_pwrctrl_periph_enable+0x4c>)
    ea38:	4e0f      	ldr	r6, [pc, #60]	; (ea78 <am_hal_pwrctrl_periph_enable+0x50>)
    ea3a:	9001      	str	r0, [sp, #4]
    ea3c:	00a4      	lsls	r4, r4, #2
    ea3e:	68aa      	ldr	r2, [r5, #8]
    ea40:	5933      	ldr	r3, [r6, r4]
    ea42:	4313      	orrs	r3, r2
    ea44:	60ab      	str	r3, [r5, #8]
    ea46:	9801      	ldr	r0, [sp, #4]
    ea48:	4434      	add	r4, r6
    ea4a:	f7ff fa27 	bl	de9c <am_hal_interrupt_master_set>
    ea4e:	20a0      	movs	r0, #160	; 0xa0
    ea50:	f7ff f828 	bl	daa4 <am_hal_flash_delay>
    ea54:	69ab      	ldr	r3, [r5, #24]
    ea56:	6864      	ldr	r4, [r4, #4]
    ea58:	4223      	tst	r3, r4
    ea5a:	d103      	bne.n	ea64 <am_hal_pwrctrl_periph_enable+0x3c>
    ea5c:	20a0      	movs	r0, #160	; 0xa0
    ea5e:	f7ff f821 	bl	daa4 <am_hal_flash_delay>
    ea62:	69ab      	ldr	r3, [r5, #24]
    ea64:	4b03      	ldr	r3, [pc, #12]	; (ea74 <am_hal_pwrctrl_periph_enable+0x4c>)
    ea66:	699b      	ldr	r3, [r3, #24]
    ea68:	4223      	tst	r3, r4
    ea6a:	bf0c      	ite	eq
    ea6c:	2001      	moveq	r0, #1
    ea6e:	2000      	movne	r0, #0
    ea70:	b002      	add	sp, #8
    ea72:	bd70      	pop	{r4, r5, r6, pc}
    ea74:	40021000 	.word	0x40021000
    ea78:	0000f0d4 	.word	0x0000f0d4

0000ea7c <am_hal_pwrctrl_periph_disable>:
    ea7c:	b570      	push	{r4, r5, r6, lr}
    ea7e:	b082      	sub	sp, #8
    ea80:	4604      	mov	r4, r0
    ea82:	f7ff fa07 	bl	de94 <am_hal_interrupt_master_disable>
    ea86:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ea8a:	4d10      	ldr	r5, [pc, #64]	; (eacc <am_hal_pwrctrl_periph_disable+0x50>)
    ea8c:	4e10      	ldr	r6, [pc, #64]	; (ead0 <am_hal_pwrctrl_periph_disable+0x54>)
    ea8e:	9001      	str	r0, [sp, #4]
    ea90:	00a4      	lsls	r4, r4, #2
    ea92:	68ab      	ldr	r3, [r5, #8]
    ea94:	5932      	ldr	r2, [r6, r4]
    ea96:	ea23 0302 	bic.w	r3, r3, r2
    ea9a:	60ab      	str	r3, [r5, #8]
    ea9c:	9801      	ldr	r0, [sp, #4]
    ea9e:	4434      	add	r4, r6
    eaa0:	f7ff f9fc 	bl	de9c <am_hal_interrupt_master_set>
    eaa4:	20a0      	movs	r0, #160	; 0xa0
    eaa6:	f7fe fffd 	bl	daa4 <am_hal_flash_delay>
    eaaa:	69ab      	ldr	r3, [r5, #24]
    eaac:	6864      	ldr	r4, [r4, #4]
    eaae:	4223      	tst	r3, r4
    eab0:	d003      	beq.n	eaba <am_hal_pwrctrl_periph_disable+0x3e>
    eab2:	20a0      	movs	r0, #160	; 0xa0
    eab4:	f7fe fff6 	bl	daa4 <am_hal_flash_delay>
    eab8:	69ab      	ldr	r3, [r5, #24]
    eaba:	4b04      	ldr	r3, [pc, #16]	; (eacc <am_hal_pwrctrl_periph_disable+0x50>)
    eabc:	699b      	ldr	r3, [r3, #24]
    eabe:	4223      	tst	r3, r4
    eac0:	bf14      	ite	ne
    eac2:	2001      	movne	r0, #1
    eac4:	2000      	moveq	r0, #0
    eac6:	b002      	add	sp, #8
    eac8:	bd70      	pop	{r4, r5, r6, pc}
    eaca:	bf00      	nop
    eacc:	40021000 	.word	0x40021000
    ead0:	0000f0d4 	.word	0x0000f0d4

0000ead4 <am_hal_queue_init>:
    ead4:	b410      	push	{r4}
    ead6:	2400      	movs	r4, #0
    ead8:	6004      	str	r4, [r0, #0]
    eada:	6044      	str	r4, [r0, #4]
    eadc:	6084      	str	r4, [r0, #8]
    eade:	60c3      	str	r3, [r0, #12]
    eae0:	6102      	str	r2, [r0, #16]
    eae2:	6141      	str	r1, [r0, #20]
    eae4:	f85d 4b04 	ldr.w	r4, [sp], #4
    eae8:	4770      	bx	lr
    eaea:	bf00      	nop

0000eaec <am_hal_queue_item_add>:
    eaec:	b5f0      	push	{r4, r5, r6, r7, lr}
    eaee:	4604      	mov	r4, r0
    eaf0:	6906      	ldr	r6, [r0, #16]
    eaf2:	b083      	sub	sp, #12
    eaf4:	fb06 f602 	mul.w	r6, r6, r2
    eaf8:	460d      	mov	r5, r1
    eafa:	f7ff f9cb 	bl	de94 <am_hal_interrupt_master_disable>
    eafe:	68e7      	ldr	r7, [r4, #12]
    eb00:	68a2      	ldr	r2, [r4, #8]
    eb02:	9001      	str	r0, [sp, #4]
    eb04:	1abb      	subs	r3, r7, r2
    eb06:	429e      	cmp	r6, r3
    eb08:	d826      	bhi.n	eb58 <am_hal_queue_item_add+0x6c>
    eb0a:	b196      	cbz	r6, eb32 <am_hal_queue_item_add+0x46>
    eb0c:	6823      	ldr	r3, [r4, #0]
    eb0e:	4629      	mov	r1, r5
    eb10:	b1c5      	cbz	r5, eb44 <am_hal_queue_item_add+0x58>
    eb12:	19af      	adds	r7, r5, r6
    eb14:	6962      	ldr	r2, [r4, #20]
    eb16:	f811 0b01 	ldrb.w	r0, [r1], #1
    eb1a:	54d0      	strb	r0, [r2, r3]
    eb1c:	6823      	ldr	r3, [r4, #0]
    eb1e:	68e5      	ldr	r5, [r4, #12]
    eb20:	3301      	adds	r3, #1
    eb22:	42b9      	cmp	r1, r7
    eb24:	fbb3 f0f5 	udiv	r0, r3, r5
    eb28:	fb05 3310 	mls	r3, r5, r0, r3
    eb2c:	6023      	str	r3, [r4, #0]
    eb2e:	d1f1      	bne.n	eb14 <am_hal_queue_item_add+0x28>
    eb30:	68a2      	ldr	r2, [r4, #8]
    eb32:	4432      	add	r2, r6
    eb34:	60a2      	str	r2, [r4, #8]
    eb36:	2401      	movs	r4, #1
    eb38:	9801      	ldr	r0, [sp, #4]
    eb3a:	f7ff f9af 	bl	de9c <am_hal_interrupt_master_set>
    eb3e:	4620      	mov	r0, r4
    eb40:	b003      	add	sp, #12
    eb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb44:	3101      	adds	r1, #1
    eb46:	3301      	adds	r3, #1
    eb48:	428e      	cmp	r6, r1
    eb4a:	fbb3 f0f7 	udiv	r0, r3, r7
    eb4e:	fb07 3310 	mls	r3, r7, r0, r3
    eb52:	d1f7      	bne.n	eb44 <am_hal_queue_item_add+0x58>
    eb54:	6023      	str	r3, [r4, #0]
    eb56:	e7ec      	b.n	eb32 <am_hal_queue_item_add+0x46>
    eb58:	2400      	movs	r4, #0
    eb5a:	e7ed      	b.n	eb38 <am_hal_queue_item_add+0x4c>

0000eb5c <am_hal_queue_item_get>:
    eb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb5e:	4604      	mov	r4, r0
    eb60:	6906      	ldr	r6, [r0, #16]
    eb62:	b083      	sub	sp, #12
    eb64:	fb06 f602 	mul.w	r6, r6, r2
    eb68:	460d      	mov	r5, r1
    eb6a:	f7ff f993 	bl	de94 <am_hal_interrupt_master_disable>
    eb6e:	68a2      	ldr	r2, [r4, #8]
    eb70:	9001      	str	r0, [sp, #4]
    eb72:	4296      	cmp	r6, r2
    eb74:	d81c      	bhi.n	ebb0 <am_hal_queue_item_get+0x54>
    eb76:	b196      	cbz	r6, eb9e <am_hal_queue_item_get+0x42>
    eb78:	6863      	ldr	r3, [r4, #4]
    eb7a:	b1dd      	cbz	r5, ebb4 <am_hal_queue_item_get+0x58>
    eb7c:	4629      	mov	r1, r5
    eb7e:	19af      	adds	r7, r5, r6
    eb80:	6962      	ldr	r2, [r4, #20]
    eb82:	5cd3      	ldrb	r3, [r2, r3]
    eb84:	f801 3b01 	strb.w	r3, [r1], #1
    eb88:	6863      	ldr	r3, [r4, #4]
    eb8a:	68e5      	ldr	r5, [r4, #12]
    eb8c:	3301      	adds	r3, #1
    eb8e:	428f      	cmp	r7, r1
    eb90:	fbb3 f0f5 	udiv	r0, r3, r5
    eb94:	fb05 3310 	mls	r3, r5, r0, r3
    eb98:	6063      	str	r3, [r4, #4]
    eb9a:	d1f1      	bne.n	eb80 <am_hal_queue_item_get+0x24>
    eb9c:	68a2      	ldr	r2, [r4, #8]
    eb9e:	1b92      	subs	r2, r2, r6
    eba0:	60a2      	str	r2, [r4, #8]
    eba2:	2401      	movs	r4, #1
    eba4:	9801      	ldr	r0, [sp, #4]
    eba6:	f7ff f979 	bl	de9c <am_hal_interrupt_master_set>
    ebaa:	4620      	mov	r0, r4
    ebac:	b003      	add	sp, #12
    ebae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebb0:	2400      	movs	r4, #0
    ebb2:	e7f7      	b.n	eba4 <am_hal_queue_item_get+0x48>
    ebb4:	68e0      	ldr	r0, [r4, #12]
    ebb6:	4629      	mov	r1, r5
    ebb8:	3101      	adds	r1, #1
    ebba:	3301      	adds	r3, #1
    ebbc:	428e      	cmp	r6, r1
    ebbe:	fbb3 f5f0 	udiv	r5, r3, r0
    ebc2:	fb00 3315 	mls	r3, r0, r5, r3
    ebc6:	d1f7      	bne.n	ebb8 <am_hal_queue_item_get+0x5c>
    ebc8:	6063      	str	r3, [r4, #4]
    ebca:	e7e8      	b.n	eb9e <am_hal_queue_item_get+0x42>
    ebcc:	72410a0a 	.word	0x72410a0a
    ebd0:	696d6574 	.word	0x696d6574
    ebd4:	56532073 	.word	0x56532073
    ebd8:	6f42204c 	.word	0x6f42204c
    ebdc:	6f6c746f 	.word	0x6f6c746f
    ebe0:	72656461 	.word	0x72656461
    ebe4:	44202d20 	.word	0x44202d20
    ebe8:	47554245 	.word	0x47554245
    ebec:	00000a0a 	.word	0x00000a0a
    ebf0:	73616870 	.word	0x73616870
    ebf4:	63093a65 	.word	0x63093a65
    ebf8:	69666e6f 	.word	0x69666e6f
    ebfc:	62206d72 	.word	0x62206d72
    ec00:	6c746f6f 	.word	0x6c746f6f
    ec04:	6964616f 	.word	0x6964616f
    ec08:	6520676e 	.word	0x6520676e
    ec0c:	7972746e 	.word	0x7972746e
    ec10:	0000000a 	.word	0x0000000a
    ec14:	6e657309 	.word	0x6e657309
    ec18:	676e6964 	.word	0x676e6964
    ec1c:	74724120 	.word	0x74724120
    ec20:	73696d65 	.word	0x73696d65
    ec24:	4c565320 	.word	0x4c565320
    ec28:	72657620 	.word	0x72657620
    ec2c:	6e6f6973 	.word	0x6e6f6973
    ec30:	63617020 	.word	0x63617020
    ec34:	0a74656b 	.word	0x0a74656b
    ec38:	00000000 	.word	0x00000000
    ec3c:	69617709 	.word	0x69617709
    ec40:	676e6974 	.word	0x676e6974
    ec44:	726f6620 	.word	0x726f6620
    ec48:	6f6f6220 	.word	0x6f6f6220
    ec4c:	616f6c74 	.word	0x616f6c74
    ec50:	20726564 	.word	0x20726564
    ec54:	666e6f63 	.word	0x666e6f63
    ec58:	616d7269 	.word	0x616d7269
    ec5c:	6e6f6974 	.word	0x6e6f6974
    ec60:	0000000a 	.word	0x0000000a
    ec64:	206f6e09 	.word	0x206f6e09
    ec68:	666e6f63 	.word	0x666e6f63
    ec6c:	616d7269 	.word	0x616d7269
    ec70:	6e6f6974 	.word	0x6e6f6974
    ec74:	63657220 	.word	0x63657220
    ec78:	65766965 	.word	0x65766965
    ec7c:	00000a64 	.word	0x00000a64
    ec80:	746e6509 	.word	0x746e6509
    ec84:	6e697265 	.word	0x6e697265
    ec88:	6f622067 	.word	0x6f622067
    ec8c:	6f6c746f 	.word	0x6f6c746f
    ec90:	72656461 	.word	0x72656461
    ec94:	00000a0a 	.word	0x00000a0a
    ec98:	4f525245 	.word	0x4f525245
    ec9c:	202d2052 	.word	0x202d2052
    eca0:	6f6e7572 	.word	0x6f6e7572
    eca4:	00006666 	.word	0x00006666
    eca8:	73616870 	.word	0x73616870
    ecac:	64093a65 	.word	0x64093a65
    ecb0:	63657465 	.word	0x63657465
    ecb4:	61622074 	.word	0x61622074
    ecb8:	72206475 	.word	0x72206475
    ecbc:	0a657461 	.word	0x0a657461
    ecc0:	00000000 	.word	0x00000000
    ecc4:	75616209 	.word	0x75616209
    ecc8:	61722064 	.word	0x61722064
    eccc:	6e206574 	.word	0x6e206574
    ecd0:	6420746f 	.word	0x6420746f
    ecd4:	63657465 	.word	0x63657465
    ecd8:	2e646574 	.word	0x2e646574
    ecdc:	7209090a 	.word	0x7209090a
    ece0:	6e697369 	.word	0x6e697369
    ece4:	64652067 	.word	0x64652067
    ece8:	3a736567 	.word	0x3a736567
    ecec:	0a642509 	.word	0x0a642509
    ecf0:	69740909 	.word	0x69740909
    ecf4:	2064656d 	.word	0x2064656d
    ecf8:	3a74756f 	.word	0x3a74756f
    ecfc:	0a642509 	.word	0x0a642509
    ed00:	0000000a 	.word	0x0000000a
    ed04:	74656409 	.word	0x74656409
    ed08:	65746365 	.word	0x65746365
    ed0c:	61762064 	.word	0x61762064
    ed10:	2064696c 	.word	0x2064696c
    ed14:	64756162 	.word	0x64756162
    ed18:	74617220 	.word	0x74617220
    ed1c:	25093a65 	.word	0x25093a65
    ed20:	000a0a64 	.word	0x000a0a64
    ed24:	73616870 	.word	0x73616870
    ed28:	62093a65 	.word	0x62093a65
    ed2c:	6c746f6f 	.word	0x6c746f6f
    ed30:	0a64616f 	.word	0x0a64616f
    ed34:	00000000 	.word	0x00000000
    ed38:	71657209 	.word	0x71657209
    ed3c:	74736575 	.word	0x74736575
    ed40:	20676e69 	.word	0x20676e69
    ed44:	72746572 	.word	0x72746572
    ed48:	6d736e61 	.word	0x6d736e61
    ed4c:	69737369 	.word	0x69737369
    ed50:	000a6e6f 	.word	0x000a6e6f
    ed54:	71657209 	.word	0x71657209
    ed58:	74736575 	.word	0x74736575
    ed5c:	20676e69 	.word	0x20676e69
    ed60:	7478656e 	.word	0x7478656e
    ed64:	70706120 	.word	0x70706120
    ed68:	61726620 	.word	0x61726620
    ed6c:	000a656d 	.word	0x000a656d
    ed70:	72650909 	.word	0x72650909
    ed74:	20726f72 	.word	0x20726f72
    ed78:	65636572 	.word	0x65636572
    ed7c:	6e697669 	.word	0x6e697669
    ed80:	61702067 	.word	0x61702067
    ed84:	74656b63 	.word	0x74656b63
    ed88:	64252820 	.word	0x64252820
    ed8c:	00000a29 	.word	0x00000a29
    ed90:	65720909 	.word	0x65720909
    ed94:	76696563 	.word	0x76696563
    ed98:	61206465 	.word	0x61206465
    ed9c:	7061206e 	.word	0x7061206e
    eda0:	72662070 	.word	0x72662070
    eda4:	0a656d61 	.word	0x0a656d61
    eda8:	00000000 	.word	0x00000000
    edac:	65720909 	.word	0x65720909
    edb0:	76696563 	.word	0x76696563
    edb4:	64206465 	.word	0x64206465
    edb8:	20656e6f 	.word	0x20656e6f
    edbc:	6e676973 	.word	0x6e676973
    edc0:	0a216c61 	.word	0x0a216c61
    edc4:	0000000a 	.word	0x0000000a
    edc8:	746f6f62 	.word	0x746f6f62
    edcc:	64616f6c 	.word	0x64616f6c
    edd0:	72726520 	.word	0x72726520
    edd4:	2d20726f 	.word	0x2d20726f
    edd8:	6b6e7520 	.word	0x6b6e7520
    eddc:	6e776f6e 	.word	0x6e776f6e
    ede0:	6d6f6320 	.word	0x6d6f6320
    ede4:	646e616d 	.word	0x646e616d
    ede8:	0000000a 	.word	0x0000000a
    edec:	00000004 	.word	0x00000004
    edf0:	1000103c 	.word	0x1000103c
    edf4:	08000800 	.word	0x08000800
    edf8:	72660909 	.word	0x72660909
    edfc:	5f656d61 	.word	0x5f656d61
    ee00:	72646461 	.word	0x72646461
    ee04:	20737365 	.word	0x20737365
    ee08:	7830203d 	.word	0x7830203d
    ee0c:	58383025 	.word	0x58383025
    ee10:	756e202c 	.word	0x756e202c
    ee14:	6f775f6d 	.word	0x6f775f6d
    ee18:	20736472 	.word	0x20736472
    ee1c:	6425203d 	.word	0x6425203d
    ee20:	0000000a 	.word	0x0000000a
    ee24:	6f727245 	.word	0x6f727245
    ee28:	66203a72 	.word	0x66203a72
    ee2c:	656d6172 	.word	0x656d6172
    ee30:	63617020 	.word	0x63617020
    ee34:	2074656b 	.word	0x2074656b
    ee38:	20746f6e 	.word	0x20746f6e
    ee3c:	65746e69 	.word	0x65746e69
    ee40:	20726567 	.word	0x20726567
    ee44:	746c756d 	.word	0x746c756d
    ee48:	656c7069 	.word	0x656c7069
    ee4c:	20666f20 	.word	0x20666f20
    ee50:	64726f77 	.word	0x64726f77
    ee54:	34282073 	.word	0x34282073
    ee58:	74796220 	.word	0x74796220
    ee5c:	70207365 	.word	0x70207365
    ee60:	77207265 	.word	0x77207265
    ee64:	2964726f 	.word	0x2964726f
    ee68:	0000000a 	.word	0x0000000a
    ee6c:	53414c46 	.word	0x53414c46
    ee70:	414d5f48 	.word	0x414d5f48
    ee74:	455f5353 	.word	0x455f5353
    ee78:	45534152 	.word	0x45534152
    ee7c:	32336920 	.word	0x32336920
    ee80:	75746552 	.word	0x75746552
    ee84:	6f436e72 	.word	0x6f436e72
    ee88:	3d206564 	.word	0x3d206564
    ee8c:	25783020 	.word	0x25783020
    ee90:	0d0a2e78 	.word	0x0d0a2e78
    ee94:	00000000 	.word	0x00000000
    ee98:	53414c46 	.word	0x53414c46
    ee9c:	52575f48 	.word	0x52575f48
    eea0:	20455449 	.word	0x20455449
    eea4:	6f727265 	.word	0x6f727265
    eea8:	203d2072 	.word	0x203d2072
    eeac:	78257830 	.word	0x78257830
    eeb0:	000d0a2e 	.word	0x000d0a2e
    eeb4:	2d2d090a 	.word	0x2d2d090a
    eeb8:	70706120 	.word	0x70706120
    eebc:	61747320 	.word	0x61747320
    eec0:	2d207472 	.word	0x2d207472
    eec4:	00000a2d 	.word	0x00000a2d
    eec8:	6d754a0a 	.word	0x6d754a0a
    eecc:	6f742070 	.word	0x6f742070
    eed0:	70704120 	.word	0x70704120
    eed4:	20746120 	.word	0x20746120
    eed8:	30257830 	.word	0x30257830
    eedc:	0a0a5838 	.word	0x0a0a5838
    eee0:	00000000 	.word	0x00000000

0000eee4 <am_hal_cachectrl_defaults>:
    eee4:	00000308                                ....

0000eee8 <g_AM_HAL_GPIO_INPUT_PULLUP>:
    eee8:	00001023                                #...

0000eeec <g_ui8Bit76Capabilities>:
    eeec:	02800101 80010180 80800101 80808080     ................
    eefc:	80808080 80808008 01800180 80808080     ................
    ef0c:	80808080 01800402 01010401 80808080     ................
    ef1c:	00000101                                ....

0000ef20 <g_ui8NCEtable>:
    ef20:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    ef30:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    ef40:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ef50:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ef60:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ef70:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    ef80:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    ef90:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    efa0:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    efb0:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    efc0:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    efd0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    efe0:	32221202 43231303                       .."2..#C

0000efe8 <g_ui8Inpen>:
    efe8:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    eff8:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    f008:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    f018:	00003130                                01..

0000f01c <g_AM_HAL_GPIO_DISABLE>:
    f01c:	00000003                                ....

0000f020 <g_ui8nCEpins>:
    f020:	02070707 00080802 01020202 01010101     ................
    f030:	01010101 01010101 01010101 01010101     ................
    f040:	01010101 08010101 01010008 01010101     ................
    f050:	00000101                                ....

0000f054 <g_am_hal_mcuctrl_flash_size>:
    f054:	00004000 00008000 00010000 00020000     .@..............
    f064:	00040000 00080000 00100000 00200000     .............. .
    f074:	00180000 00000000 00000000 00000000     ................
	...

0000f094 <g_am_hal_mcuctrl_sram_size>:
    f094:	00004000 00008000 00010000 00020000     .@..............
    f0a4:	00040000 00080000 00100000 00060000     ................
    f0b4:	000c0000 00000000 00000000 00000000     ................
	...

0000f0d4 <am_hal_pwrctrl_peripheral_control>:
	...
    f0e0:	00000001 00000004 00000004 00000002     ................
    f0f0:	00000008 00000008 00000004 00000008     ................
    f100:	00000008 00000008 00000008 00000008     ................
    f110:	00000010 00000010 00000010 00000020     ............ ...
    f120:	00000010 00000010 00000040 00000010     ........@.......
    f130:	00000010 00000080 00000004 00000004     ................
    f140:	00000100 00000004 00000004 00000200     ................
    f150:	00000020 00000020 00000400 00000004      ... ...........
    f160:	00000004 00000800 00000040 00000040     ........@...@...
    f170:	00001000 00000080 00000080 00002000     ............. ..
    f180:	00000100 00000100                       ........
